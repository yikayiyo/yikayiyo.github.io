<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用React Profiler</title>
      <link href="/2023/05/11/%E4%BD%BF%E7%94%A8React%20Profiler/"/>
      <url>/2023/05/11/%E4%BD%BF%E7%94%A8React%20Profiler/</url>
      
        <content type="html"><![CDATA[<h3 id="开始之前设置配置"><a href="#开始之前设置配置" class="headerlink" title="开始之前设置配置"></a>开始之前设置配置</h3><p>渲染时高亮显示更新的内容</p><figure>  <img src="/2023/05/11/%E4%BD%BF%E7%94%A8React%20Profiler/config01.png" class="" title="渲染时高亮显示更新的内容">  <figcaption>配置1 - 渲染时高亮显示更新的内容</figcaption></figure><span id="more"></span>记录组件渲染的原因<figure>  <img src="/2023/05/11/%E4%BD%BF%E7%94%A8React%20Profiler/config02.png" class="" title="记录组件渲染的原因">  <figcaption>配置2 - 记录组件渲染的原因</figcaption></figure><h3 id="加载-App"><a href="#加载-App" class="headerlink" title="加载 App"></a>加载 App</h3><figure>  <img src="/2023/05/11/%E4%BD%BF%E7%94%A8React%20Profiler/reload.png" class="" title="加载 App">  <figcaption>重新加载 App</figcaption></figure><h3 id="停止记录"><a href="#停止记录" class="headerlink" title="停止记录"></a>停止记录</h3><figure>  <img src="/2023/05/11/%E4%BD%BF%E7%94%A8React%20Profiler/stop.png" class="" title="停止记录">  <figcaption>停止记录</figcaption></figure><h3 id="分析数据"><a href="#分析数据" class="headerlink" title="分析数据"></a>分析数据</h3><figure>  <img src="/2023/05/11/%E4%BD%BF%E7%94%A8React%20Profiler/record01.png" class="">  <figcaption>组件第一次渲染</figcaption></figure><figure>  <img src="/2023/05/11/%E4%BD%BF%E7%94%A8React%20Profiler/record02.png" class="">  <figcaption>组件更新原因</figcaption></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域问题和CORS</title>
      <link href="/2023/02/26/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E5%92%8CCORS/"/>
      <url>/2023/02/26/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E5%92%8CCORS/</url>
      
        <content type="html"><![CDATA[<img src="/2023/02/26/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E5%92%8CCORS/send-a-url.png" class="" title="当你在浏览器中输入一个url..."><p>请求得到的页面中，可能嵌入了很多 CSS 文件，JavaScript 文件，图片或者 iframe 。这些文件有的来自页面所在的服务器，有的来自其它服务器，它们之间可能会有一些互动。如果不对这些互动做些限制，假设其中一个文件被恶意攻击，那么这个文件就有可能暴露用户浏览器中的一切。因此，浏览器有自己严格的安全策略。</p><span id="more"></span><h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><p><mark>浏览器</mark>的安全机制</p><p><mark>同源</mark>指的是：协议（protocol）、主机名（host name）、端口（port）要一致</p><p>同源策略限制了一个源上的文档或者脚本同另一个源上资源的交互</p><p>对于 <code>http://store.company.com/dir/page.html</code>，下面的表格列出了各种同源或跨源的情况</p><blockquote><p>跨源和跨域说的是同一个东西</p></blockquote><table><thead><tr><th>URL</th><th>是否同源</th><th>原因</th></tr></thead><tbody><tr><td><code>http://store.company.com/dir2/other.html</code></td><td>是</td><td>只有路径不同</td></tr><tr><td><code>http://store.company.com/dir/inner/another.html</code></td><td>是</td><td>只有路径不同</td></tr><tr><td><code>https://store.company.com/page.html</code></td><td>不是</td><td>协议不同</td></tr><tr><td><code>http://store.company.com:81/dir/page.html</code></td><td>不是</td><td>端口不同</td></tr><tr><td><code>http://news.company.com/dir/other.html</code></td><td>不是</td><td>主机名不同</td></tr></tbody></table><p>对于跨源资源，一般情况下<strong>可以嵌入</strong>，<strong>不可以读取</strong></p><table><thead><tr><th>文件类型</th><th>说明</th></tr></thead><tbody><tr><td>script</td><td>跨源脚本可以嵌入；某些请求会被阻止（比如跨源的 fetch 请求</td></tr><tr><td>CSS</td><td>跨源 CSS 可以使用 <code>&lt;link&gt;</code> 元素或 CSS 文件中的 <code>@import</code> 来嵌入，可能需要正确的 <code>Content-Type</code> 标头</td></tr><tr><td>images</td><td>嵌入跨源图像是允许的。但是，读取跨源图像数据（如使用 JavaScript 检索跨源图像的二进制数据）是被禁止的</td></tr><tr><td>forms</td><td>跨源 URL 可以作为表单元素 <code>action</code> 属性的值，网络应用程序可以将表单数据写入一个跨源地址</td></tr><tr><td>multimedia</td><td>跨源的音视频可以通过 <code>&lt;video&gt;</code>, <code>&lt;audio&gt;</code> 标签嵌入</td></tr><tr><td>iframes</td><td>跨源嵌入通常是允许的，但不允许跨源读取（如使用 JavaScript 访问 iframe 中的文档）</td></tr></tbody></table><p>如果某些资源不想被同源策略限制，希望可以被所有人访问呢？</p><p>CORS (Cross-Origin Resource Sharing) 解决了问题。</p><h2 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h2><p><mark>跨源资源共享</mark>是基于 <mark> HTTP 标头（headers)</mark> 的机制</p><p><mark>服务器端</mark>设置<mark>访问控制</mark>相关的 HTTP 标头信息，浏览器利用这些信息决定是否阻止前端 JavaScript 代码的跨域请求</p><p>借助该机制，服务器可以指定哪些源的请求可以访问自己的资源</p><h3 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h3><p>直接请求服务器，不需要发送预检请求（preflighted requests）</p><ul><li>使用下面的请求方法之一：<code>GET</code>，<code>POST</code>，<code>HEAD</code></li><li>允许人为设置的请求头：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept"><code>Accept</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept-Language"><code>Accept-Language</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Language"><code>Content-Language</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type"><code>Content-Type</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Range"><code>Range</code></a>（只允许<a href="https://fetch.spec.whatwg.org/#simple-range-header-value">简单的范围标头值</a>&nbsp; 如 &nbsp;<code>bytes=256-</code>&nbsp; 或 &nbsp;<code>bytes=127-255</code>）<ul><li><code>Content-Type</code> 仅支持 <code>text/plain</code> 、<code>multipart/form-data</code> 、<code>application/x-www-form-urlencoded</code></li></ul></li><li>请求中的任意 <code>XMLHttpRequestUpload</code> 对象均没有注册事件监听器<ul><li>对于任意请求实例 xhr 没有调用 <code>xhr.upload.addEventListener()</code></li></ul></li><li>请求中没有使用 <code>ReadableStream</code> 对象</li></ul><p><a href="http://arunranga.com/examples/access-control/simpleXSInvocation.html">样例</a></p><h3 id="预检请求"><a href="#预检请求" class="headerlink" title="预检请求"></a>预检请求</h3><ul><li>对于可能对服务器数据产生副作用的请求，必须首先通过 <code>OPTIONS</code> 方法发送一个预检请求，服务器根据预检请求决定是否允许真实请求</li><li>预检请求中的特殊头字段（不需要手动设置<ul><li><code>Access-Control-Request-Method</code> 告知服务器真实请求的请求方法</li><li><code>Access-Control-Request-Headers</code> 告知服务器真实请求携带的头字段</li></ul></li><li>预检请求的响应中的特殊头字段<ul><li><code>Access-Control-Allow-Methods</code> 表示服务器允许的请求方法列表</li><li><code>Access-Control-Allow-Headers</code> 表示服务器允许的请求头字段</li></ul></li></ul><p><a href="http://arunranga.com/examples/access-control/preflightInvocation.html">样例</a></p><h2 id="A-Demo"><a href="#A-Demo" class="headerlink" title="A Demo"></a>A Demo</h2><p><a href="https://github.com/yikayiyo/cors">CORS DEMO</a></p><ul><li>前端应用默认运行在 <code>localhost:5173</code>，后端应用默认运行在 <code>localhost:3010</code></li><li>后端设置 CORS 用到了中间件 <code>express-cors</code>，<a href="https://expressjs.com/en/resources/middleware/cors.html">文档</a></li><li>本地开发时除了设置 CORS，还可以为开发服务器设置代理中转 HTTP 请求，<a href="https://vitejs.dev/config/server-options.html#server-proxy">文档</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS">MDN - CORS</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy">MDN - Same-origin policy</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/contentDocument">MDN - JS 操作 iframe 内部元素</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/CORS_enabled_image">MDN - 允许图片和 canvas 跨源使用</a></li><li><a href="https://web.dev/same-origin-policy/">WebDev - Same-origin policy</a></li><li><a href="https://web.dev/codelab-same-origin-fetch/">WebDev - Same Origin Policy &amp; Fetch requests</a></li><li><a href="https://web.dev/codelab-same-origin-iframe/">WebDev - Same Origin Policy &amp; iframe</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一点思索</title>
      <link href="/2023/01/17/%E4%B8%80%E7%82%B9%E6%80%9D%E7%B4%A2/"/>
      <url>/2023/01/17/%E4%B8%80%E7%82%B9%E6%80%9D%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<p>前几天的一个晚上，心里突然感觉很不舒服，也不知道啥原因，就拉朋友视频了一小会儿。</p><p>半夜突然醒来，想起了原因。</p><p>原来是因为广州撞人的视频。</p><p>很难受。</p><p>本来在去购物路上的人，本来在去看望朋友路上的人，本来在去见恋人路上的人。本来就是如常过马路的人，人生就这样结束了，留给亲人朋友的痛苦却仍要持续很长时间。忍不住要问，为什么呢？生命可以再不公平些么？</p><p>没什么新闻报导，身边也没人提起。</p><p>今天以及今天之前，每天都能见到的这些人，可能从明天开始就再也见不到了。</p><p>在分开之前，我并没有珍惜我们相处的时间。</p><p>没有寒暄问候，没有认真注视，没有仔细聆听，没有分享心情，没有约过饭，没有一起逛街，没有吃遍小吃摊，没有紧紧地拥抱彼此。</p><p>为什么不主动地去聊聊天呢？为什么不好好看对方的脸呢？为什么不去制造羁绊呢？</p><p>难不成我是为了那一天不那么难受，故意和每一个人保持距离，既然那一天迟早都会到来。</p><p>如果我也是那天的路人之一呢？</p><p>我不希望难过的人可能难以接受事实，我希望为我伤心的人心里会有波澜吗？</p><p>我有这一丝的希望，竟然。</p><p>人死了或许会转生成一只狗，来到喜欢的人身边。不能说话，于是就使劲地往人身上扑，一边开心地摇着尾巴，一边忍不住地哼唧。用头顶你的手，意思是快来抚摸。你看它一眼，它就过来盯着你，好像要弥补前世没有看够的遗憾。你夸它一句，它就笑了，仿佛在告诉你，它听懂了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue项目引入Eslint+Prettier</title>
      <link href="/2023/01/10/Vue%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5Eslint-Prettier/"/>
      <url>/2023/01/10/Vue%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5Eslint-Prettier/</url>
      
        <content type="html"><![CDATA[<p>管理后台的代码仓库目前没有开启语法检查，存在一些错误。并且项目由多人开发，不同风格的代码（缩进到底是用 2 个空格还是用 4 个空格还是用 Tab 呢？）掺杂在一起，给项目维护增加了没必要的难度</p><p>本文记录了对项目代码进行语法错误修正的过程，以及制定团队开发规范时推荐使用的插件和配置</p><h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D eslint eslint-plugin-vue prettier eslint-config-prettier</span><br></pre></td></tr></tbody></table></figure><h3 id="创建、编辑配置文件"><a href="#创建、编辑配置文件" class="headerlink" title="创建、编辑配置文件"></a>创建、编辑配置文件</h3><p>删除项目中旧的 <code>.eslintrc.js</code> 文件，修改 <code>.eslintignore</code> 文件</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">build/*.js // [!code --]</span><br><span class="line">config/*.js // [!code --]</span><br><span class="line">src/assets</span><br><span class="line">src // [!code --]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch .eslintrc.js .prettierrc.js</span><br></pre></td></tr></tbody></table></figure><p>下面为样例配置</p><span id="more"></span><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .eslintrc.js example</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = {</span><br><span class="line">  <span class="attr">root</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">parserOptions</span>: {</span><br><span class="line">    <span class="attr">parser</span>: <span class="string">'babel-eslint'</span>,</span><br><span class="line">    <span class="attr">sourceType</span>: <span class="string">'module'</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">env</span>: {</span><br><span class="line">    <span class="attr">browser</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">es6</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">jquery</span>: <span class="literal">true</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">'plugin:vue/recommended'</span>, <span class="string">'prettier'</span>]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// prettier example</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = {</span><br><span class="line">  <span class="attr">tabWidth</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">semi</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">singleQuote</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">singleAttributePerLine</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">trailingComma</span>: <span class="string">'es5'</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="创建命令"><a href="#创建命令" class="headerlink" title="创建命令"></a>创建命令</h3><p>修改 <code>package.json</code></p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"scripts"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">"lint"</span><span class="punctuation">:</span> <span class="string">"eslint --ext .js,.vue src"</span><span class="punctuation">,</span>  <span class="comment">// [!code warning]</span></span><br><span class="line">    <span class="attr">"lint:fix"</span><span class="punctuation">:</span> <span class="string">"eslint --fix --ext .js,.vue src"</span><span class="punctuation">,</span> <span class="comment">// [!code warning]</span></span><br><span class="line">    <span class="attr">"format"</span><span class="punctuation">:</span> <span class="string">"prettier --write src"</span> <span class="comment">// [!code warning]</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><p>其中 <code>lint</code> 用来检查语法错误，<code>lint:fix</code> 用来自动修复可以修复的错误，<code>format</code> 用来格式化代码</p><h3 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run lint</span><br></pre></td></tr></tbody></table></figure><p>得到下面的结果</p><figure>  <img src="/2023/01/10/Vue%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5Eslint-Prettier/nr-lint.png" class="" title="执行 lint 命令">  <figcaption>😱</figcaption></figure><p>自动修复部分错误</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run lint:fix</span><br></pre></td></tr></tbody></table></figure><figure>  <img src="/2023/01/10/Vue%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5Eslint-Prettier/nr-lint-fix.png" class="" title="执行 lint:fix 命令">  <figcaption>🥲</figcaption></figure><p>需要手动修复的一些错误</p><figure style="border:1px solid #292d3e; margin-bottom: 10px;">  <img src="/2023/01/10/Vue%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5Eslint-Prettier/lint-error-1.png" class="">  <figcaption style="text-align: center;"><em>p标签绑定v-model</em></figcaption></figure><figure style="border:1px solid #292d3e; margin-bottom: 10px;">  <img src="/2023/01/10/Vue%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5Eslint-Prettier/lint-error-2.png" class="">  <figcaption style="text-align: center;"><em>同时使用 v-for 和 v-if</em></figcaption></figure><figure style="border:1px solid #292d3e; margin-bottom: 10px;">  <img src="/2023/01/10/Vue%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5Eslint-Prettier/lint-error-3.png" class="">  <figcaption style="text-align: center;"><em>合并代码时遗留的多余标签？</em></figcaption></figure><figure style="border:1px solid #292d3e; margin-bottom: 10px;">  <img src="/2023/01/10/Vue%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5Eslint-Prettier/lint-error-7.png" class="">  <figcaption style="text-align: center;"><em>又一个多余的标签</em></figcaption></figure><figure style="border:1px solid #292d3e; margin-bottom: 10px;">  <img src="/2023/01/10/Vue%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5Eslint-Prettier/lint-error-4.png" class="">  <figcaption style="text-align: center;"><em>冗余属性</em></figcaption></figure><figure style="border:1px solid #292d3e; margin-bottom: 10px;">  <img src="/2023/01/10/Vue%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5Eslint-Prettier/lint-error-5.png" class="">  <figcaption style="text-align: center;"><em>定义但没使用的字段</em></figcaption></figure><figure style="border:1px solid #292d3e; margin-bottom: 10px;">  <img src="/2023/01/10/Vue%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5Eslint-Prettier/lint-error-6.png" class="">  <figcaption style="text-align: center;"><em>重复字段</em></figcaption></figure><figure style="border:1px solid #292d3e; margin-bottom: 10px;">  <img src="/2023/01/10/Vue%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5Eslint-Prettier/lint-error-8.png" class="">  <figcaption style="text-align: center;"><em>属性未定义类型</em></figcaption></figure><p>最后格式化代码</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run format</span><br></pre></td></tr></tbody></table></figure><p>上面的方式会处理 <code>src</code> 目录下（除了 <code>src/asset</code> 外的所有代码，只需要进行一次</p><p>对于新开发的代码，可以利用插件进行语法检查和格式化，然后再合并进仓库</p><h2 id="VSCODE-插件"><a href="#VSCODE-插件" class="headerlink" title="VSCODE 插件"></a>VSCODE 插件</h2><p>借助 <a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">dbaeumer.vscode-eslint</a> 和 <a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">esbenp.prettier-vscode</a> 在开发时就能完成代码的语法检查和格式化</p><ul><li>将 <a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">prettier</a> 设置为默认代码格式化工具</li><li>取消 <a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">eslint</a> 的代码格式化功能</li><li>prettier 插件设置<ul><li>配置文件路径设置为 <code>./.prettierrc.js</code></li></ul></li></ul><p>插件配置</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"editor.codeActionsOnSave"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"source.fixAll.eslint"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"editor.formatOnSave"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"eslint.validate"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">"javascript"</span><span class="punctuation">,</span> <span class="string">"javascriptreact"</span><span class="punctuation">,</span> <span class="string">"vue"</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><p>保存代码时自动进行语法检查、修复和格式化</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无障碍开发笔记</title>
      <link href="/2022/12/06/%E6%97%A0%E9%9A%9C%E7%A2%8D%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/12/06/%E6%97%A0%E9%9A%9C%E7%A2%8D%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="使用正确的-HTML-元素"><a href="#使用正确的-HTML-元素" class="headerlink" title="使用正确的 HTML 元素"></a>使用正确的 HTML 元素</h2><p>在开发过程中用正确的 HTML 标签表达意图，可以提升网页的无障碍。</p><p>例如，一个用来控制视频播放的按钮可以写成下面的形式</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Play video<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>也可以写成下面<strong>更合理</strong>的形式</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>Play video<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>之所以合理，是因为 <code>&lt;button&gt;</code> 标签不仅提供了按钮的样式，还提供了键盘的无障碍访问。例如，使用 Tab 更换按钮，使用 Enter 点击按钮。</p><blockquote><p><code>&lt;button&gt;</code> 默认提供的样式大多数情况下需要重新编写</p></blockquote><span id="more"></span><h3 id="文本内容"><a href="#文本内容" class="headerlink" title="文本内容"></a>文本内容</h3><p>文本内容放在良好的结构中，避免使用表现性 HTML 和换行符。</p><p>✅Good</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>My heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is the first section of my document.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>I'll add another paragraph here too.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Here is<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>a list for<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>you to read<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>My subheading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  This is the first subsection of my document. I'd love people to be able to</span><br><span class="line">  find this content!</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>My 2nd subheading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  This is the second subsection of my content. I think is more interesting than</span><br><span class="line">  the last one.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>❌Bad</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">"7"</span>&gt;</span>My heading<span class="tag">&lt;/<span class="name">font</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">This is the first section of my document.</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">I'll add another paragraph here too.</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">1. Here is</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">2. a list for</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">3. you to read</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">"5"</span>&gt;</span>My subheading<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">This is the first subsection of my document. I'd love people to be able to find</span><br><span class="line">this content!</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">"5"</span>&gt;</span>My 2nd subheading<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">This is the second subsection of my content. I think is more interesting than</span><br><span class="line">the last one.</span><br></pre></td></tr></tbody></table></figure><h3 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h3><p>使用合适的标签包裹页面主要元素，可以给屏幕阅读器额外的信息。</p><p>✅Good</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- main navigation in here --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Here is our page's main content --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- It contains an article --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Article heading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- article content in here --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aside</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Related<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- aside content in here --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- And here is our main footer that is used across all the pages of our website --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- footer content in here --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="UI-控制"><a href="#UI-控制" class="headerlink" title="UI 控制"></a>UI 控制</h3><p>有意义的文本。</p><p>确保按钮和链接的文本是可以理解和独特的。</p><p>✅Good</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  Whales are really awesome creatures.</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"whales.html"</span>&gt;</span>Find out more about whales<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>❌Bad</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  Whales are really awesome creatures. To find more out about whales,</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"whales.html"</span>&gt;</span>click here<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>表单</p><p>✅Good</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"name"</span>&gt;</span>Fill in your name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>❌Bad</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Fill in your name:</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="文本替代"><a href="#文本替代" class="headerlink" title="文本替代"></a>文本替代</h3><p>对于多媒体内容，例如图片、音视频元素，可以提供描述文本。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"dinosaur.png"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">"dinosaur.png"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">alt</span>=<span class="string">"A red Tyrannosaurus Rex: A two legged dinosaur standing upright like a human, with small arms, and a large head with lots of sharp teeth."</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">"dinosaur.png"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">alt</span>=<span class="string">"A red Tyrannosaurus Rex: A two legged dinosaur standing upright like a human, with small arms, and a large head with lots of sharp teeth."</span></span></span><br><span class="line"><span class="tag">  <span class="attr">title</span>=<span class="string">"The Mozilla red dinosaur"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">"dinosaur.png"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">aria-labelledby</span>=<span class="string">"dino-label"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"dino-label"</span>&gt;</span></span><br><span class="line">  The Mozilla red Tyrannosaurus Rex: A two legged dinosaur standing upright like</span><br><span class="line">  a human, with small arms, and a large head with lots of sharp teeth.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>第一张图片没有提供文字描述</li><li>第二张图片的 <code>alt</code> 属性会被屏幕阅读器读到</li><li>第三张图片提供了额外的 <code>title</code> 属性</li><li>第四张图片没有提供 <code>alt</code> 属性，但是通过 <code>aria-labelledby</code> 属性将页面中已经存在的文本作为图片描述</li></ul><blockquote><p>使用 CSS 来显示只起装饰作用的图像</p></blockquote><h2 id="CSS-和-JavaScript-无障碍最佳实践"><a href="#CSS-和-JavaScript-无障碍最佳实践" class="headerlink" title="CSS 和 JavaScript 无障碍最佳实践"></a>CSS 和 JavaScript 无障碍最佳实践</h2><h2 id="ARIA-标签"><a href="#ARIA-标签" class="headerlink" title="ARIA 标签"></a>ARIA 标签</h2><h2 id="移动端无障碍"><a href="#移动端无障碍" class="headerlink" title="移动端无障碍"></a>移动端无障碍</h2><h2 id="多媒体无障碍"><a href="#多媒体无障碍" class="headerlink" title="多媒体无障碍"></a>多媒体无障碍</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Accessibility">MDN 文档</a></li><li><a href="https://m3.material.io/foundations/accessible-design/overview">Accessible design</a></li><li><a href="https://www.bbc.co.uk/accessibility/forproducts/">BBC Accessibility for Products</a></li><li><a href="https://accessibility.huit.harvard.edu/">Digital Accessibility</a></li><li><a href="https://cn.vuejs.org/guide/best-practices/accessibility.html#standards">Vue.js 无障碍访问</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重写duozhuavue书架</title>
      <link href="/2022/03/26/%E9%87%8D%E5%86%99duozhuavue%E4%B9%A6%E6%9E%B6/"/>
      <url>/2022/03/26/%E9%87%8D%E5%86%99duozhuavue%E4%B9%A6%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<a href="/2022/03/14/Apollo%20Client%20%E7%BC%93%E5%AD%98%E5%A4%84%E7%90%86%E5%B0%8F%E7%BB%93/" title="Apollo Client 缓存处理小结">Apollo Client 缓存处理小结</a> 中提到了书架功能存在的问题：<p>每一本书籍对应一个查询（即一个 HTTP 请求），当从未登录状态切换到登录状态时，主页所有已经加载的书籍都会发送请求，判断它是否在当前用户的书架上。</p><p>理想的实现中，在用户登录后，应该只发送一个请求，用于获取书单信息流。</p><h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><ol><li>将查询 <code>isBookInBookshelf</code> 移动到 <code>Book</code> 类型下</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bookType = <span class="string">`</span></span><br><span class="line"><span class="string">  type Book {</span></span><br><span class="line"><span class="string">    ...</span></span><br><span class="line"><span class="string">    isBookInBookshelf(userId: ID!): Boolean!</span></span><br><span class="line"><span class="string">  }</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>实现该字段的 <code>resolver</code> 函数</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bookResolver = {</span><br><span class="line">  ...</span><br><span class="line">  <span class="title class_">Book</span>: {</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">isBookInBookshelf</span>: <span class="title function_">async</span>({ id }, { userId } , { models }) =&gt; {</span><br><span class="line">      <span class="keyword">if</span>(userId === <span class="string">""</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">const</span> user = <span class="keyword">await</span> models.<span class="property">User</span>.<span class="title function_">findById</span>(userId);</span><br><span class="line">      <span class="keyword">return</span> user.<span class="property">bookShelf</span>.<span class="title function_">indexOf</span>(id) !== -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><ol start="3"><li>修改 <code>GET_CATEGORY_FEED schema</code>，接收 <code>userId</code> 参数，返回的书籍中包含 <code>isBookInBookshelf</code> 字段</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">GET_CATEGORY_FEED</span> = gql`<span class="language-graphql"></span></span><br><span class="line"><span class="language-graphql">  <span class="keyword">query</span> getCategoryFeed<span class="punctuation">(</span></span></span><br><span class="line"><span class="language-graphql">    <span class="punctuation">...</span></span></span><br><span class="line"><span class="language-graphql">    <span class="variable">$userId</span>: ID<span class="punctuation">!</span></span></span><br><span class="line"><span class="language-graphql">  <span class="punctuation">)</span> <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">    categoryFeed<span class="punctuation">(</span><span class="symbol">first</span><span class="punctuation">:</span> <span class="variable">$first</span>, <span class="symbol">after</span><span class="punctuation">:</span> <span class="variable">$after</span>) <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">      pageInfo <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">        hasNextPage</span></span><br><span class="line"><span class="language-graphql">        endCursor</span></span><br><span class="line"><span class="language-graphql">      <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">      edges <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">        node <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">          id</span></span><br><span class="line"><span class="language-graphql">          name</span></span><br><span class="line"><span class="language-graphql">          items<span class="punctuation">(</span><span class="symbol">first</span><span class="punctuation">:</span> <span class="variable">$itemsFirst</span>, <span class="symbol">after</span><span class="punctuation">:</span> <span class="variable">$itemsAfter</span>) <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">            pageInfo <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">              endCursor</span></span><br><span class="line"><span class="language-graphql">              hasNextPage</span></span><br><span class="line"><span class="language-graphql">            <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">            edges <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">              node <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">                id</span></span><br><span class="line"><span class="language-graphql">                <span class="punctuation">...</span></span></span><br><span class="line"><span class="language-graphql">                isBookInBookshelf<span class="punctuation">(</span><span class="symbol">userId</span><span class="punctuation">:</span> <span class="variable">$userId</span>)</span></span><br><span class="line"><span class="language-graphql">              <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">            <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">          <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">        <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">      <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">    <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">  <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">`</span>;</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>在组件中修改查询，传入参数 <code>userId</code></li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userId = <span class="title function_">useLoggedInUserId</span>();</span><br><span class="line"><span class="keyword">const</span> {</span><br><span class="line">  <span class="attr">result</span>: categoryFeedResult,</span><br><span class="line">  <span class="attr">loading</span>: categoryFeedLoading,</span><br><span class="line">  <span class="attr">error</span>: categoryFeedError,</span><br><span class="line">  fetchMore,</span><br><span class="line">  networkStatus,</span><br><span class="line">} = <span class="title function_">useQuery</span>(</span><br><span class="line">  <span class="variable constant_">GET_CATEGORY_FEED</span>,</span><br><span class="line">  <span class="function">() =&gt;</span> ({</span><br><span class="line">    <span class="attr">after</span>: after.<span class="property">value</span>,</span><br><span class="line">    <span class="attr">first</span>: first.<span class="property">value</span>,</span><br><span class="line">    <span class="attr">itemsAfter</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">itemsFirst</span>: <span class="number">3</span>,</span><br><span class="line">    userId</span><br><span class="line">  }),</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">notifyOnNetworkStatusChange</span>: <span class="literal">true</span>,</span><br><span class="line">  }</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><ol start="5"><li>修改缓存的处理方式</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cache = <span class="keyword">new</span> <span class="title class_">InMemoryCache</span>({</span><br><span class="line">  <span class="attr">typePolicies</span>: {</span><br><span class="line">    ...</span><br><span class="line">    <span class="title class_">Book</span>: {</span><br><span class="line">      <span class="attr">fields</span>: {</span><br><span class="line">        <span class="attr">isBookInBookshelf</span>: {</span><br><span class="line">          <span class="attr">keyArgs</span>: [<span class="string">"userId"</span>]</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><center style="display: flex; justify-content: space-between;"><div><img src="/2022/03/26/%E9%87%8D%E5%86%99duozhuavue%E4%B9%A6%E6%9E%B6/after.png" class="" width="300" title="修改后的请求数量"></div><div><img src="/2022/03/26/%E9%87%8D%E5%86%99duozhuavue%E4%B9%A6%E6%9E%B6/cache-after.png" class="" width="300" title="修改后的缓存"></div></center><ol start="6"><li>修改添加书籍或删除书籍时的逻辑<br> <strong>乐观更新</strong>：先修改客户端状态，再发送网络请求。如果请求失败，重置客户端状态。</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">addToBookShelf</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">  <span class="comment">// 乐观更新，先修改客户端状态</span></span><br><span class="line">  isInBookshelf.<span class="property">value</span> = !isInBookshelf.<span class="property">value</span>;</span><br><span class="line">  <span class="comment">// 再发送请求（send mutation</span></span><br><span class="line">  <span class="title function_">toggleBookshelf</span>();</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> { <span class="attr">mutate</span>: toggleBookshelf, <span class="attr">onDone</span>: onToggle } = <span class="title function_">useMutation</span>(</span><br><span class="line">  <span class="variable constant_">TOGGLE_BOOKSHELF_MUTATION</span>,</span><br><span class="line">  <span class="function">() =&gt;</span> ({</span><br><span class="line">    <span class="attr">variables</span>: {</span><br><span class="line">      <span class="attr">bookId</span>: bookId.<span class="property">value</span>,</span><br><span class="line">      userId,</span><br><span class="line">    },</span><br><span class="line">  })</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="title function_">onToggle</span>(<span class="function">(<span class="params">{ data: { toggleBookshelf } }</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">if</span> (toggleBookshelf.<span class="property">success</span> === <span class="literal">true</span>) {</span><br><span class="line">    toast.<span class="title function_">success</span>(toggleBookshelf.<span class="property">message</span>);</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="comment">// 请求失败，重置客户端状态</span></span><br><span class="line">    isInBookshelf.<span class="property">value</span> = !isInBookshelf.<span class="property">value</span>;</span><br><span class="line">    toast.<span class="title function_">info</span>(toggleBookshelf.<span class="property">message</span>);</span><br><span class="line">  }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> graphql </tag>
            
            <tag> duozhuavue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apollo Client 缓存处理小结</title>
      <link href="/2022/03/14/Apollo%20Client%20%E7%BC%93%E5%AD%98%E5%A4%84%E7%90%86%E5%B0%8F%E7%BB%93/"/>
      <url>/2022/03/14/Apollo%20Client%20%E7%BC%93%E5%AD%98%E5%A4%84%E7%90%86%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>记录开发 <a href="https://duozhuavue.vercel.app/book">duozhuavue💚</a> 时对 <a href="https://www.apollographql.com/docs/react/caching/overview/">Apollo Client</a> 缓存的处理方法。</p><h2 id="为什么要处理缓存？"><a href="#为什么要处理缓存？" class="headerlink" title="为什么要处理缓存？"></a>为什么要处理缓存？</h2><p>修改数据后，如果不对缓存中的数据进行修改，那么会造成服务器端和客户端的<strong>数据不一致</strong>，修改也不能在前端得到体现。</p><p>在 <a href="https://duozhuavue.vercel.app/book">duozhuavue💚</a> 中，需要处理缓存的地方有书籍评论，用户书架，主页信息流分页。</p><h2 id="缓存处理方法"><a href="#缓存处理方法" class="headerlink" title="缓存处理方法"></a>缓存处理方法</h2><p> <a href="https://www.apollographql.com/docs/react/caching/overview/">Apollo Client</a> 提供了几种方式与缓存数据交互</p><ul><li><a href="https://www.apollographql.com/docs/react/caching/cache-interaction#using-graphql-queries">使用 GraphQL queries</a></li><li><a href="https://www.apollographql.com/docs/react/caching/cache-interaction#using-graphql-fragments">使用 GraphQL fragments</a></li><li><a href="https://www.apollographql.com/docs/react/caching/cache-interaction#using-cachemodify">直接修改缓存对象的字段</a></li><li><a href="https://www.apollographql.com/docs/react/caching/cache-field-behavior">配置缓存字段策略</a></li></ul><p>结合开发过程中的具体情况，处理缓存数据时可以采取不同的方式。</p><h2 id="书籍评论"><a href="#书籍评论" class="headerlink" title="书籍评论"></a>书籍评论</h2><h3 id="后端定义"><a href="#后端定义" class="headerlink" title="后端定义"></a>后端定义</h3><p>后端代码中 <code>Book</code> 的 <code>schema</code> 定义如下：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">Book</span> {</span><br><span class="line">  <span class="attr">id</span>: <span class="variable constant_">ID</span>!</span><br><span class="line">  <span class="attr">title</span>: <span class="title class_">String</span>!</span><br><span class="line">    ...</span><br><span class="line">  <span class="attr">comments</span>: [<span class="title class_">Comment</span>!]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>有用的信息是，<code>Book</code> 的 <code>comments</code> 字段返回该书的评论列表。</p><span id="more"></span><p>和评论相关的几个 <code>mutation</code> 定义如下：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">Mutation</span>{</span><br><span class="line">    ...</span><br><span class="line">    <span class="title function_">addComment</span>(<span class="attr">bookId</span>: <span class="variable constant_">ID</span>!, <span class="attr">userId</span>: <span class="variable constant_">ID</span>!, <span class="attr">content</span>: <span class="title class_">String</span>!, <span class="attr">rating</span>: <span class="title class_">Int</span>, <span class="attr">created</span>: <span class="title class_">DateTime</span>!): addCommentResponse!</span><br><span class="line">    <span class="title function_">deleteComment</span>(<span class="attr">bookId</span>: <span class="variable constant_">ID</span>!, <span class="attr">commentId</span>: <span class="variable constant_">ID</span>!): deleteCommentResponse!</span><br><span class="line">    <span class="title function_">updateComment</span>(<span class="attr">commentId</span>: <span class="variable constant_">ID</span>!, <span class="attr">rating</span>: <span class="title class_">Int</span>!, <span class="attr">content</span>: <span class="title class_">String</span>, <span class="attr">updatedAt</span>: <span class="title class_">DateTime</span>!): updateCommentResponse!</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">type addCommentResponse implements <span class="title class_">MutationResponse</span> {</span><br><span class="line">    <span class="attr">code</span>: <span class="title class_">String</span>!</span><br><span class="line">    <span class="attr">success</span>: <span class="title class_">Boolean</span>!</span><br><span class="line">    <span class="attr">message</span>: <span class="title class_">String</span>!</span><br><span class="line">    <span class="attr">book</span>: <span class="title class_">Book</span></span><br><span class="line">    <span class="attr">comment</span>: <span class="title class_">Comment</span></span><br><span class="line">}</span><br><span class="line">type deleteCommentResponse implements <span class="title class_">MutationResponse</span> {</span><br><span class="line">    <span class="attr">code</span>: <span class="title class_">String</span>!</span><br><span class="line">    <span class="attr">success</span>: <span class="title class_">Boolean</span>!</span><br><span class="line">    <span class="attr">message</span>: <span class="title class_">String</span>!</span><br><span class="line">    <span class="attr">book</span>: <span class="title class_">Book</span></span><br><span class="line">}</span><br><span class="line">type updateCommentResponse implements <span class="title class_">MutationResponse</span> {</span><br><span class="line">    <span class="attr">code</span>: <span class="title class_">String</span>!</span><br><span class="line">    <span class="attr">success</span>: <span class="title class_">Boolean</span>!</span><br><span class="line">    <span class="attr">message</span>: <span class="title class_">String</span>!</span><br><span class="line">    <span class="attr">comment</span>: <span class="title class_">Comment</span></span><br><span class="line">}</span><br><span class="line"> </span><br></pre></td></tr></tbody></table></figure><p>从代码可以知道：</p><ul><li><code>addComment</code> 的返回值中包含新生成的 <code>Comment</code> 对象和更新后的 <code>Book</code> 对象</li><li><code>deleteComment</code> 的返回值中包含更新后的 <code>Book</code> 对象</li><li><code>updateComment</code> 的返回值中包含更新后的 <code>Comment</code> 对象</li></ul><h3 id="发送-Mutation"><a href="#发送-Mutation" class="headerlink" title="发送 Mutation"></a>发送 Mutation</h3><p>客户端利用 <code>vue-apollo</code> 发送 <code>Mutation</code> 请求。</p><p>对缓存的操作主要包括两个部分：</p><ul><li><code>Comment</code> 对象</li><li><code>Book</code> 对象的 <code>comments</code> 字段</li></ul><h4 id="添加评论"><a href="#添加评论" class="headerlink" title="添加评论"></a>添加评论</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">ADD_COMMENT_MUTATION</span> = gql`<span class="language-graphql"></span></span><br><span class="line"><span class="language-graphql">  <span class="keyword">mutation</span> addComment<span class="punctuation">(</span></span></span><br><span class="line"><span class="language-graphql">    <span class="variable">$bookId</span>: ID<span class="punctuation">!</span></span></span><br><span class="line"><span class="language-graphql">    <span class="variable">$userId</span>: ID<span class="punctuation">!</span></span></span><br><span class="line"><span class="language-graphql">    <span class="variable">$content</span>: String<span class="punctuation">!</span></span></span><br><span class="line"><span class="language-graphql">    <span class="variable">$created</span>: DateTime<span class="punctuation">!</span></span></span><br><span class="line"><span class="language-graphql">    <span class="variable">$rating</span>: Int</span></span><br><span class="line"><span class="language-graphql">  <span class="punctuation">)</span> <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">    addComment<span class="punctuation">(</span></span></span><br><span class="line"><span class="language-graphql">      <span class="symbol">bookId</span><span class="punctuation">:</span> <span class="variable">$bookId</span></span></span><br><span class="line"><span class="language-graphql">      <span class="symbol">userId</span><span class="punctuation">:</span> <span class="variable">$userId</span></span></span><br><span class="line"><span class="language-graphql">      <span class="symbol">content</span><span class="punctuation">:</span> <span class="variable">$content</span></span></span><br><span class="line"><span class="language-graphql">      <span class="symbol">created</span><span class="punctuation">:</span> <span class="variable">$created</span></span></span><br><span class="line"><span class="language-graphql">      <span class="symbol">rating</span><span class="punctuation">:</span> <span class="variable">$rating</span></span></span><br><span class="line"><span class="language-graphql">    <span class="punctuation">)</span> <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">      code</span></span><br><span class="line"><span class="language-graphql">      success</span></span><br><span class="line"><span class="language-graphql">      message</span></span><br><span class="line"><span class="language-graphql">      comment <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">        id</span></span><br><span class="line"><span class="language-graphql">        content</span></span><br><span class="line"><span class="language-graphql">        commenter <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">          name</span></span><br><span class="line"><span class="language-graphql">        <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">      <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">      book <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">        id</span></span><br><span class="line"><span class="language-graphql">        comments <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">          content</span></span><br><span class="line"><span class="language-graphql">          createdAt</span></span><br><span class="line"><span class="language-graphql">        <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">      <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">    <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">  <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> {</span><br><span class="line">    <span class="attr">mutate</span>: addComment,</span><br><span class="line">    <span class="attr">loading</span>: addCommentLoading,</span><br><span class="line">    onDone,</span><br><span class="line">} = <span class="title function_">useMutation</span>(<span class="variable constant_">ADD_COMMENT_MUTATION</span>, <span class="function">() =&gt;</span> ({</span><br><span class="line">    <span class="attr">variables</span>: {</span><br><span class="line">        bookId,</span><br><span class="line">        userId,</span><br><span class="line">        <span class="attr">content</span>: content.<span class="property">value</span>,</span><br><span class="line">        <span class="attr">created</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toISOString</span>(),</span><br><span class="line">        <span class="attr">rating</span>: rating.<span class="property">value</span>,</span><br><span class="line">    },</span><br><span class="line">}));</span><br><span class="line"><span class="title function_">onDone</span>(<span class="function">(<span class="params">{ data: { addComment } }</span>) =&gt;</span> {</span><br><span class="line">    router.<span class="title function_">replace</span>(<span class="string">"/books/"</span> + bookId + <span class="string">"?target=book-comment-wrapper"</span>);</span><br><span class="line">    rating.<span class="property">value</span> = <span class="number">0</span>;</span><br><span class="line">    content.<span class="property">value</span> = <span class="string">""</span>;</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>这里没有定义缓存处理方法。原因是：</p><ul><li>新生成的 <code>Comment</code> 对象，会自动保存在缓存中</li><li>对于 <code>Book</code> 来说，由于返回了一个相同 <code>id</code> 的 <code>Book</code> 数据，该数据会自动覆盖缓存中的旧数据（Book 中的各个字段都会被覆盖</li></ul><blockquote><p>默认情况下，在缓存中使用对象的类型名+”:”+<code>id</code> 唯一标识一个缓存对象</p></blockquote><img src="/2022/03/14/Apollo%20Client%20%E7%BC%93%E5%AD%98%E5%A4%84%E7%90%86%E5%B0%8F%E7%BB%93/%E7%BC%93%E5%AD%98%E6%A0%87%E8%AF%86%E7%AC%A6.png" class="" title="默认情况下，缓存标识符有类型名+`:`+`id`构成"><h4 id="删除评论"><a href="#删除评论" class="headerlink" title="删除评论"></a>删除评论</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">DELETE_COMMENT_MUTATION</span> = gql`<span class="language-graphql"></span></span><br><span class="line"><span class="language-graphql">  <span class="keyword">mutation</span> deleteComment<span class="punctuation">(</span><span class="variable">$bookId</span>: ID<span class="punctuation">!</span>, <span class="variable">$commentId</span>: ID<span class="punctuation">!</span><span class="punctuation">)</span> <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">    deleteComment<span class="punctuation">(</span><span class="symbol">bookId</span><span class="punctuation">:</span> <span class="variable">$bookId</span>, <span class="symbol">commentId</span><span class="punctuation">:</span> <span class="variable">$commentId</span>) <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">      code</span></span><br><span class="line"><span class="language-graphql">      success</span></span><br><span class="line"><span class="language-graphql">      message</span></span><br><span class="line"><span class="language-graphql">      book <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">        id</span></span><br><span class="line"><span class="language-graphql">        comments <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">          id</span></span><br><span class="line"><span class="language-graphql">          content</span></span><br><span class="line"><span class="language-graphql">          createdAt</span></span><br><span class="line"><span class="language-graphql">        <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">      <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">    <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">  <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> { <span class="attr">mutate</span>: deleteComment, <span class="attr">onDone</span>: onCommentDelete } = <span class="title function_">useMutation</span>(</span><br><span class="line">    <span class="variable constant_">DELETE_COMMENT_MUTATION</span>,</span><br><span class="line">    <span class="function">() =&gt;</span> ({</span><br><span class="line">        <span class="attr">variables</span>: {</span><br><span class="line">            bookId,</span><br><span class="line">            commentId,</span><br><span class="line">        },</span><br><span class="line">        <span class="attr">update</span>: <span class="function">(<span class="params">cache</span>) =&gt;</span> {</span><br><span class="line">            <span class="comment">// 删除cache中的该条comment</span></span><br><span class="line">            <span class="keyword">const</span> normalizedId = cache.<span class="title function_">identify</span>({</span><br><span class="line">                <span class="attr">id</span>: commentId,</span><br><span class="line">                <span class="attr">__typename</span>: <span class="string">"Comment"</span>,</span><br><span class="line">            });</span><br><span class="line">            cache.<span class="title function_">evict</span>({ <span class="attr">id</span>: normalizedId });</span><br><span class="line">            cache.<span class="title function_">gc</span>();</span><br><span class="line">        },</span><br><span class="line">    })</span><br><span class="line">);</span><br><span class="line"><span class="title function_">onCommentDelete</span>(<span class="function">(<span class="params">{ data: { deleteComment } }</span>) =&gt;</span> {</span><br><span class="line">    toast.<span class="title function_">success</span>(deleteComment.<span class="property">message</span>);</span><br><span class="line">    router.<span class="title function_">go</span>(-<span class="number">1</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>这里定义了缓存处理方法</p><ul><li>找到该 <code>comment</code> 在缓存中的对应数据，删除</li></ul><p>对于 <code>Book.comments</code> 缓存，返回的新数据会自动覆盖旧数据。</p><p><span class="emoji" alias="eye" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f441.png?v8">👁</span> 当你这样处理时，控制台会发出警告，提示</p><img src="/2022/03/14/Apollo%20Client%20%E7%BC%93%E5%AD%98%E5%A4%84%E7%90%86%E5%B0%8F%E7%BB%93/console-warning.png" class="" title="提示缓存数据可能丢失"><p><a href="https://community.apollographql.com/t/reasons-of-cache-data-may-be-lost-when-replacing-warning/1766">关于控制台警告</a>这里描述了类似的问题，因为默认行为符合需求，所以不需要额外的<a href="https://www.apollographql.com/docs/react/caching/cache-field-behavior/">字段策略</a>设置，可以忽略该警告。</p><h4 id="更新评论"><a href="#更新评论" class="headerlink" title="更新评论"></a>更新评论</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">UPDATE_COMMENT_MUTATION</span> = gql`<span class="language-graphql"></span></span><br><span class="line"><span class="language-graphql">  <span class="keyword">mutation</span> UpdateComment<span class="punctuation">(</span></span></span><br><span class="line"><span class="language-graphql">    <span class="variable">$commentId</span>: ID<span class="punctuation">!</span></span></span><br><span class="line"><span class="language-graphql">    <span class="variable">$rating</span>: Int<span class="punctuation">!</span></span></span><br><span class="line"><span class="language-graphql">    <span class="variable">$updatedAt</span>: DateTime<span class="punctuation">!</span></span></span><br><span class="line"><span class="language-graphql">    <span class="variable">$content</span>: String</span></span><br><span class="line"><span class="language-graphql">  <span class="punctuation">)</span> <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">    updateComment<span class="punctuation">(</span></span></span><br><span class="line"><span class="language-graphql">      <span class="symbol">commentId</span><span class="punctuation">:</span> <span class="variable">$commentId</span></span></span><br><span class="line"><span class="language-graphql">      <span class="symbol">rating</span><span class="punctuation">:</span> <span class="variable">$rating</span></span></span><br><span class="line"><span class="language-graphql">      <span class="symbol">updatedAt</span><span class="punctuation">:</span> <span class="variable">$updatedAt</span></span></span><br><span class="line"><span class="language-graphql">      <span class="symbol">content</span><span class="punctuation">:</span> <span class="variable">$content</span></span></span><br><span class="line"><span class="language-graphql">    <span class="punctuation">)</span> <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">      code</span></span><br><span class="line"><span class="language-graphql">      success</span></span><br><span class="line"><span class="language-graphql">      message</span></span><br><span class="line"><span class="language-graphql">      comment <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">        id</span></span><br><span class="line"><span class="language-graphql">        rating</span></span><br><span class="line"><span class="language-graphql">        content</span></span><br><span class="line"><span class="language-graphql">        createdAt</span></span><br><span class="line"><span class="language-graphql">        updatedAt</span></span><br><span class="line"><span class="language-graphql">      <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">    <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">  <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">`</span>;</span><br><span class="line"><span class="keyword">const</span> {</span><br><span class="line">    <span class="attr">mutate</span>: updateComment,</span><br><span class="line">    <span class="attr">loading</span>: isUpdating,</span><br><span class="line">    <span class="attr">onDone</span>: onCommentUpdate,</span><br><span class="line">} = <span class="title function_">useMutation</span>(<span class="variable constant_">UPDATE_COMMENT_MUTATION</span>, <span class="function">() =&gt;</span> ({</span><br><span class="line">    <span class="attr">variables</span>: {</span><br><span class="line">        commentId,</span><br><span class="line">        <span class="attr">rating</span>: rating.<span class="property">value</span>,</span><br><span class="line">        <span class="attr">content</span>: content.<span class="property">value</span>,</span><br><span class="line">        <span class="attr">updatedAt</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toISOString</span>(),</span><br><span class="line">    },</span><br><span class="line">}));</span><br><span class="line"><span class="title function_">onCommentUpdate</span>(<span class="function">(<span class="params">{ data: { updateComment } }</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">if</span> (updateComment.<span class="property">success</span>) {</span><br><span class="line">        content.<span class="property">value</span> = <span class="string">""</span>;</span><br><span class="line">        rating.<span class="property">value</span> = <span class="number">0</span>;</span><br><span class="line">        toast.<span class="title function_">success</span>(updateComment.<span class="property">message</span>);</span><br><span class="line">        router.<span class="title function_">go</span>(-<span class="number">1</span>);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        toast.<span class="title function_">warning</span>(updateComment.<span class="property">message</span>);</span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>这里也没有定义缓存处理方法，原因是：</p><ul><li>更新 <code>id</code> 为 <code>c1</code> 的评论成功后，会返回 <code>c1</code> 对应的新数据，该数据会自动覆盖旧数据</li><li>对于 <code>Book</code> 缓存来说，由于 <code>comments</code> 字段中保存的是都是数据引用，因此不需要额外的操作</li></ul><img src="/2022/03/14/Apollo%20Client%20%E7%BC%93%E5%AD%98%E5%A4%84%E7%90%86%E5%B0%8F%E7%BB%93/%E5%BC%95%E7%94%A8%E6%95%B0%E7%BB%84.png" class="" title="字段值为对象的保存的是对象引用"><h2 id="更新书架"><a href="#更新书架" class="headerlink" title="更新书架"></a>更新书架</h2><h3 id="后端定义-1"><a href="#后端定义-1" class="headerlink" title="后端定义"></a>后端定义</h3><p><code>User</code> 的 <code>schema</code> 定义如下</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">User</span> {</span><br><span class="line">    <span class="attr">id</span>: <span class="variable constant_">ID</span>!</span><br><span class="line">    <span class="attr">name</span>: <span class="title class_">String</span>!</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">bookShelf</span>: [<span class="title class_">Book</span>!]</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>Query</code> 中定义了一个查询，判断书籍是否在书架中：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">Query</span> {</span><br><span class="line">    ...</span><br><span class="line">    <span class="title function_">isBookInBookshelf</span>(<span class="attr">bookId</span>: <span class="variable constant_">ID</span>!, <span class="attr">userId</span>: <span class="variable constant_">ID</span>!): <span class="title class_">Boolean</span>!</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>书架 <code>Mutation</code> 定义如下</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">Mutation</span> {</span><br><span class="line">    ...</span><br><span class="line">    <span class="title function_">toggleBookshelf</span>(<span class="attr">userId</span>: <span class="variable constant_">ID</span>!, <span class="attr">bookId</span>: <span class="variable constant_">ID</span>!): toggleBookshelfResponse!</span><br><span class="line">}</span><br><span class="line">type toggleBookshelfResponse implements <span class="title class_">MutationResponse</span> {</span><br><span class="line">    <span class="attr">code</span>: <span class="title class_">String</span>!</span><br><span class="line">    <span class="attr">success</span>: <span class="title class_">Boolean</span>!</span><br><span class="line">    <span class="attr">message</span>: <span class="title class_">String</span>!</span><br><span class="line">    <span class="attr">user</span>: <span class="title class_">User</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>从定义可知：</p><ul><li>更新书架后，会返回一个新的 <code>user</code> 数据</li><li><code>user.bookShelf</code> 中保存用户书架列表</li></ul><h3 id="发送-Mutation-1"><a href="#发送-Mutation-1" class="headerlink" title="发送 Mutation"></a>发送 Mutation</h3><p>需要处理的缓存内容有：</p><ul><li><code>isBookInBookshelf</code> 查询的缓存结果</li><li><code>User</code> 的 <code>bookShelf</code> 字段</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">GET_IS_BOOK_IN_BOOKSHELF</span> = gql`<span class="language-graphql"></span></span><br><span class="line"><span class="language-graphql">  <span class="keyword">query</span> isBookInBookshelf<span class="punctuation">(</span><span class="variable">$bookId</span>: ID<span class="punctuation">!</span>, <span class="variable">$userId</span>: ID<span class="punctuation">!</span><span class="punctuation">)</span> <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">    isBookInBookshelf<span class="punctuation">(</span><span class="symbol">bookId</span><span class="punctuation">:</span> <span class="variable">$bookId</span>, <span class="symbol">userId</span><span class="punctuation">:</span> <span class="variable">$userId</span>)</span></span><br><span class="line"><span class="language-graphql">  <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">TOGGLE_BOOKSHELF_MUTATION</span> = gql`<span class="language-graphql"></span></span><br><span class="line"><span class="language-graphql">  <span class="keyword">mutation</span> toggleBookshelf<span class="punctuation">(</span><span class="variable">$bookId</span>: ID<span class="punctuation">!</span>, <span class="variable">$userId</span>: ID<span class="punctuation">!</span><span class="punctuation">)</span> <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">    toggleBookshelf<span class="punctuation">(</span><span class="symbol">bookId</span><span class="punctuation">:</span> <span class="variable">$bookId</span>, <span class="symbol">userId</span><span class="punctuation">:</span> <span class="variable">$userId</span>) <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">      message</span></span><br><span class="line"><span class="language-graphql">      success</span></span><br><span class="line"><span class="language-graphql">      user <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">          id</span></span><br><span class="line"><span class="language-graphql">        bookShelf <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">          title</span></span><br><span class="line"><span class="language-graphql">          id</span></span><br><span class="line"><span class="language-graphql">          rawAuthor</span></span><br><span class="line"><span class="language-graphql">          publisher</span></span><br><span class="line"><span class="language-graphql">          publishDate</span></span><br><span class="line"><span class="language-graphql">          doubanRating</span></span><br><span class="line"><span class="language-graphql">          summary</span></span><br><span class="line"><span class="language-graphql">          image</span></span><br><span class="line"><span class="language-graphql">          isbn13</span></span><br><span class="line"><span class="language-graphql">        <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">      <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">    <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">  <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> { <span class="attr">mutate</span>: toggleBookshelf, <span class="attr">onDone</span>: onToggle } = <span class="title function_">useMutation</span>(</span><br><span class="line">    <span class="variable constant_">TOGGLE_BOOKSHELF_MUTATION</span>,</span><br><span class="line">    <span class="function">() =&gt;</span> ({</span><br><span class="line">        <span class="attr">variables</span>: {</span><br><span class="line">            <span class="attr">bookId</span>: bookId.<span class="property">value</span>,</span><br><span class="line">            userId,</span><br><span class="line">        },</span><br><span class="line">        <span class="attr">update</span>: <span class="function">(<span class="params">cache, { data: { toggleBookshelf } }</span>) =&gt;</span> {</span><br><span class="line">            <span class="keyword">const</span> oldData = cache.<span class="title function_">readQuery</span>({</span><br><span class="line">                <span class="attr">query</span>: <span class="variable constant_">GET_IS_BOOK_IN_BOOKSHELF</span>,</span><br><span class="line">                <span class="attr">variables</span>: {</span><br><span class="line">                    <span class="attr">bookId</span>: bookId.<span class="property">value</span>,</span><br><span class="line">                    userId,</span><br><span class="line">                },</span><br><span class="line">            });</span><br><span class="line">            <span class="keyword">if</span> (toggleBookshelf.<span class="property">success</span> === <span class="literal">true</span>) {</span><br><span class="line">                cache.<span class="title function_">writeQuery</span>({</span><br><span class="line">                    <span class="attr">query</span>: <span class="variable constant_">GET_IS_BOOK_IN_BOOKSHELF</span>,</span><br><span class="line">                    <span class="attr">variables</span>: {</span><br><span class="line">                        <span class="attr">bookId</span>: bookId.<span class="property">value</span>,</span><br><span class="line">                        userId,</span><br><span class="line">                    },</span><br><span class="line">                    <span class="attr">data</span>: {</span><br><span class="line">                        <span class="attr">isBookInBookshelf</span>: !oldData.<span class="property">isBookInBookshelf</span>,</span><br><span class="line">                    },</span><br><span class="line">                });</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">    })</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><p>更新发生后做了两件事：</p><ul><li>利用 <code>cache.writeQuery</code> 更新 <code>isBookInBookshelf</code> 查询的缓存结果</li><li>对于 <code>User.bookShelf</code> 字段，由于新的 <code>user</code> 数据会覆盖缓存中的旧数据，因此可以不做处理</li></ul><h3 id="x1f4a5-当前实现的问题"><a href="#x1f4a5-当前实现的问题" class="headerlink" title="💥当前实现的问题"></a><span class="emoji" alias="boom" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a5.png?v8">💥</span>当前实现的问题</h3><ul><li>每一本书都需要发送一个额外的查询，判断其是否已经在书架中</li><li>从未登录状态切换到登录状态时，所有已经加载的书籍都会发送 <code>isBookInBookshelf</code> 查询，这意味着用户登录伴随着 N 个额外请求（不可接受！</li></ul><img src="/2022/03/14/Apollo%20Client%20%E7%BC%93%E5%AD%98%E5%A4%84%E7%90%86%E5%B0%8F%E7%BB%93/checkBook.png" class="" title="一本书一个请求"><a href="/2022/03/26/%E9%87%8D%E5%86%99duozhuavue%E4%B9%A6%E6%9E%B6/" title="重写duozhuavue书架">重写duozhuavue书架</a><h2 id="主页信息流分页"><a href="#主页信息流分页" class="headerlink" title="主页信息流分页"></a>主页信息流分页</h2><p>开发<a href="/2021/12/09/%E5%88%86%E9%A1%B5/" title="分页">分页</a>功能时，也进行了一些缓存合并。策略定义如下：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Query</span>: {</span><br><span class="line">    <span class="attr">fields</span>: {</span><br><span class="line">        <span class="attr">categoryFeed</span>: <span class="title function_">relayStylePagination</span>()</span><br><span class="line">    }</span><br><span class="line">},</span><br><span class="line"><span class="title class_">Category</span>: {</span><br><span class="line">    <span class="attr">fields</span>: {</span><br><span class="line">        <span class="attr">items</span>: <span class="title function_">relayStylePagination</span>()</span><br><span class="line">    }</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p>这里利用了 <code>Apollo Client</code> 提供的 <code>relayStylePagination()</code> 工具函数，它已经实现了缓存合并策略。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>对于缓存中的查询，可以利用 <code>cache.readQuery</code> 和 <code>cache.writeQuery</code> 进行更新</li><li>对于缓存中的对象，一般情况下返回的新数据会自动覆盖旧数据，也可以利用 <code>cache.modify</code> 修改</li><li>为了让返回的新对象自动替代缓存中的对象，必须在客户端的 <code>schema</code> 定义中返回 <code>id</code> 字段</li><li>对于分页信息的缓存，尽可能在设置字段策略时使用 <code>Apollo Client</code> 提供的工具函数，如 <code>offsetLimitPagination()</code>, <code>relayStylePagination()</code></li><li>删除缓存中的对象时，先利用 <code>cache.identify</code> 确定缓存对应的标识符，然后使用 <code>cache.evict</code> 和 <code>cache.gc</code></li><li><code>useMutation</code> 处理缓存的逻辑写在 <code>update</code> 函数中</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> graphql </tag>
            
            <tag> apollo client </tag>
            
            <tag> vue-apollo </tag>
            
            <tag> duozhuavue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文本溢出攻击</title>
      <link href="/2022/01/09/%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E6%94%BB%E5%87%BB/"/>
      <url>/2022/01/09/%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<p>主要记录开发<a href="https://duozhuavue.vercel.app/book">duozhuavue<span class="emoji" alias="green_heart" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f49a.png?v8">💚</span></a>时对一些文本过长情况的处理方法。</p><h3 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h3><ul><li>后台服务器对数据的文本长度没有限制、处理</li><li>在前端页面利用 CSS 处理文本溢出</li></ul><h3 id="多抓鱼"><a href="#多抓鱼" class="headerlink" title="多抓鱼"></a>多抓鱼</h3><p>以下是<a href="www.duozhuayu.com">多抓鱼</a>部分页面遇到过长用户名时的情况。<br>测试文本：“这是一个非常长的ID用来测试布局溢出，正常情况最后会出现三个点，而且不会把其它内容推出屏幕”。</p><center style="display: flex; justify-content: space-between; flex-wrap: wrap;">  <div><img src="/2022/01/09/%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E6%94%BB%E5%87%BB/duozhuayu-oc-page-header.png" class="" width="300" title="书单页顶部"></div>  <div><img src="/2022/01/09/%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E6%94%BB%E5%87%BB/duozhuayu-book-page-comment.png" class="" width="300" title="书籍页评论区"></div>  <div><img src="/2022/01/09/%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E6%94%BB%E5%87%BB/duozhuayu-user-page-header.png" class="" width="300" title="用户页顶部"></div>  <div><img src="/2022/01/09/%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E6%94%BB%E5%87%BB/duozhuayu-user-page-activity.png" class="" width="300" title="用户页活动区"></div></center><span id="more"></span><h3 id="duozhuavue"><a href="#duozhuavue" class="headerlink" title="duozhuavue"></a>duozhuavue</h3><p>以下是<a href="https://duozhuavue.vercel.app/book">duozhuavue<span class="emoji" alias="green_heart" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f49a.png?v8">💚</span></a>处理后的样子</p><center style="display: flex; justify-content: space-between; flex-wrap: wrap;">  <div><img src="/2022/01/09/%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E6%94%BB%E5%87%BB/oc-page-header.png" class="" width="300" title="书单页顶部"></div>  <div><img src="/2022/01/09/%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E6%94%BB%E5%87%BB/book-page-comment.png" class="" width="300" title="书籍页评论区"></div>  <div><img src="/2022/01/09/%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E6%94%BB%E5%87%BB/user-page-header.png" class="" width="300" title="用户页顶部"></div>  <div><img src="/2022/01/09/%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E6%94%BB%E5%87%BB/user-page-douban-like.png" class="" width="300" title="用户页书架区（自定义）"></div></center><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><iframe src="https://codesandbox.io/embed/chu-li-wen-ben-yi-chu-94p4fk?fontsize=14&amp;theme=dark" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" title="处理文本溢出" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>对于块元素内的单行文本，注意文本所在容器的宽度</li><li>对于弹性盒子内的文本，必须先确定盒子的宽度，在此基础上才能处理溢出情况</li><li>对于多行文本，可以参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/-webkit-line-clamp">MDN</a> 的说明和样例</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> duozhuavue </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分页</title>
      <link href="/2021/12/09/%E5%88%86%E9%A1%B5/"/>
      <url>/2021/12/09/%E5%88%86%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<p>记录开发<a href="https://duozhuavue.vercel.app/book">duozhuavue<span class="emoji" alias="green_heart" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f49a.png?v8">💚</span></a>主页的分页功能时的实践。</p><h1 id="关于分页"><a href="#关于分页" class="headerlink" title="关于分页"></a>关于分页</h1><h2 id="分页的样子"><a href="#分页的样子" class="headerlink" title="分页的样子"></a>分页的样子</h2><ol><li><p>有编号的分页</p><img src="/2021/12/09/%E5%88%86%E9%A1%B5/page1.png" class="" width="500" title="有编号的分页"></li><li><p>无编号，点击加载</p><img src="/2021/12/09/%E5%88%86%E9%A1%B5/page2.png" class="" width="500" title="点击获取下一页数据"></li><li><p>无编号，滚动加载</p><img src="/2021/12/09/%E5%88%86%E9%A1%B5/page3.png" class="" width="500" title="滚动到特定位置获取下一页数据"></li></ol><span id="more"></span><h2 id="跳转到下一页时要做什么"><a href="#跳转到下一页时要做什么" class="headerlink" title="跳转到下一页时要做什么"></a>跳转到下一页时要做什么</h2><ol><li><p>获取数据</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据传入的参数获取新数据</span></span><br><span class="line"><span class="keyword">const</span> incoming = <span class="title function_">getNextPage</span>(...);</span><br></pre></td></tr></tbody></table></figure></li><li><p>更新缓存</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每个字段都可以有自己的 merge() 函数用于配置缓存合并策略</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">existing, incoming</span>) {</span><br><span class="line">    ...</span><br><span class="line">    existing = [...existing, ...incoming];</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> existing;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="想要的功能"><a href="#想要的功能" class="headerlink" title="想要的功能"></a>想要的功能</h2><p>在已经<strong>有缓存</strong>的情况下，<strong>分页读取、显示</strong>（paginated read）缓存数据。</p><h1 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h1><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><h3 id="graphql-查询设置"><a href="#graphql-查询设置" class="headerlink" title="graphql 查询设置"></a><code>graphql</code> 查询设置</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// first: 获取几个分类</span></span><br><span class="line"><span class="comment">// after: 从哪个分类开始获取分类</span></span><br><span class="line"><span class="comment">// itemsFirst: 每个分类下获取几本图书</span></span><br><span class="line"><span class="comment">// itemsAfter: 从哪个地方开始获取图书</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">GET_CATEGORY_FEED</span> = gql`<span class="language-graphql"></span></span><br><span class="line"><span class="language-graphql">  <span class="keyword">query</span> getCategoryFeed<span class="punctuation">(</span></span></span><br><span class="line"><span class="language-graphql">    <span class="variable">$first</span>: Int</span></span><br><span class="line"><span class="language-graphql">    <span class="variable">$after</span>: String</span></span><br><span class="line"><span class="language-graphql">    <span class="variable">$itemsFirst</span>: Int</span></span><br><span class="line"><span class="language-graphql">    <span class="variable">$itemsAfter</span>: String</span></span><br><span class="line"><span class="language-graphql">  <span class="punctuation">)</span> <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">    categoryFeed<span class="punctuation">(</span><span class="symbol">first</span><span class="punctuation">:</span> <span class="variable">$first</span>, <span class="symbol">after</span><span class="punctuation">:</span> <span class="variable">$after</span>) <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">      pageInfo <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">        hasNextPage</span></span><br><span class="line"><span class="language-graphql">        endCursor</span></span><br><span class="line"><span class="language-graphql">      <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">      edges <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">        node <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">          id</span></span><br><span class="line"><span class="language-graphql">          name</span></span><br><span class="line"><span class="language-graphql">          items<span class="punctuation">(</span><span class="symbol">first</span><span class="punctuation">:</span> <span class="variable">$itemsFirst</span>, <span class="symbol">after</span><span class="punctuation">:</span> <span class="variable">$itemsAfter</span>) <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">            pageInfo <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">              endCursor</span></span><br><span class="line"><span class="language-graphql">              hasNextPage</span></span><br><span class="line"><span class="language-graphql">            <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">            edges <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">              node <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">                id</span></span><br><span class="line"><span class="language-graphql">                title</span></span><br><span class="line"><span class="language-graphql">                rawAuthor</span></span><br><span class="line"><span class="language-graphql">                doubanRating</span></span><br><span class="line"><span class="language-graphql">                originalPrice</span></span><br><span class="line"><span class="language-graphql">                image</span></span><br><span class="line"><span class="language-graphql">              <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">            <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">          <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">        <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">      <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">    <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">  <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">`</span></span><br></pre></td></tr></tbody></table></figure><p>关于 <code>categoryFeed</code> 中的 <code>pageInfo</code> 和 <code>edges</code>，可以参考 <a href="https://relay.dev/graphql/connections.htm#">GraphQL Cursor Connections Specification</a></p><h3 id="设置缓存合并策略"><a href="#设置缓存合并策略" class="headerlink" title="设置缓存合并策略"></a>设置缓存合并策略</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Query</span>: {</span><br><span class="line">    <span class="attr">fields</span>: {</span><br><span class="line">        <span class="attr">categoryFeed</span>: {</span><br><span class="line">            ...<span class="title function_">relayStylePagination</span>(),</span><br><span class="line">            <span class="attr">keyArgs</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="comment">// 自定义read函数，实现分页读取缓存</span></span><br><span class="line">            <span class="title function_">read</span>(<span class="params">existing, {args: {first, after}}</span>) {</span><br><span class="line">                <span class="keyword">const</span> res = {};</span><br><span class="line">                <span class="comment">// 根据 after 参数选择缓存中的数据返回</span></span><br><span class="line">                res = {...}</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">    },</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p>缓存的合并策略，可以参考 <a href="https://www.apollographql.com/docs/react/caching/cache-field-behavior/">Customizing the behavior of cached fields</a></p><p><code>relayStylePagination</code> 可以参考 <a href="https://www.apollographql.com/docs/react/pagination/cursor-based/#relay-style-cursor-pagination">Relay-style cursor pagination</a></p><h2 id="使用-fetchMore"><a href="#使用-fetchMore" class="headerlink" title="使用 fetchMore()"></a>使用 fetchMore()</h2><h3 id="查询设置"><a href="#查询设置" class="headerlink" title="查询设置"></a>查询设置</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> after = <span class="title function_">ref</span>(<span class="string">''</span>) <span class="comment">// 从哪里开始获取数据</span></span><br><span class="line"><span class="keyword">const</span> first = <span class="title function_">ref</span>(<span class="number">1</span>) <span class="comment">// 获取几条数据</span></span><br><span class="line"><span class="keyword">const</span> {</span><br><span class="line">  <span class="attr">result</span>: categoryFeedResult,</span><br><span class="line">  <span class="attr">loading</span>: categoryFeedLoading,</span><br><span class="line">  <span class="attr">error</span>: categoryFeedError,</span><br><span class="line">  fetchMore</span><br><span class="line">} = <span class="title function_">useQuery</span>(<span class="variable constant_">GET_CATEGORY_FEED</span>, <span class="function">() =&gt;</span> ({</span><br><span class="line">  <span class="attr">after</span>: after.<span class="property">value</span>,</span><br><span class="line">  <span class="attr">first</span>: first.<span class="property">value</span>,</span><br><span class="line">  <span class="attr">itemsAfter</span>: <span class="string">''</span>,</span><br><span class="line">  <span class="attr">itemsFirst</span>: <span class="number">3</span></span><br><span class="line">}))</span><br></pre></td></tr></tbody></table></figure><h3 id="首次使用"><a href="#首次使用" class="headerlink" title="首次使用"></a>首次使用</h3><ol><li><p>页面加载</p><p>请求第一条数据，缓存为空，于是请求服务器，获得第一条数据，写入缓存，返回给页面</p></li><li><p>点击<u>加载更多分类</u></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> loadMoreCategories = <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">  <span class="title function_">fetchMore</span>({</span><br><span class="line">    <span class="attr">variables</span>: {</span><br><span class="line">      <span class="attr">after</span>: cursor.<span class="property">value</span> <span class="comment">// 这里的cursor是第一页数据的 pageInfo 中的信息</span></span><br><span class="line">    }</span><br><span class="line">  }).<span class="title function_">then</span>(<span class="function">(<span class="params">{ data: { categoryFeed } }</span>) =&gt;</span> {</span><br><span class="line">    after.<span class="property">value</span> = categoryFeed.<span class="property">pageInfo</span>.<span class="property">endCursor</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">      <span class="string">'$after is updated, there will be a new categoryFeed query...'</span></span><br><span class="line">    )</span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>调用 <code>loadMoreCategories()</code> ，执行带有新参数的 <code>fetchMore()</code></p><p>新数据会依照合并策略写入缓存</p><p><span class="emoji" alias="eyes" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f440.png?v8">👀</span> 为了读取更新后的缓存，需要在 <code>then()</code> 中更新 <code>after</code> 的值（更新会触发查询执行，该 <code>after</code> 参数可以用于请求缓存中特定部分的数据</p></li><li><p>再次点击<u>加载更多分类</u></p></li></ol><h3 id="刷新页面后"><a href="#刷新页面后" class="headerlink" title="刷新页面后"></a>刷新页面后</h3><ol><li>页面加载</li><li>点击<u>加载更多分类</u></li><li>再次点击<u>加载更多分类</u></li></ol><h3 id="效果及问题"><a href="#效果及问题" class="headerlink" title="效果及问题"></a>效果及问题</h3><center style="display: flex; justify-content: space-between;">  <div><img src="/2021/12/09/%E5%88%86%E9%A1%B5/fetchMore-no-cache.gif" class="" width="375" title="没有缓存的情况下请求"></div>  <div style="margin-left: 10px;"><img src="/2021/12/09/%E5%88%86%E9%A1%B5/fetchMore-with-cache.gif" class="" width="375" title="有缓存的情况下请求"></div></center><p>看起来没什么问题！但是问题发生在<u>有缓存时的第一次点击</u>之后</p><p>缓存中的分类如今有三条数据</p><p>刷新页面，页面加载，ok！</p><img src="/2021/12/09/%E5%88%86%E9%A1%B5/cache-ok.png" class="" width="500" title="ok！缓存不受影响！"><p>点击<u>加载更多分类</u>，ops！缓存中的分类变成两条了！！</p><img src="/2021/12/09/%E5%88%86%E9%A1%B5/cache-ops.png" class="" width="500" title="ops！cache被修改了！"><h4 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h4><p>在有缓存的情况下，我的期望是<strong>从缓存读取数据</strong>。但是实际情况是，每次调用 <code>fetchMore()</code> 都会请求服务器数据。</p><p>看了一下 <code>fetchMore()</code> 的<a href="https://github.com/apollographql/apollo-client/blob/main/src/core/ObservableQuery.ts">源码</a>，它是这么定义的</p><img src="/2021/12/09/%E5%88%86%E9%A1%B5/fetchMore.png" class="" width="600" title="fetchMore() 必然请求服务器"><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ul><li><input checked="" disabled="" type="checkbox"> 不用<code>fetchMore()</code></li><li><input disabled="" type="checkbox"> 重新定义缓存合并策略，如果新结果已经被缓存，就不执行<code>merge()</code>函数（<code>...relayStylePagination()</code>中有默认的 <code>merge()</code>函数</li></ul><h2 id="使用-useQuery"><a href="#使用-useQuery" class="headerlink" title="使用 useQuery"></a>使用 useQuery</h2><p>为了不使用 <code>fetchMore()</code> ，刚开始我使用了 <code>useLazyQuery()</code>, 它会返回一个需要主动调用获取数据的 <code>load()</code> 函数。我在页面挂载后，调用 <code>load()</code> 获取第一页数据，在点击发生时再次调用 <code>load()</code> 并传入相应的参数，获取新数据。这种实现满足了一些需求，但是也有它的问题。于是我又去考虑别的策略，很快就意识到，相同的逻辑其实利用 <code>useQuery()</code> 也可以实现，尽管它们存在相同的问题。</p><p>给查询传入响应式变量，想要获取下一页数据时，只需要<strong>更改变量的值</strong>（查询会自动更新</p><h3 id="查询设置-1"><a href="#查询设置-1" class="headerlink" title="查询设置"></a>查询设置</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> after = <span class="title function_">ref</span>(<span class="string">''</span>) <span class="comment">// 从哪里开始获取数据</span></span><br><span class="line"><span class="keyword">const</span> first = <span class="title function_">ref</span>(<span class="number">1</span>) <span class="comment">// 获取几条数据</span></span><br><span class="line"><span class="keyword">const</span> {</span><br><span class="line">  <span class="attr">result</span>: categoryFeedResult,</span><br><span class="line">  <span class="attr">loading</span>: categoryFeedLoading,</span><br><span class="line">  <span class="attr">error</span>: categoryFeedError</span><br><span class="line">} = <span class="title function_">useQuery</span>(<span class="variable constant_">GET_CATEGORY_FEED</span>, <span class="function">() =&gt;</span> ({</span><br><span class="line">  <span class="attr">after</span>: after.<span class="property">value</span>,</span><br><span class="line">  <span class="attr">first</span>: first.<span class="property">value</span>,</span><br><span class="line">  <span class="attr">itemsAfter</span>: <span class="string">''</span>,</span><br><span class="line">  <span class="attr">itemsFirst</span>: <span class="number">3</span></span><br><span class="line">}))</span><br></pre></td></tr></tbody></table></figure><h3 id="首次使用-1"><a href="#首次使用-1" class="headerlink" title="首次使用"></a>首次使用</h3><ol><li><p>页面加载</p><p>请求第一条数据，缓存为空，于是请求服务器，获取第一条数据，写入缓存，返回到页面</p></li><li><p>点击加载更多分类</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> loadMoreCategories = <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">  after.<span class="property">value</span> = cursor.<span class="property">value</span> <span class="comment">// 只需要更新 after 的值</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>调用 <code>loadMoreCategories()</code></p><p>查询再次执行，缓存未命中，请求服务器，得到第二条数据，写入缓存，返回到页面</p></li></ol><h3 id="刷新页面"><a href="#刷新页面" class="headerlink" title="刷新页面"></a>刷新页面</h3><ol><li><p>页面加载</p><p><code>after</code> 参数为 <code>""</code></p><p>请求第一条数据，缓存命中，返回到页面</p></li><li><p>点击加载更多分类</p><p>调用 <code>loadMoreCategories()</code></p><p>查询再次执行，命中缓存，得到两条数据，返回到页面</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义缓存的 read() 函数</span></span><br><span class="line">res.<span class="property">edges</span> = [</span><br><span class="line">  ...existing.<span class="property">edges</span>.<span class="title function_">slice</span>(<span class="number">0</span>, startIndex + first); <span class="comment">// 总是从头开始读取数据</span></span><br><span class="line">];</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p><span class="emoji" alias="raised_eyebrow" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f928.png?v8">🤨</span> 在没有缓存的情况下，请求新数据时，该组件会整体<strong>刷新</strong></p><center style="display: flex; justify-content: space-evenly;">  <div><img src="/2021/12/09/%E5%88%86%E9%A1%B5/without-cache.gif" class="" width="375" title="没有缓存的情况下请求下一条数据"></div>  <div style="margin-left: 10px;"><img src="/2021/12/09/%E5%88%86%E9%A1%B5/with-cache.gif" class="" width="375" title="有缓存的情况下请求下一条数据"></div></center><p>因为 <code>categoryFeed</code> 查询确实是重新执行了一次，所以整体刷新是正常现象。这种正常现象不是我要的效果。</p><h2 id="重新定义缓存合并策略"><a href="#重新定义缓存合并策略" class="headerlink" title="重新定义缓存合并策略"></a>重新定义缓存合并策略</h2><ul><li><input disabled="" type="checkbox"> TODO</li></ul><h2 id="trade-off"><a href="#trade-off" class="headerlink" title="trade-off"></a>trade-off</h2><p><code>relayStylePagination()</code> 的默认设置中，对缓存的读取是全部读取。也就是说，当你从别的页面回到主页，你可以看到之前得到的所有数据，并没有分页地读取缓存数据。</p><p>我也在想，在主页这样滚动浏览的情境下，<strong>分页读取</strong>到底有没有必要，想了半天，好像是没必要啊！</p><h2 id="回到最初的起点"><a href="#回到最初的起点" class="headerlink" title="回到最初的起点"></a>回到最初的起点</h2><p>最终我还是决定采用使用 <code>fetchMore()</code> 的方法。虽然绕了一圈，但是这段时间为了解决分页问题不停探索，还是学到了很多东西。</p><p><span class="emoji" alias="flags" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f38f.png?v8">🎏</span> 写完<a href="https://duozhuavue.vercel.app/book">duozhuavue</a>就去面<a href="https://www.duozhuayu.com/">duozhuayu</a>！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.apollographql.com/docs/react/pagination/overview/">Doc - apollo 分页</a></p><p><a href="https://www.apollographql.com/docs/react/caching/advanced-topics/#incremental-loading-fetchmore">Doc - apollo 使用 <code>fetchMore</code> 增量加载</a></p><p><a href="https://v4.apollo.vuejs.org/zh-cn/guide-composable/pagination.html#%E4%BD%BF%E7%94%A8-fetchmore">Doc - Vue Apollo 分页</a></p><p><a href="https://www.apollographql.com/blog/graphql/pagination/understanding-pagination-rest-graphql-and-relay/">Blog - Understanding pagination</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> graphql </tag>
            
            <tag> apollo client </tag>
            
            <tag> vue-apollo </tag>
            
            <tag> duozhuavue </tag>
            
            <tag> pagination </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>粘性定位生效时添加样式</title>
      <link href="/2021/11/28/%E7%B2%98%E6%80%A7%E5%AE%9A%E4%BD%8D%E7%94%9F%E6%95%88%E6%97%B6%E6%B7%BB%E5%8A%A0%E6%A0%B7%E5%BC%8F/"/>
      <url>/2021/11/28/%E7%B2%98%E6%80%A7%E5%AE%9A%E4%BD%8D%E7%94%9F%E6%95%88%E6%97%B6%E6%B7%BB%E5%8A%A0%E6%A0%B7%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>写 <a href="https://duozhuavue.vercel.app/book">duozhuavue<span class="emoji" alias="green_heart" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f49a.png?v8">💚</span></a> 主页面时，希望书籍类别的 <code>Title</code> 在 <code>sticky</code> 生效时，添加一个<u>下边界</u>。</p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><img src="/2021/11/28/%E7%B2%98%E6%80%A7%E5%AE%9A%E4%BD%8D%E7%94%9F%E6%95%88%E6%97%B6%E6%B7%BB%E5%8A%A0%E6%A0%B7%E5%BC%8F/duozhuavue.gif" class="" width="500" title="粘性定位生效时添加下边界"><!--  more  --><h3 id="样例预览"><a href="#样例预览" class="headerlink" title="样例预览"></a><a href="https://0uhwu.csb.app/">样例预览</a></h3><iframe src="https://codesandbox.io/embed/add-style-when-sticky-is-active-0uhwu?fontsize=14&amp;hidenavigation=1&amp;module=%2Fmain.js&amp;theme=dark&amp;view=editor" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" title="add style when sticky is active" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe><blockquote><p>Intersection Observer API 提供了一种异步检测目标元素与祖先元素或 viewport 相交情况变化的方法。</p></blockquote><h3 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h3><ol><li>确定目标元素、根元素</li><li>设置监听回调（利用相交的<u><strong>比例</strong></u>或者<u><strong>变化</strong></u>）</li><li>监听</li></ol><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>设置根元素时使用了固定大小的像素，意味着只有在<strong>全屏</strong>下样式才会生效</li><li>第二个粘性元素生效时，第一个粘性元素的样式并没有移除，样例中它藏在了 <code>.dogs</code> 元素的下面，不会影响观感。</li></ul><p>参考</p><ul><li><a href="https://css-tricks.com/how-to-detect-when-a-sticky-element-gets-pinned/">css tricks</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API">Intersection Observer API</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/isIntersecting">IntersectionObserverEntry.isIntersecting</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> duozhuavue </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决粘性定位的一些问题</title>
      <link href="/2021/11/27/%E8%A7%A3%E5%86%B3%E7%B2%98%E6%80%A7%E5%AE%9A%E4%BD%8D%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
      <url>/2021/11/27/%E8%A7%A3%E5%86%B3%E7%B2%98%E6%80%A7%E5%AE%9A%E4%BD%8D%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>下面是一个正常工作的粘性定位的例子，当你滚动页面，<code>sticky part1</code> 和 <code>sticky part2</code> 会固定在<u>页面顶部</u>。</p><span id="more"></span><iframe src="https://codesandbox.io/embed/dang-position-sticky-bu-sheng-xiao-k6yl8?fontsize=14&amp;hidenavigation=1&amp;theme=dark&amp;view=preview" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" title="当 position: sticky; 不生效" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe><p>但是带有背景的边框告诉我们，这东西溢出了。尝试隐藏这些溢出，去下个页面看看效果。</p><p>粘性定位失效了！相关元素并没有固定在<strong>页面顶部</strong>。</p><p>当然，如果处理溢出时，<code>overflow</code> 属性的值设置为 <code>scroll</code> 或者 <code>auto</code>，你再去滚动内部元素时会发现：相关元素粘在了它们的祖先元素 <code>&lt;div class="container overflow"&gt;</code> 上。</p><p>对此现象，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/position">MDN</a> 这么解释：</p><blockquote><p>a sticky element “sticks” to its nearest ancestor that has a “scrolling mechanism” (created when <code>overflow</code> is <code>hidden</code>, <code>scroll</code>, <code>auto</code>, or <code>overlay</code>), even if that ancestor isn’t the nearest actually scrolling ancestor.</p></blockquote><p>总之：<br><span class="emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> 使用 <code>sticky</code> 定位属性时，小心 <code>overflow</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> duozhuavue </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>当flex-1没有按预期工作</title>
      <link href="/2021/09/29/%E5%BD%93flex-1%E6%B2%A1%E6%9C%89%E6%8C%89%E9%A2%84%E6%9C%9F%E5%B7%A5%E4%BD%9C/"/>
      <url>/2021/09/29/%E5%BD%93flex-1%E6%B2%A1%E6%9C%89%E6%8C%89%E9%A2%84%E6%9C%9F%E5%B7%A5%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>写<a href="https://duozhuavue.vercel.app/search/clothing">duozhuavue<span class="emoji" alias="green_heart" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f49a.png?v8">💚</span></a>服装搜索页面时遇到了一个问题：<code>flex</code> 容器内，两个设置了 <code>flex：1</code> 的项目，最后宽度竟然不是相等的。</p><img src="/2021/09/29/%E5%BD%93flex-1%E6%B2%A1%E6%9C%89%E6%8C%89%E9%A2%84%E6%9C%9F%E5%B7%A5%E4%BD%9C/flex-problem.png" class="" width="375" height="667" title="问题大概长这样"><span id="more"></span><h3 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h3><iframe src="https://codesandbox.io/embed/du-shi-flex-1zen-me-kuan-du-bu-yi-yang-j3olm?fontsize=14&amp;hidenavigation=1&amp;theme=dark&amp;view=preview" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" title="都是flex-1怎么宽度不一样" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe><h3 id="样例代码"><a href="#样例代码" class="headerlink" title="样例代码"></a>样例代码</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>One<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span></span><br><span class="line">    Two has more content xxxxxxxxxxxxxxxxxxxxxxxxxx ssssss</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> {</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 等价于 flex: 1 1 0; */</span></span><br><span class="line"><span class="comment">/* 元素宽度由内容宽度决定，不一定等宽 */</span></span><br><span class="line"><span class="selector-class">.inner</span> {</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 元素宽度显式设置为0，覆盖了flex-basis: 0; ，flex-grow起作用，各个列等宽，内容可能溢出 */</span></span><br><span class="line"><span class="selector-class">.inner</span> {</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/* min-width: 0;*/</span></span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.inner</span> {</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="comment">/* flex-grow起作用，各个列等宽 */</span></span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="comment">/* 下面的代码说明，创建BFC后，内容宽度不影响容器宽度，容器宽度为0 */</span></span><br><span class="line">  <span class="comment">/* flex: 0 1 0; */</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>水平方向的 <code>flex</code> 盒子，可以用来创建<strong>等高列</strong>，各个列的宽度（尺寸）不一定相等；</li><li>各个列的最终宽度由<code>列的初始尺寸</code>和<code>容器的剩余可用空间</code>共同决定；</li><li><strong>初始尺寸</strong>由显式设置的宽度决定。如果没有显式设置宽度，则由它们的内容宽度决定。如果没有内容，则宽度为 0；</li><li><code>flex</code> <strong>容器的剩余可用空间</strong>（可正可负），根据各个列的 <code>flex-grow</code> 和 <code>flex-shrink</code> 属性分配给各个列；</li><li><code>overflow: hidden;</code> 创建 <code>BFC</code> 容器后，<code>BFC</code> 容器内部内容的宽度不会影响容器宽度；</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> duozhuavue </tag>
            
            <tag> BFC </tag>
            
            <tag> flexbox </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消失的XXX</title>
      <link href="/2020/12/30/%E6%B6%88%E5%A4%B1%E7%9A%84XXX/"/>
      <url>/2020/12/30/%E6%B6%88%E5%A4%B1%E7%9A%84XXX/</url>
      
        <content type="html"><![CDATA[<h1 id="消失的播客"><a href="#消失的播客" class="headerlink" title="消失的播客"></a>消失的播客</h1><hr><img src="/2020/12/30/%E6%B6%88%E5%A4%B1%E7%9A%84XXX/boke.png" class="" title="剩余价值"><center>2020年听到一半被下架的播客。</center><ul><li><a href="https://www.youtube.com/watch?v=ghx4l0Cp9o0">【051】瘟疫、语言和具体的人：与历史学家罗新的聊天</a></li><li><a href="https://www.youtube.com/watch?v=mdTxI-H59K0">【剩余榨值 023】在巨大的 shock 后，我们所思考的、所做的一切都将与此有关</a></li></ul><span id="more"></span><h1 id="消失的人"><a href="#消失的人" class="headerlink" title="消失的人"></a>消失的人</h1><hr><img src="/2020/12/30/%E6%B6%88%E5%A4%B1%E7%9A%84XXX/haohd.png" class="" title="(1)"><img src="/2020/12/30/%E6%B6%88%E5%A4%B1%E7%9A%84XXX/yzy.png" class="" title="(2)"><center>2020年6月4号之后，中国没有了郝叶夫妇。</center><h1 id="消失的示威"><a href="#消失的示威" class="headerlink" title="消失的示威"></a>消失的示威</h1><hr><img src="/2020/12/30/%E6%B6%88%E5%A4%B1%E7%9A%84XXX/hk.png" class="" title="2019年香港街头示威游行"><center>后来病毒来了。</center><h1 id="消失的房源"><a href="#消失的房源" class="headerlink" title="消失的房源"></a>消失的房源</h1><hr><img src="/2020/12/30/%E6%B6%88%E5%A4%B1%E7%9A%84XXX/dk.png" class="" title="在蛋壳App搜索房源得到的结果"><center>租客、房东都是受害者。</center><h1 id="消失的爱"><a href="#消失的爱" class="headerlink" title="消失的爱"></a>消失的爱</h1><hr><img src="/2020/12/30/%E6%B6%88%E5%A4%B1%E7%9A%84XXX/lwl.png" class="" title="李文亮医生最后一条微博"><center>他爱身边的人，不止小家，包括大家。</center><h1 id="消失的友谊"><a href="#消失的友谊" class="headerlink" title="消失的友谊"></a>消失的友谊</h1><hr><img src="/2020/12/30/%E6%B6%88%E5%A4%B1%E7%9A%84XXX/TAX.png" class="" title="(1)"><img src="/2020/12/30/%E6%B6%88%E5%A4%B1%E7%9A%84XXX/TAX2.png" class="" title="(2)"><center>注定要发生吗？</center><h1 id="消失的崇拜"><a href="#消失的崇拜" class="headerlink" title="消失的崇拜"></a>消失的崇拜</h1><hr><img src="/2020/12/30/%E6%B6%88%E5%A4%B1%E7%9A%84XXX/my1.png" class="" title="年初"><img src="/2020/12/30/%E6%B6%88%E5%A4%B1%E7%9A%84XXX/my2.png" class="" title="年末"><center>马云：变了的不是我</center><h1 id="消失的红队"><a href="#消失的红队" class="headerlink" title="消失的红队"></a>消失的红队</h1><hr><img src="/2020/12/30/%E6%B6%88%E5%A4%B1%E7%9A%84XXX/rck09.png" class="" title="9月份"><img src="/2020/12/30/%E6%B6%88%E5%A4%B1%E7%9A%84XXX/rck12.png" class="" title="12月份"><center>火箭、红队、火箭……，希望不是循环</center><h1 id="消失的音乐-人"><a href="#消失的音乐-人" class="headerlink" title="消失的音乐(人)"></a>消失的音乐(人)</h1><hr><img src="/2020/12/30/%E6%B6%88%E5%A4%B1%E7%9A%84XXX/lz.png" class="" title="qq音乐很抱歉"><img src="/2020/12/30/%E6%B6%88%E5%A4%B1%E7%9A%84XXX/lz2.png" class="" title="网易云很抱歉"><center>大家都很抱歉，我也知道不怪你们</center><h1 id="消失的自信"><a href="#消失的自信" class="headerlink" title="消失的自信"></a>消失的自信</h1><hr><img src="/2020/12/30/%E6%B6%88%E5%A4%B1%E7%9A%84XXX/bzx.png" class="" title="抵制圣诞节">]]></content>
      
      
      
        <tags>
            
            <tag> 杂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>styled-components + form小问题</title>
      <link href="/2020/09/01/styled-components%20+%20form%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
      <url>/2020/09/01/styled-components%20+%20form%E5%B0%8F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>异常代码：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表单不能输入值</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">SignUp</span> = props =&gt; {</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">Wrapper</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">    border: 1px solid #f5f4f0;</span></span><br><span class="line"><span class="string">    max-width: 500px;</span></span><br><span class="line"><span class="string">    padding: 1em;</span></span><br><span class="line"><span class="string">    margin: 0 auto;</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">Form</span> = styled.<span class="property">form</span><span class="string">`</span></span><br><span class="line"><span class="string">    label,</span></span><br><span class="line"><span class="string">    input {</span></span><br><span class="line"><span class="string">      display: block;</span></span><br><span class="line"><span class="string">      line-height: 2em;</span></span><br><span class="line"><span class="string">    }</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    input {</span></span><br><span class="line"><span class="string">      width: 100%;</span></span><br><span class="line"><span class="string">      margin-bottom: 1em;</span></span><br><span class="line"><span class="string">    }</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Wrapper</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Sign Up<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Form</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onSubmit</span>=<span class="string">{...}</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">"username"</span>&gt;</span>Username:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">"email"</span>&gt;</span>Email:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">"password"</span>&gt;</span>Password:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Wrapper</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>将 <code>styled-components</code> 部分的代码放在组件的<strong>外部</strong>，代码就正常了…</p><p><a href="https://styled-components.com/docs/basics#define-styled-components-outside-of-the-render-method">官方说明</a></p><blockquote><p>It is important to define your styled components outside of the render method, otherwise it will be recreated on every single render pass. Defining a styled component within the render method will thwart caching and drastically slow down rendering speed, and should be avoided.</p></blockquote><p>尤其在处理表单时，如果每输入一个字符就<code>re-render</code>组件，的确会很奇怪。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> React </tag>
            
            <tag> styled-components </tag>
            
            <tag> 表单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站性能提升最佳实践四</title>
      <link href="/2020/06/30/%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E5%9B%9B/"/>
      <url>/2020/06/30/%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E5%9B%9B/</url>
      
        <content type="html"><![CDATA[<p><a href="https://developer.yahoo.com/performance/rules.html?guccounter=1#csslink">https://developer.yahoo.com/performance/rules.html?guccounter=1#csslink</a></p><ul><li>Content</li><li>Server</li><li>Cookie</li><li>CSS</li><li>JavaScript</li><li>Images</li><li>Mobile</li></ul><p>原文从七个方面总结网站性能提升。</p><p>本篇总结Javascript、Images方面。</p><h2 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h2><h3 id="Put-Scripts-at-Bottom-脚本放在底部"><a href="#Put-Scripts-at-Bottom-脚本放在底部" class="headerlink" title="Put Scripts at Bottom 脚本放在底部"></a><a href="https://developer.yahoo.com/performance/rules.html#js_bottom">Put Scripts at Bottom</a> 脚本放在底部</h3><p>脚本会阻塞并行下载</p><p><a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec8.html#sec8.1.4">HTTP / 1.1规范</a>建议浏览器每个主机名并行下载最多两个组件</p><p>如果有多个主机名提供<strong>图像</strong>，则可以并行进行两个以上的下载，但是在下载<strong>脚本</strong>时，即使使用不同的主机名，浏览器也不会启动任何其他下载</p><p>defer脚本表示脚本不包含document.write，浏览器可以继续渲染</p><p>通常一个脚本如果可以defered，那它也可以移动到页面底部</p><h3 id="Make-JavaScript-and-CSS-External-从外部引用js脚本和css文件"><a href="#Make-JavaScript-and-CSS-External-从外部引用js脚本和css文件" class="headerlink" title="Make JavaScript and CSS External 从外部引用js脚本和css文件"></a><a href="https://developer.yahoo.com/performance/rules.html#external">Make JavaScript and CSS External</a> 从外部引用js脚本和css文件</h3><p>在HTML文档中内嵌的JavaScript和CSS会在每次请求HTML文档时被下载</p><p>使用外部文件通常会产生更快的页面，因为JavaScript和CSS文件被浏览器缓存</p><p>如果JavaScript和CSS在外部文件中，并且被浏览器缓存，则在不增加HTTP请求次数的情况下减小了HTML文档的大小</p><p>如果用户每次会话都有多个页面浏览，并且许多页面重复使用相同的脚本和样式表，那么缓存外部文件的潜在好处就更大</p><p>对于主页，这种每次会话只访问一次的页面，将js和css内联可能更好</p><p>一个样例：</p><p>对于许多浏览页面的第一个页面，内联js和css（减少请求次数，该页面<strong>加载完后动态下载</strong>外部文件，随后访问的页面会使用这些<strong>缓存</strong></p><h3 id="Minify-JavaScript-and-CSS-压缩JavaScript和CSS"><a href="#Minify-JavaScript-and-CSS-压缩JavaScript和CSS" class="headerlink" title="Minify JavaScript and CSS 压缩JavaScript和CSS"></a><a href="https://developer.yahoo.com/performance/rules.html#minify">Minify JavaScript and CSS</a> 压缩JavaScript和CSS</h3><p>压缩代码指的是删除不必要的代码，减小代码体积（因此可以提升响应性能</p><p>混淆代码也是减小代码体积的方法，但是is more risky</p><p>除了压缩外部脚本和样式之外，可以并且也应该压缩内联的<code>&lt;script&gt;</code>和<code>&lt;style&gt;</code>块。</p><p>即使脚本和css文件已经被gzip了，压缩还能让它们的体积减少5%以上</p><p><a href="https://tool.oschina.net/jscompress">在线压缩工具</a></p><span id="more"></span><h3 id="Remove-Duplicate-Scripts-删除重复脚本"><a href="#Remove-Duplicate-Scripts-删除重复脚本" class="headerlink" title="Remove Duplicate Scripts 删除重复脚本"></a><a href="https://developer.yahoo.com/performance/rules.html#js_dupes">Remove Duplicate Scripts</a> 删除重复脚本</h3><p>重复脚本出现的两个关键因素：</p><ul><li>脚本数量太多</li><li>团队人数太多</li></ul><p>重复脚本因为浪费HTTP请求和Js执行而损害性能</p><p>避免方法：</p><ul><li><p>使用script标签引入js脚本（不都是这么做的吗？</p></li><li><p>php代码</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">insertScript</span>(<span class="string">"menu.js"</span>) <span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="Minimize-DOM-Access-最小化DOM访问"><a href="#Minimize-DOM-Access-最小化DOM访问" class="headerlink" title="Minimize DOM Access 最小化DOM访问"></a><a href="https://developer.yahoo.com/performance/rules.html#dom_access">Minimize DOM Access</a> 最小化DOM访问</h3><p>使用JavaScript访问DOM元素的速度很慢，因此，为了使页面更具响应性，应该：</p><ul><li><p>缓存对已访问元素的引用</p></li><li><p>“离线”更新节点，然后将其添加到树中</p></li><li><p>避免使用JavaScript修复布局</p></li></ul><h3 id="Develop-Smart-Event-Handlers-开发聪明的事件处理程序"><a href="#Develop-Smart-Event-Handlers-开发聪明的事件处理程序" class="headerlink" title="Develop Smart Event Handlers 开发聪明的事件处理程序"></a><a href="https://developer.yahoo.com/performance/rules.html#events">Develop Smart Event Handlers</a> 开发聪明的事件处理程序</h3><p>如果div中有10个按钮，则仅将一个事件处理程序附加到div包装器上，而不是为每个按钮附加一个处理程序</p><p>无需等待onload事件即可开始对DOM树进行操作</p><p>DOMContentLoaded可能更适合使用</p><h2 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h2><h3 id="Optimize-Images-优化图片"><a href="#Optimize-Images-优化图片" class="headerlink" title="Optimize Images 优化图片"></a><a href="https://developer.yahoo.com/performance/rules.html#opt_images">Optimize Images</a> 优化图片</h3><p>检查GIF，看看它们是否使用了与图像中颜色数量相对应的调色板大小</p><p>尝试将GIFs转换为PNGs</p><p>使用<a href="https://pmt.sourceforge.io/pngcrush/">pngcrush</a>压缩PNG</p><p>使用<a href="https://jpegclub.org/">jpegtran</a>处理JPEG</p><h3 id="Optimize-CSS-Sprites-优化CSS-Sprites"><a href="#Optimize-CSS-Sprites-优化CSS-Sprites" class="headerlink" title="Optimize CSS Sprites 优化CSS Sprites"></a><a href="https://developer.yahoo.com/performance/rules.html#opt_sprites">Optimize CSS Sprites</a> 优化CSS Sprites</h3><p>将sprite中的图像水平排列，而不是垂直排列，通常会生成较小的文件</p><p>将sprite中相近的颜色组合，有助于保持较低的颜色数量</p><p>“要mobile-friendly”，不要在sprite中的图像之间留下大的空隙</p><h3 id="Do-Not-Scale-Images-in-HTML-不在HTML中缩放图片"><a href="#Do-Not-Scale-Images-in-HTML-不在HTML中缩放图片" class="headerlink" title="Do Not Scale Images in HTML 不在HTML中缩放图片"></a><a href="https://developer.yahoo.com/performance/rules.html#no_scale">Do Not Scale Images in HTML</a> 不在HTML中缩放图片</h3><p>需要多大的图片就使用多大的图片</p><p>例子：</p><p>需要一个100x100的图片，不要来个500x500的图片然后去压缩它</p><h3 id="Make-favicon-ico-Small-and-Cacheable-图标要小、可缓存"><a href="#Make-favicon-ico-Small-and-Cacheable-图标要小、可缓存" class="headerlink" title="Make favicon.ico Small and Cacheable 图标要小、可缓存"></a><a href="https://developer.yahoo.com/performance/rules.html#favicon">Make favicon.ico Small and Cacheable</a> 图标要小、可缓存</h3><p>favicon.ico 即使你不关心它，浏览器也会请求它，最好不要使用404响应它</p><p>由于它在同一台服务器上，因此每次请求时都会发送cookie</p><p>它还会干扰下载顺序</p><p>为了克服弊端：</p><ul><li>保证它尽可能小，最好小于1K</li><li>根据需要设置Expires过期头（图标的名字不能改</li></ul><p><a href="http://www.imagemagick.org/">Imagemagick</a> 可以帮助你创建小图标</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 前端 </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站性能提升最佳实践三</title>
      <link href="/2020/06/30/%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E4%B8%89/"/>
      <url>/2020/06/30/%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<p><a href="https://developer.yahoo.com/performance/rules.html?guccounter=1#csslink">https://developer.yahoo.com/performance/rules.html?guccounter=1#csslink</a></p><ul><li>Content</li><li>Server</li><li>Cookie</li><li>CSS</li><li>JavaScript</li><li>Images</li><li>Mobile</li></ul><p>原文从七个方面总结网站性能提升。</p><p>本篇总结Cookie、CSS、Mobile方面。</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="Reduce-Cookie-Size-减小cookie大小"><a href="#Reduce-Cookie-Size-减小cookie大小" class="headerlink" title="Reduce Cookie Size 减小cookie大小"></a><a href="https://developer.yahoo.com/performance/rules.html#cookie_size">Reduce Cookie Size</a> 减小cookie大小</h3><p>使用HTTP cookie的原因有多种，例如身份验证和个性化</p><p>服务器和浏览器通过HTTP headers交换有关cookie的信息</p><p>尽可能减小cookie的大小，有助于减少对用户响应时间的影响</p><h3 id="Use-Cookie-Free-Domains-for-Components-尽可能不使用cookie"><a href="#Use-Cookie-Free-Domains-for-Components-尽可能不使用cookie" class="headerlink" title="Use Cookie-Free Domains for Components 尽可能不使用cookie"></a><a href="https://developer.yahoo.com/performance/rules.html#cookie_free">Use Cookie-Free Domains for Components</a> 尽可能不使用cookie</h3><p>确保使用无Cookie的请求来请求静态组件</p><p>创建一个子域并在其中托管所有静态组件</p><p>一些代理可能拒绝缓存带cookie的请求得到的组件</p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="Put-Stylesheets-at-Top-样式文件放到顶部"><a href="#Put-Stylesheets-at-Top-样式文件放到顶部" class="headerlink" title="Put Stylesheets at Top 样式文件放到顶部"></a><a href="https://developer.yahoo.com/performance/rules.html#css_top">Put Stylesheets at Top</a> 样式文件放到顶部</h3><p>将样式表放到HEAD可以让页面逐步呈现</p><h3 id="Avoid-CSS-Expressions-避免使用CSS表达式"><a href="#Avoid-CSS-Expressions-避免使用CSS表达式" class="headerlink" title="Avoid CSS Expressions 避免使用CSS表达式"></a><a href="https://developer.yahoo.com/performance/rules.html#css_expressions">Avoid CSS Expressions</a> 避免使用CSS表达式</h3><p>css表达式可以动态的设置css属性</p><span id="more"></span><p>但是其调用次数过多，例如鼠标在页面上移动、放大缩小了窗口、页面滚动等</p><p>可以使用event handlers作为替代</p><h3 id="Choose-Over-import-使用link而不是-import"><a href="#Choose-Over-import-使用link而不是-import" class="headerlink" title="Choose <link> Over @import 使用link而不是@import"></a><a href="https://developer.yahoo.com/performance/rules.html#csslink">Choose <code>&lt;link&gt;</code> Over @import</a> 使用link而不是@import</h3><p>In IE <code>@import</code> behaves the same as using <code>&lt;link&gt;</code> at the bottom of the page, so it’s best not to use it.</p><h3 id="Avoid-Filters-避免使用Filters"><a href="#Avoid-Filters-避免使用Filters" class="headerlink" title="Avoid Filters 避免使用Filters"></a><a href="https://developer.yahoo.com/performance/rules.html#no_filters">Avoid Filters</a> 避免使用Filters</h3><p>IE专有的AlphaImageLoader过滤器旨在解决IE版本&lt;7的半透明真彩色PNG的问题。该过滤器的问题是，当图像被下载时，它会阻止渲染并冻结浏览器。它还会增加内存消耗，而且是按每个元素应用，而不是按每张图片应用，所以问题会成倍增加。</p><p>最好的办法是完全避免使用AlphaImageLoader，而使用优雅降级的PNG8代替，这些在IE中都是可以的。如果你实在需要AlphaImageLoader，请使用<code>_filter</code>，以免影响IE7以上用户。</p><h2 id="Mobile"><a href="#Mobile" class="headerlink" title="Mobile"></a>Mobile</h2><h3 id="Keep-Components-Under-25-KB-组件不超过25KB"><a href="#Keep-Components-Under-25-KB-组件不超过25KB" class="headerlink" title="Keep Components Under 25 KB 组件不超过25KB"></a><a href="https://developer.yahoo.com/performance/rules.html#under25">Keep Components Under 25 KB</a> 组件不超过25KB</h3><p>此限制与以下事实有关：iPhone不会缓存大于25K的组件。</p><p>请注意，这是<strong>未压缩的大小</strong>。</p><p>缩小在这里非常重要，因为仅使用gzip可能还不够。</p><h3 id="Pack-Components-Into-a-Multipart-Document-打包组件"><a href="#Pack-Components-Into-a-Multipart-Document-打包组件" class="headerlink" title="Pack Components Into a Multipart Document 打包组件"></a><a href="https://developer.yahoo.com/performance/rules.html#multipart">Pack Components Into a Multipart Document</a> 打包组件</h3><p>将组件打包到一个多部分的文档中，就像一封带有附件的电子邮件，它可以帮助你<strong>用一个HTTP请求获取多个组件</strong></p><p>HTTP requests are expensive！</p><p>使用这项技术时，首先检查用户代理是否支持（iphone就不支持</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 前端 </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站性能提升最佳实践二</title>
      <link href="/2020/06/29/%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E4%BA%8C/"/>
      <url>/2020/06/29/%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<p><a href="https://developer.yahoo.com/performance/rules.html?guccounter=1#csslink">https://developer.yahoo.com/performance/rules.html?guccounter=1#csslink</a></p><ul><li>Content</li><li>Server</li><li>Cookie</li><li>CSS</li><li>JavaScript</li><li>Images</li><li>Mobile</li></ul><p>原文从七个方面总结网站性能提升。</p><p>本篇总结Server方面。</p><h3 id="Use-a-Content-Delivery-Network-CDN-使用内容分发网络"><a href="#Use-a-Content-Delivery-Network-CDN-使用内容分发网络" class="headerlink" title="Use a Content Delivery Network (CDN)使用内容分发网络"></a><a href="https://developer.yahoo.com/performance/rules.html#cdn">Use a Content Delivery Network (CDN)</a>使用内容分发网络</h3><p>用户到服务器的距离会影响响应时间，比如当我们访问美国的服务器和中国的服务器<br>用户80%-90%的<strong>响应时间</strong>用来下载页面上的内容<br>为了加速这个：</p><ul><li><p>不要轻易尝试将web应用改为分布式架构</p></li><li><p>可以尝试使用CDN，将静态内容分散（切换到CDN是个相对简单的代码变化，将极大地提高网站速度</p></li></ul><p>一个内容分发网络是<strong>分布在多地的服务器集合</strong>，可以更有效地向用户提供内容</p><h3 id="Add-Expires-or-Cache-Control-Header添加Expires或Cache-Control头"><a href="#Add-Expires-or-Cache-Control-Header添加Expires或Cache-Control头" class="headerlink" title="Add Expires or Cache-Control Header添加Expires或Cache-Control头"></a><a href="https://developer.yahoo.com/performance/rules.html#expires">Add Expires or Cache-Control Header</a>添加Expires或Cache-Control头</h3><ol><li>对于静态组件，设置一个长期的Expires头，表示该请求“永不过期”</li><li>对于动态组件，使用适当的Cache-Control头，来帮助浏览器有条件的进行请求</li></ol><p>网页被首次访问时需要大量的HTTP请求，通过使用Expires头，可以使请求过的组件<u>可缓存</u>，避免后续访问时的重复请求。也就是说，这个操作是对后续的请求有影响</p><p>对于性能的提升，取决你对这个网站的访问频率</p><p>Web服务器在<strong>HTTP响应</strong>中添加的Expires头告诉客户端可以将组件缓存多长时间</p><p>如果使用了长期的Expires头，当组件发生改变时，组件名应该改变（构建阶段处理：将组件版本号加到组件名中</p><h3 id="Gzip-Components压缩组件"><a href="#Gzip-Components压缩组件" class="headerlink" title="Gzip Components压缩组件"></a><a href="https://developer.yahoo.com/performance/rules.html#gzip">Gzip Components</a>压缩组件</h3><p>通过<strong>压缩HTTP响应</strong>来减少响应时间</p><span id="more"></span><p>HTTP请求头中要添加</p><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br></pre></td></tr></tbody></table></figure><p>服务器根据上面列出的方法之一压缩响应，并在响应头中添加下面的字段提醒客户端</p><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Encoding</span><span class="punctuation">: </span>gzip</span><br></pre></td></tr></tbody></table></figure><p>服务器根据文件类型选择要压缩的内容，但通常非常有限</p><p>任何文本类型的响应都值得压缩</p><p>图片和PDF不应该压缩（因为已经压缩过了</p><p>压缩尽可能多的文件类型是减少页面重量page weight，加速用户体验的简单方法</p><h3 id="Configure-ETags配置实体标签"><a href="#Configure-ETags配置实体标签" class="headerlink" title="Configure ETags配置实体标签"></a><a href="https://developer.yahoo.com/performance/rules.html#etags">Configure ETags</a>配置实体标签</h3><p>当要确定缓存的内容和服务器中的内容是否一致时，实体标签是比最后修改时间（last-modified date）更完备的机制</p><p>实体标签是唯一标识特定版本组件的字符串，唯一格式限制是要使用引号引起来</p><p>一个例子：</p><p>服务器发回响应如下</p><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Last-Modified</span><span class="punctuation">: </span>Tue, 12 Dec 2006 03:03:59 GMT</span><br><span class="line"><span class="attribute">ETag</span><span class="punctuation">: </span>"10c24bc-4ab-457e1c1f"</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>12195</span><br></pre></td></tr></tbody></table></figure><p>过一会客户端要验证内容，就发送下面的请求，其中If-None-Match中就是要验证的实体标签</p><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/i/yahoo.gif</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>us.yimg.com</span><br><span class="line"><span class="attribute">If-Modified-Since</span><span class="punctuation">: </span>Tue, 12 Dec 2006 03:03:59 GMT</span><br><span class="line"><span class="attribute">If-None-Match</span><span class="punctuation">: </span>"10c24bc-4ab-457e1c1f"</span><br></pre></td></tr></tbody></table></figure><p>如果标签得到匹配，服务器会返回一个304响应，表示Not Modified</p><p>网站服务器是集群的情况，这项技术不推荐使用，因为：</p><blockquote><p>The problem with ETags is that they typically are constructed using attributes that make them unique to a specific server hosting a site. ETags won’t match when a browser gets the original component from one server and later tries to validate that component on a different server, a situation that is all too common on Web sites that use a cluster of servers to handle requests. By default, both Apache and IIS embed data in the ETag that dramatically reduces the odds of the validity test succeeding on web sites with multiple servers.</p></blockquote><p>Apache服务器删除ETag的方法：</p><ul><li><p>在配置文件添加一行 </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileETag none</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="Flush-Buffer-Early尽早刷新输出缓存"><a href="#Flush-Buffer-Early尽早刷新输出缓存" class="headerlink" title="Flush Buffer Early尽早刷新输出缓存"></a><a href="https://developer.yahoo.com/performance/rules.html#flush">Flush Buffer Early</a>尽早刷新输出缓存</h3><p><a href="https://www.php.net/flush">flush()</a> 函数允许将部分就绪的HTML响应发送回浏览器，以便浏览器可以在服务器忙于处理其它HTML时就开始获取组件</p><p>flushing的最佳位置是head标签之后，如下</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  ... &lt;!-- css, js --&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;?php flush(); ?&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  ... &lt;!-- content --&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="Use-GET-for-Ajax-Requests-使用GET处理Ajax请求"><a href="#Use-GET-for-Ajax-Requests-使用GET处理Ajax请求" class="headerlink" title="Use GET for Ajax Requests 使用GET处理Ajax请求"></a><a href="https://developer.yahoo.com/performance/rules.html#ajax_get">Use GET for Ajax Requests</a> 使用GET处理Ajax请求</h3><p>在使用XMLHttpRequest时，POST在浏览器中的实现分为两步：先发送头文件，再发送数据。</p><p>因此最好使用GET请求，它只使用一个TCP包就可以发送（除非有很多cookie</p><p>POST without posting any data behaves like GET.</p><h3 id="Avoid-Empty-Image-src-避免空src属性"><a href="#Avoid-Empty-Image-src-避免空src属性" class="headerlink" title="Avoid Empty Image src 避免空src属性"></a><a href="https://developer.yahoo.com/performance/rules.html#emptysrc">Avoid Empty Image src</a> 避免空src属性</h3><p>两种形式的空src属性</p><ol><li><p>html</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>js</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">img.<span class="property">src</span> = <span class="string">""</span>;</span><br></pre></td></tr></tbody></table></figure></li></ol><p>都会导致：浏览器再次向服务器发送一次请求</p><p>造成这个行为的根本原因是：在浏览器中执行URI解析的方式，浏览器会将空字符串视为一条相对URI，然后进行解析</p><p>HTML5增加了约束，src属性必须非空</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 前端 </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站性能提升最佳实践一</title>
      <link href="/2020/06/22/%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E4%B8%80/"/>
      <url>/2020/06/22/%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p><a href="https://developer.yahoo.com/performance/rules.html?guccounter=1#csslink">https://developer.yahoo.com/performance/rules.html?guccounter=1#csslink</a></p><ul><li>Content</li><li>Server</li><li>Cookie</li><li>CSS</li><li>JavaScript</li><li>Images</li><li>Mobile</li></ul><p>原文从七个方面总结网站性能提升。</p><p>本篇总结Content方面。</p><h3 id="Make-Fewer-HTTP-Requests-减少HTTP请求"><a href="#Make-Fewer-HTTP-Requests-减少HTTP请求" class="headerlink" title="Make Fewer HTTP Requests 减少HTTP请求"></a><a href="https://developer.yahoo.com/performance/rules.html#num_http">Make Fewer HTTP Requests</a> 减少HTTP请求</h3><p>减少页面的组件数量，可以减少HTTP请求数量。</p><p>减少页面组件的方法：</p><ul><li><p>精简页面设计</p></li><li><p>不简化设计的情况下：</p><ul><li>文件组合（js文件放到一个里面，css文件放到一个里面）</li></ul></li><li><p><a href="https://css-tricks.com/css-sprites/">CSS Sprites</a>：背景图片合并成一张，利用css属性设置各个部分到相对应的页面</p><ul><li><a href="https://css-tricks.com/examples/CSSClip/">CSS Sprites with Inline Images</a> 也可以用来处理图片</li></ul></li><li><p>将内联图片放到css文件中（ Combining inline images into your cached stylesheets is a way to reduce HTTP requests and avoid increasing the size of your pages ？How ? ( Todo: find demo</p></li></ul><h3 id="Reduce-DNS-Lookups-减少DNS查询"><a href="#Reduce-DNS-Lookups-减少DNS查询" class="headerlink" title="Reduce DNS Lookups 减少DNS查询"></a><a href="https://developer.yahoo.com/performance/rules.html#dns_lookups">Reduce DNS Lookups</a> 减少DNS查询</h3><p>减少网站的主机名（hostnames），可以减少DNS查询次数</p><p>但是减少网站主机名会减少页面的并发下载量</p><blockquote><p>Trade-off：Avoiding DNS lookups cuts response times, but reducing parallel downloads may increase response times. </p></blockquote><p> Guide：Split components across <strong>at least two but no more than four</strong> hostnames.</p><h3 id="Avoid-Redirects-避免网站重定向"><a href="#Avoid-Redirects-避免网站重定向" class="headerlink" title="Avoid Redirects 避免网站重定向"></a><a href="https://developer.yahoo.com/performance/rules.html#redirects">Avoid Redirects</a> 避免网站重定向</h3><p>最经常发生的重定向：应该加/的地方没有加/</p><p>重定向可以用来从旧网站跳转到新网站</p><p>重定向也可以用来连接网站的不同部分、根据特定情况让用户跳转</p><p>解决办法：</p><ul><li><p>如果两个网站在同一个服务器，使用 <code>Alias and mod_rewrite</code></p></li><li><p>如果是网站换了个新域名，创建一个CNAME (a DNS record that creates an alias pointing from one domain name to another)，结合<code>Alias or mod_rewrite</code></p></li></ul><h3 id="Make-Ajax-Cacheable-缓存Ajax请求"><a href="#Make-Ajax-Cacheable-缓存Ajax请求" class="headerlink" title="Make Ajax Cacheable 缓存Ajax请求"></a><a href="https://developer.yahoo.com/performance/rules.html#cacheajax">Make Ajax Cacheable</a> 缓存Ajax请求</h3><p><strong>异步不等于即时</strong></p><p>优化异步请求：</p><ul><li>缓存Ajax请求</li></ul><span id="more"></span><h4 id="何时使用旧的响应，何时发送新的请求？"><a href="#何时使用旧的响应，何时发送新的请求？" class="headerlink" title="何时使用旧的响应，何时发送新的请求？"></a>何时使用旧的响应，何时发送新的请求？</h4><blockquote><p>This could be done by adding a timestamp to the address book Ajax URL indicating the last time the user modified her address book, for example, &amp;t=1190241612. If the address book hasn’t been modified since the last download, the timestamp will be the same and the address book will be read from the browser’s cache eliminating an extra HTTP roundtrip. If the user has modified her address book, the timestamp ensures the new URL doesn’t match the cached response, and the browser will request the updated address book entries.</p></blockquote><h3 id="Postload-Components"><a href="#Postload-Components" class="headerlink" title="Postload Components"></a><a href="https://developer.yahoo.com/performance/rules.html#postload">Postload Components</a></h3><p>非必须的组件延迟加载，比如一些js代码、用户点击后才显示的内容、文件夹里面的图片</p><p>确保页面正常工作，然后通过一些延迟加载的脚本增强页面上的体验，比如动画、拖放</p><h3 id="Preload-Components"><a href="#Preload-Components" class="headerlink" title="Preload Components"></a><a href="https://developer.yahoo.com/performance/rules.html#preload">Preload Components</a></h3><p>利用计算机的闲置时间，预加载将来需要的内容</p><ol><li><p>无条件的</p><p>只要打开某网站就加载一些额外的组件。</p><p>打开google.com，总会预加载之后搜索界面的图片</p></li><li><p>有条件的</p><p>搜索框输入内容就会预加载内容</p></li><li><p>预期中的</p><p>上线网站新设计时预加载可以不影响用户体验</p></li></ol><h3 id="Reduce-the-Number-of-DOM-Elements"><a href="#Reduce-the-Number-of-DOM-Elements" class="headerlink" title="Reduce the Number of DOM Elements"></a><a href="https://developer.yahoo.com/performance/rules.html#min_dom">Reduce the Number of DOM Elements</a></h3><p>页面tag数量</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">'*'</span>).<span class="property">length</span></span><br></pre></td></tr></tbody></table></figure><p>只有在语义上有意义时，才使用<code>&lt;div&gt;</code>（ 因为它总会添加一行</p><h4 id="有多少个DOM元素才算多呢？"><a href="#有多少个DOM元素才算多呢？" class="headerlink" title="有多少个DOM元素才算多呢？"></a>有多少个DOM元素才算多呢？</h4><p>检查其他类似的页面，然后比较。</p><h3 id="Split-Components-Across-Domains"><a href="#Split-Components-Across-Domains" class="headerlink" title="Split Components Across Domains"></a><a href="https://developer.yahoo.com/performance/rules.html#split">Split Components Across Domains</a></h3><p>拆分组件可以最大限度地实现并行下载</p><p>确保使用的域名数量不超过2-4个，因为DNS查询惩罚</p><p>例子：</p><p>将HTML文件和动态内容托管在<a href="http://www.example.org,并在static1.example.org和static2.example.org上拆分部署静态组件/">www.example.org，并在static1.example.org和static2.example.org上拆分部署静态组件</a></p><h3 id="Minimize-Number-of-iframes"><a href="#Minimize-Number-of-iframes" class="headerlink" title="Minimize Number of iframes"></a><a href="https://developer.yahoo.com/performance/rules.html#iframes">Minimize Number of iframes</a></h3><p><code>&lt;iframe&gt;</code> 优点：</p><ul><li>Helps with slow third-party content like badges and ads</li><li>Security sandbox</li><li>Download scripts in parallel</li></ul><p><code>&lt;iframe&gt;</code> 缺点：</p><ul><li>Costly even if blank</li><li>Blocks page onload</li><li>Non-semantic</li></ul><h3 id="Avoid-404s"><a href="#Avoid-404s" class="headerlink" title="Avoid 404s"></a><a href="https://developer.yahoo.com/performance/rules.html#no404">Avoid 404s</a></h3><p>HTTP请求是很昂贵的，提出HTTP请求，得到一个无用的响应（即404 Not Found）是完全没有必要的，而且会拖慢用户体验，没有任何好处。</p><p><strong>Particularly bad</strong> is when the link to an external JavaScript is wrong and the result is a 404. First, this download will block parallel downloads. Next the browser may try to parse the 404 response body as if it were JavaScript code, trying to find something usable in it.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 前端 </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>surface测试</title>
      <link href="/2020/06/18/surface%E6%B5%8B%E8%AF%95/"/>
      <url>/2020/06/18/surface%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>surface上写博客，完事之后各端同步测试。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git修改最近一次commit的信息</title>
      <link href="/2020/06/18/git%E4%BF%AE%E6%94%B9%E6%9C%80%E8%BF%91%E4%B8%80%E6%AC%A1commit%E7%9A%84%E4%BF%A1%E6%81%AF/"/>
      <url>/2020/06/18/git%E4%BF%AE%E6%94%B9%E6%9C%80%E8%BF%91%E4%B8%80%E6%AC%A1commit%E7%9A%84%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p>最近一次提交的信息不太对，已经push到远端。</p><img src="/2020/06/18/git%E4%BF%AE%E6%94%B9%E6%9C%80%E8%BF%91%E4%B8%80%E6%AC%A1commit%E7%9A%84%E4%BF%A1%E6%81%AF/xiugaiqian.png" class="" title="修改前"><p>修改步骤：</p><ol><li><p>输入命令，会进入编辑器</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></tbody></table></figure></li><li><p>修改commit信息，退出编辑器</p></li><li><p>强制推送</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f</span><br></pre></td></tr></tbody></table></figure></li></ol><p>修改后：</p><img src="/2020/06/18/git%E4%BF%AE%E6%94%B9%E6%9C%80%E8%BF%91%E4%B8%80%E6%AC%A1commit%E7%9A%84%E4%BF%A1%E6%81%AF/xiugaihou.png" class="" title="修改后"><p>注意到：<strong>commit号改变了</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几则笑话</title>
      <link href="/2020/02/22/%E5%87%A0%E5%88%99%E7%AC%91%E8%AF%9D/"/>
      <url>/2020/02/22/%E5%87%A0%E5%88%99%E7%AC%91%E8%AF%9D/</url>
      
        <content type="html"><![CDATA[<img src="/2020/02/22/%E5%87%A0%E5%88%99%E7%AC%91%E8%AF%9D/0222fig1.png" class="" title="weibo"><img src="/2020/02/22/%E5%87%A0%E5%88%99%E7%AC%91%E8%AF%9D/0222fig2.png" class="" title="weiboJinggao"><p>看到这则信息，下面有人举了几个前苏联的笑话，感觉很有意思，于是就去找了几个，笑得肚子疼。</p><blockquote><p>有个人在红场散发传单，被克格勃逮住了。那人辩解，我发的都是白纸。克格勃冷笑道，你以为我不知道你什么意思？</p></blockquote><blockquote><p>在苏共二十三次代表大会上，勃列日涅夫作报告，他问：“我们这里有没有敌人？”一个人回答：“有一个，他坐在第四排第十八号位子上。”勃问：“为什么他是敌人？”回答：“列宁说过敌人是不会打瞌睡的，我发现全场只有他一个人没有打瞌睡！”</p></blockquote><blockquote><p>“在苏联是否可以存在两党制？”“不，不可能，因为我们养不起。”</p></blockquote><blockquote><p>苏联特工对美国特工夸口道：“我们知道你们国家所有核导弹发射井的位置。”美国特工说：“那又有什么，我们知道你们未来20年全体政治局委员名单。”</p></blockquote><blockquote><p>一天戈尔巴乔夫到一个农场视察，看到有几头猪，就到猪旁边拍了一张照片。随行人员在照片上写上：戈尔巴乔夫和猪在一起，但又感到不妥。于是改成：猪和戈尔巴乔夫在一起，可还是感觉不对。最后把照片上的字改成：左起第三位是戈尔巴乔夫。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 杂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>健康的武汉</title>
      <link href="/2020/02/11/%E5%81%A5%E5%BA%B7%E7%9A%84%E6%AD%A6%E6%B1%89/"/>
      <url>/2020/02/11/%E5%81%A5%E5%BA%B7%E7%9A%84%E6%AD%A6%E6%B1%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一个健康的社会不该只有一种声音。</p></blockquote><p>哪里也去不了，就不停地刷屏。</p><p>医护人员在医院休息室嚎啕大哭，火化工人在殡仪馆唱歌给自己打气，主妇在阳台上绝望地哭喊救命，电话里快要崩溃的发自党性的咆哮…</p><p>房间的门被焊被锁被堵，外出的车队在高速上排成长龙，为了活命想偷渡到隔壁省却发现河对岸一排一排的人在围追堵截…</p><p>和新闻里的完全不一样。</p><p>我听到了两种声音。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data flow Synchronization and Pipelining</title>
      <link href="/2020/01/16/Pipelining/"/>
      <url>/2020/01/16/Pipelining/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.coursera.org/learn/parallel-programming-in-java/">https://www.coursera.org/learn/parallel-programming-in-java/</a></p><h3 id="Split-phase-Barriers-with-Java-Phasers"><a href="#Split-phase-Barriers-with-Java-Phasers" class="headerlink" title="Split-phase Barriers with Java Phasers"></a>Split-phase Barriers with Java Phasers</h3>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 并行编程 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Loop Parallelism</title>
      <link href="/2020/01/13/Loop%20Parallelism/"/>
      <url>/2020/01/13/Loop%20Parallelism/</url>
      
        <content type="html"><![CDATA[<h3 id="Parallel-Loops"><a href="#Parallel-Loops" class="headerlink" title="Parallel Loops"></a>Parallel Loops</h3><p>未知循环次数，利用了指针的for循环<br>每一个迭代当作一个子任务，<code>finish</code>约束整个循环</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">finish {</span><br><span class="line">    <span class="keyword">for</span> (p = head; p != <span class="literal">null</span> ; p = p.next) </span><br><span class="line">        async <span class="title function_">compute</span><span class="params">(p)</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>已知循环次数n，可以利用<code>forall</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vector addition</span></span><br><span class="line">forall (i : [<span class="number">0</span>:n-<span class="number">1</span>]) </span><br><span class="line">    a[i] = b[i] + c[i]</span><br></pre></td></tr></tbody></table></figure><p>利用 Java streams，上述功能有更加简洁的表达方式</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">a = IntStream.rangeClosed(<span class="number">0</span>, N-<span class="number">1</span>).parallel().toArray(i -&gt; b[i] + c[i]);</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h3 id="Parallel-Matrix-Multiplication"><a href="#Parallel-Matrix-Multiplication" class="headerlink" title="Parallel Matrix Multiplication"></a>Parallel Matrix Multiplication</h3><p>假设两个<code>n*n</code>的矩阵相乘，有</p><p>$$<br>c[i][j] = \sum_{k=0}^{n-1} a[i][k] * b[k][j]<br>$$<br>伪代码表示为</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i : [<span class="number">0</span>:n-<span class="number">1</span>]) {</span><br><span class="line">  <span class="keyword">for</span>(j : [<span class="number">0</span>:n-<span class="number">1</span>]) { c[i][j] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(k : [<span class="number">0</span>:n-<span class="number">1</span>]) {</span><br><span class="line">      c[i][j] = c[i][j] + a[i][k]*b[k][j]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>要替换成并行计算，可以简单地将外两层的for循环改成<code>forall</code></p><p>for-k 必须是线性的，因为这里有写数据（data race</p><h3 id="Barriers-in-Parallel-Loops"><a href="#Barriers-in-Parallel-Loops" class="headerlink" title="Barriers in Parallel Loops"></a>Barriers in Parallel Loops</h3><p>下面有一个简单的并行任务</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">forall (i : [<span class="number">0</span>:n-<span class="number">1</span>]) {</span><br><span class="line">    myId = lookup(i); <span class="comment">// convert int to a string </span></span><br><span class="line">    print HELLO, myId;</span><br><span class="line">    print BYE, myId;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在不同的执行下会有不同顺序的结果（相同myId对应的HELLO一定在BYE之前</p><p>barriers可以将一个parallel loop分为不同的阶段</p><p>在两个print之间插入一个barrier，可以保证所有的HELLO出现在BYE之前</p><p>两种写法：</p><ul><li><p>在一个<code>forall</code>循环中插入barriers分为不同的阶段 (两个对应的print共享myId</p></li><li><p>为每个阶段写自己的<code>forall</code>循环 (借助 intermediate data structure  to communicate the myId values from one <em>forall</em> to another <em>forall</em></p></li></ul><h3 id="Parallel-One-Dimensional-Iterative-Averaging"><a href="#Parallel-One-Dimensional-Iterative-Averaging" class="headerlink" title="Parallel One-Dimensional Iterative Averaging"></a>Parallel One-Dimensional Iterative Averaging</h3><p>Solve the recurrence<br>$$<br>X_i=\frac{X_{i-1}+X_{i+1}}2<br>$$</p><p>with boundary conditions<br>$$<br>X_0=0\ and\ X_n=1<br>$$</p><p><a href="https://en.wikipedia.org/wiki/Jacobi_method">Jacobi method</a>利用两个数组oldX[] and newX[]迭代求解该问题，并行伪代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (iter: [<span class="number">0</span>:nsteps-<span class="number">1</span>]) {</span><br><span class="line">  forall (i: [<span class="number">1</span>:n-<span class="number">1</span>]) {</span><br><span class="line">    newX[i] = (oldX[i-<span class="number">1</span>] + oldX[i+<span class="number">1</span>]) / <span class="number">2</span>;</span><br><span class="line">  }</span><br><span class="line">  swap pointers newX and oldX;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上述方法创建了 <em>nsteps</em> <em>×</em> (<em>n</em> <em>−</em> 1) 个任务</p><p><strong>使用Barriers可以减少需要创建的任务个数</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">forall ( i: [<span class="number">1</span>:n-<span class="number">1</span>]) {</span><br><span class="line">  <span class="keyword">for</span> (iter: [<span class="number">0</span>:nsteps-<span class="number">1</span>]) {</span><br><span class="line">    newX[i] = (oldX[i-<span class="number">1</span>] + oldX[i+<span class="number">1</span>]) / <span class="number">2</span>;</span><br><span class="line">    NEXT; <span class="comment">// Barrier</span></span><br><span class="line">    swap pointers newX and oldX;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上述方法只需要创建 <em>(n-1)</em> 个任务</p><p>This is a significant improvement since creating tasks is usually more expensive than performing barrier operations.</p><h3 id="Iteration-Grouping-Chunking-in-Parallel-Loops"><a href="#Iteration-Grouping-Chunking-in-Parallel-Loops" class="headerlink" title="Iteration Grouping/Chunking in Parallel Loops"></a>Iteration Grouping/Chunking in Parallel Loops</h3><p>对于向量相加问题</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">forall (i : [<span class="number">0</span>:n-<span class="number">1</span>]) a[i] = b[i] + c[i]</span><br></pre></td></tr></tbody></table></figure><p>上述方法创建了n个任务，当n很大时overheads也会很大</p><p>解决方法</p><p><strong>分组</strong>（<em>loop</em> <em>chunking</em> or <em>iteration grouping</em></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">forall (g:[<span class="number">0</span>:ng-<span class="number">1</span>])</span><br><span class="line">  <span class="keyword">for</span> (i : mygroup(g, ng, [<span class="number">0</span>:n-<span class="number">1</span>])) a[i] = b[i] + c[i]</span><br></pre></td></tr></tbody></table></figure><p>上述方法将任务个数从 <strong>n</strong> 降到了 <strong>ng</strong>（分组个数</p><p>分组方法有两种：</p><ul><li>block<ul><li>将连续的迭代分为一组</li></ul></li><li>cyclic<ul><li>将同余类迭代（ iterations in the same congruence class，分为一组</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> java </tag>
            
            <tag> 并行编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Functional Parallelism</title>
      <link href="/2020/01/10/Functional-Parallelism/"/>
      <url>/2020/01/10/Functional-Parallelism/</url>
      
        <content type="html"><![CDATA[<h3 id="Future-Tasks"><a href="#Future-Tasks" class="headerlink" title="Future Tasks"></a><strong>Future Tasks</strong></h3><p><code>future tasks</code></p><ul><li>tasks with <strong>return values</strong></li></ul><p><code>future objects</code>（also known as <code>promise objects</code></p><ul><li><p>a “handle” for accessing a task’s return value</p></li><li><p>两个主要操作：</p><ul><li><p>Assignment，形式如下</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A = future {</span><br><span class="line">    ⟨ task-with-<span class="keyword">return</span>-value ⟩</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>future object 被限制为只能一次赋值（_single assignment_，类似于 final 变量</p><p>future task 完成后 future object 就不能修改了</p></li><li><p>Blocking read</p><ul><li>A.get() 读操作会等待，直到与 future object 关联的 task 完成，将该任务的返回值作为 A.get() 的值</li><li>A.get() 之后的任何 statement S 开始执行时与 A 关联的任务已经完成</li></ul></li></ul></li></ul><span id="more"></span><h3 id="Creating-Future-Tasks-in-Java’s-Fork-Join-Framework"><a href="#Creating-Future-Tasks-in-Java’s-Fork-Join-Framework" class="headerlink" title="Creating Future Tasks in Java’s Fork/Join Framework"></a><strong>Creating Future Tasks in Java’s Fork/Join Framework</strong></h3><p>future tasks 和 regular tasks 的一些关键不同：</p><ol><li>future tasks 继承自 FJ 框架的 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/RecursiveTask.html">RecursiveTask</a> 类，regular tasks 继承自 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/RecursiveAction.html">RecursiveAction</a> 类</li><li>future task 的 <strong>compute()</strong> 方法必须有 non-void 的返回值</li><li><strong>left.join()</strong> 这样的方法调用都会等 left 指向的任务执行，只是 future task 有返回值</li></ol><h3 id="Memoization"><a href="#Memoization" class="headerlink" title="Memoization"></a><strong>Memoization</strong></h3><p>记录 f(x) 的执行结果，防止重复计算</p><ol><li><p>创建特定的数据结构，记录</p><p>$$<br>{(x_1,y_1=f(x_1)),(x_2,y_2=f(x_2)),…}<br>$$</p></li><li><p>当出现 f 的调用时先在记录中查找</p></li></ol><p>future task 在这里非常适合，记录的形式变为了</p><p>$$<br>{(x_1,y_1=future(f(x_1))),(x_2,y_2=future(f(x_2))),…}<br>$$</p><p>对于输入 x，如果对应的 future 对象已经创建，则可以调用该对象的 get() 方法</p><h3 id="Java-Streams"><a href="#Java-Streams" class="headerlink" title="Java Streams"></a><strong>Java Streams</strong></h3><p>操作集合对象除了<code>for loop</code>还可以利用<code>Java streams</code>提供的 API</p><p>下面的例子求注册学生的平均年龄</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">students.stream()</span><br><span class="line">    .filter(s -&gt; s.getStatus() == Student.ACTIVE)</span><br><span class="line">    .mapToInt(a -&gt; a.getAge())</span><br><span class="line">    .average();</span><br></pre></td></tr></tbody></table></figure><p>Java streams 提供了并行编程的 API</p><p>上面代码的 <code>students.stream()</code> 替换为 <code>students.parallelStream()</code> 或者 <code>Stream.of(students).parallel()</code> 就可以了</p><h3 id="Determinism-and-Data-Races"><a href="#Determinism-and-Data-Races" class="headerlink" title="Determinism and Data Races"></a><strong>Determinism and Data Races</strong></h3><p><em>functionally deterministic</em></p><ul><li>A parallel program is said to be <em>functionally deterministic</em> if it always computes the same answer when given the same input</li></ul><p><em>structurally deterministic</em></p><ul><li>It always computes the same computation graph, when given the same input.</li></ul><p>没有数据竞争不足以保证确定性</p><p>有数据竞争也不意味着程序的不确定性</p><p>带有数据竞争的不确定程序，每次产生的结果不同，但是可能每个结果都是可接受的！！e.g., different locations for a search pattern in a target string</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> java </tag>
            
            <tag> 并行编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Task Parallelism</title>
      <link href="/2020/01/08/Task%20Parallelism/"/>
      <url>/2020/01/08/Task%20Parallelism/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.coursera.org/learn/parallel-programming-in-java/">https://www.coursera.org/learn/parallel-programming-in-java/</a></p><h3 id="Task-Creation-and-Termination-Async-Finish"><a href="#Task-Creation-and-Termination-Async-Finish" class="headerlink" title="Task Creation and Termination (Async, Finish)"></a>Task Creation and Termination (Async, Finish)</h3><p>以数组求和作为例子</p><p>为了求得数组的和，可以将数组分为前后两个部分。两部分的求和可以并行执行，但是在求总和之前要保证两个子任务已经完成。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">finish {</span><br><span class="line">  async SUM1;  <span class="comment">// asynchronously compute sum of the lower half of the array</span></span><br><span class="line">  SUM2;  <span class="comment">// compute sum of the upper half of the array in parallel with SUM1</span></span><br><span class="line">}</span><br><span class="line">SUM;  <span class="comment">// combine the two partial sums after both SUM1 and SUM2 have finished</span></span><br></pre></td></tr></tbody></table></figure><p><code>async &lt;stmt1&gt;</code> ：父任务创建子任务执行<code>&lt;stmt1&gt;</code>，并且是并行于父任务的其余部分执行</p><p>上面的伪代码中，<code>async SUM1;</code>创建子任务SUM1，和SUM2并行执行</p><p><code>finish &lt;stmt2&gt;</code>：父任务执行<code>&lt;stmt2&gt;</code>，并且等待<code>&lt;stmt2&gt;以及其中创建的异步任务</code>完成</p><p>上例中，父任务等待SUM1和SUM2完成，才能执行SUM</p><h3 id="Tasks-in-Java’s-Fork-Join-Framework"><a href="#Tasks-in-Java’s-Fork-Join-Framework" class="headerlink" title="Tasks in Java’s Fork/Join Framework"></a>Tasks in Java’s Fork/Join Framework</h3><p>数组求和的<strong>分治</strong>写法<span id="more"></span></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ASum</span>{</span><br><span class="line">  <span class="type">int</span>[] A; <span class="comment">// input array</span></span><br><span class="line">  <span class="type">int</span> LO, HI; <span class="comment">// subrange</span></span><br><span class="line">  <span class="type">int</span> SUM; <span class="comment">// return value</span></span><br><span class="line">  ASum(<span class="type">int</span>[] array, <span class="type">int</span> low, <span class="type">int</span> high){</span><br><span class="line">    <span class="built_in">this</span>.A = array;</span><br><span class="line">    <span class="built_in">this</span>.LO = low;</span><br><span class="line">    <span class="built_in">this</span>.HI = high;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">()</span> {</span><br><span class="line">    <span class="keyword">if</span> (LO==HI) SUM = A[LO];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(LO&gt;HI) SUM = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> {</span><br><span class="line">      <span class="type">int</span> <span class="variable">MID</span> <span class="operator">=</span> (LO+HI)/<span class="number">2</span>;</span><br><span class="line">      L = <span class="keyword">new</span> <span class="title class_">ASum</span>(A, LO, MID);</span><br><span class="line">      R = <span class="keyword">new</span> <span class="title class_">ASum</span>(A, MID, HI);</span><br><span class="line">      L.compute();</span><br><span class="line">      R.compute();</span><br><span class="line">      SUM = L.SUM + R.SUM;</span><br><span class="line">    }</span><br><span class="line">  } <span class="comment">// compute()</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>并行写法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ForkJoinPool;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.RecursiveTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ASum</span> <span class="keyword">extends</span> <span class="title class_">RecursiveTask</span>&lt;Integer&gt; {  <span class="comment">//没有返回值的继承RecursiveAction，比如对数组排序</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">seqThreshold</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span>[] array;</span><br><span class="line">    <span class="type">int</span> lo, hi;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ASum</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> low, <span class="type">int</span> high)</span> {</span><br><span class="line">        <span class="built_in">this</span>.array = array;</span><br><span class="line">        <span class="built_in">this</span>.lo = low;</span><br><span class="line">        <span class="built_in">this</span>.hi = high;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Integer <span class="title function_">compute</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ((hi - lo) &lt;= seqThreshold) {  <span class="comment">//不再切分为子任务</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> lo; i &lt; hi; i++)</span><br><span class="line">                res += array[i];</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (lo + hi) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">ASum</span> <span class="variable">L</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ASum</span>(array, lo, mid);</span><br><span class="line">            <span class="type">ASum</span> <span class="variable">R</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ASum</span>(array, mid, hi);</span><br><span class="line">            <span class="comment">// L.fork();</span></span><br><span class="line">            <span class="comment">// R.fork();</span></span><br><span class="line">            invokeAll(L, R);  <span class="comment">//和上面的两句等价</span></span><br><span class="line">            res += L.join() + R.join();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sumOfInts</span><span class="params">(ForkJoinPool pool, <span class="type">int</span>[] array)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> array.length;</span><br><span class="line">        <span class="type">ASum</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ASum</span>(array, <span class="number">0</span>, n);</span><br><span class="line">        <span class="keyword">return</span> pool.invoke(a);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> {</span><br><span class="line">        <span class="type">int</span>[] nums = { <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> };</span><br><span class="line">        <span class="type">ForkJoinPool</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinPool</span>();</span><br><span class="line">        System.out.println(sumOfInts(pool, nums));</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Computation-Graphs-Work-Span"><a href="#Computation-Graphs-Work-Span" class="headerlink" title="Computation Graphs, Work, Span"></a>Computation Graphs, Work, Span</h3><h4 id="Computation-Graphs"><a href="#Computation-Graphs" class="headerlink" title="Computation Graphs"></a>Computation Graphs</h4><p>Computation Graphs (CGs) model the execution of a parallel program as a <a href="http://en.wikipedia.org/wiki/Partially_ordered_set">partially ordered set</a>.</p><p>A CG consist of:</p><ul><li>A set of <em>vertices</em> or <em>nodes</em>, in which each node represents a <em>step</em> consisting of an <strong>arbitrary sequential computation</strong>.</li><li>A set of <em>directed</em> <em>edges</em> that represent <strong>ordering constraints</strong> among steps.</li></ul><p>对于fork-join框架，可以将这些有向边分为三类：</p><ul><li><em>Continue</em> edges，连接任务中顺序执行的步骤</li><li>Fork edges，将fork操作连接到子任务的第一个步骤</li><li>join edges connect the last step of a task to all <em>join</em> operations on that task</li></ul><p>一个小例子</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">S1</span><br><span class="line">fork S2</span><br><span class="line">S3</span><br><span class="line">join S2  <span class="comment">// 这里join S2发生在S4之前</span></span><br><span class="line">S4</span><br><span class="line"><span class="comment">// S5 如果有的话，连接到S4之后</span></span><br></pre></td></tr></tbody></table></figure><p>对应的CG为</p><img src="/2020/01/08/Task%20Parallelism/image-20200108094903279.png" class=""><h4 id="CGs上的data-race"><a href="#CGs上的data-race" class="headerlink" title="CGs上的data race"></a>CGs上的data race</h4><p>没有边连接的两个节点同时写或者读写相同的位置时发生data race</p><h4 id="CGs上的理想并行程度-（ideal-parallelism）"><a href="#CGs上的理想并行程度-（ideal-parallelism）" class="headerlink" title="CGs上的理想并行程度 （ideal parallelism）"></a>CGs上的理想并行程度 （<em>ideal parallelism</em>）</h4><p>与计算机的实际并行性无关<br>$$<br>ideal,parallelism = \frac{WORK(G)}{SPAN(G)} \tag{1}<br>$$</p><p>其中：</p><ul><li>WORK(G)为G中所有节点执行时间之和</li><li>SPAN(G)为G中关键路径上节点的执行时间之和，上例中SPAN(G)为 <strong>max((S1,S3,S4), (S1,S2,S4))</strong></li></ul><h3 id="Multiprocessor-Scheduling-Parallel-Speedup"><a href="#Multiprocessor-Scheduling-Parallel-Speedup" class="headerlink" title="Multiprocessor Scheduling, Parallel Speedup"></a>Multiprocessor Scheduling, Parallel Speedup</h3><h4 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h4><p>有P个处理器，每个处理器都相同，每一个节点的执行时间都是固定的（不管在那个处理器上），处理器都是<strong>贪心</strong>地执行任务<br>T_p表示在p个处理器上执行一个CG所花的时间,<br>相同的P个处理器，相同的CG，不同的调度算法也可能对应不同的T_p</p><p>$$<br>T_{\infty} \le T_p \le T_1<br>$$</p><h4 id="Speedup-P"><a href="#Speedup-P" class="headerlink" title="Speedup(P)"></a>Speedup(P)</h4><p>the parallel speedup for a given schedule of a CG on <em>P</em> processors，满足下面：<br>$$<br>Speedup(P) = \frac{T_1}{T_P} \tag{2}<br>$$</p><p>$$<br>Speedup(P) \le P \tag{3}<br>$$</p><p>$$<br>Speedup(P) \le \frac {WORK}{SPAN} \tag{4}<br>$$</p><p>（3）表示P个处理器不能带来P倍的加速</p><p>（4）表示现实骨感，理想丰满</p><h3 id="Amdahl’s-Law"><a href="#Amdahl’s-Law" class="headerlink" title="Amdahl’s Law"></a><strong>Amdahl’s Law</strong></h3><p>if <em>q</em> <em>≤</em> 1 is the fraction of <em>WORK</em> in a parallel program that must be executed <em>sequentially</em>, then the best speedup that can be obtained for that program for any number of processors, <em>P</em> , is <em>Speedup(P)</em> <em>≤</em> 1*/q*.</p><p>例如，如果线性工作占比为0.5，则不管处理器个数再多，有<em>Speedup(P)</em> <em>≤</em> 2</p><p>因为有<br>$$<br>WORK(G)*q \leq SPAN(G) \tag{5}\<br>==&gt;  \frac{WORK(G)}{SPAN(G)} \leq \frac{1}{q}<br>$$<br>上式表示关键路径用时不小于任务中线性部分的用时</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> java </tag>
            
            <tag> 并行编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown显示__init__.py</title>
      <link href="/2019/12/25/Markdown%E6%98%BE%E7%A4%BA__/"/>
      <url>/2019/12/25/Markdown%E6%98%BE%E7%A4%BA__/</url>
      
        <content type="html"><![CDATA[<p>Markdown语法中双下划线 <code>__</code> 和双星 <code>**</code> 都是强调作用<br>python中的 <strong>init</strong>.py就显示成这个样子了 <span class="emoji" alias="unamused" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f612.png?v8">😒</span></p><p>可以使用反引号将其包含，显示效果: <code>__init__.py</code> <span class="emoji" alias="yum" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60b.png?v8">😋</span></p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一次源码阅读</title>
      <link href="/2019/05/12/requests%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
      <url>/2019/05/12/requests%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<img src="/2019/05/12/requests%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/requests%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB.svg" class="" title="记录一次源码阅读">]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> python，读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DevOps for dummies</title>
      <link href="/2019/02/25/devops/"/>
      <url>/2019/02/25/devops/</url>
      
        <content type="html"><![CDATA[<h3 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h3><p>business-driven, people, practice, tools</p><h3 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h3><ul><li>Develop and test against production-like systems </li><li>Deploy with repeatable, reliable processes</li><li>Monitor and validate operational quality</li><li>Amplify feedback loops<span id="more"></span></li></ul><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><img src="/2019/02/25/devops/devops.png" class="" title="devops"><h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><ul><li><p>DevOps isn’t the goal. It helps you reach your goals</p></li><li><p>Any kind of system that needs <strong>rapid</strong> delivery of <strong>innovation</strong> requires DevOps</p></li><li><p>In broad terms, DevOps is an approach based on <strong>lean and agile principles</strong> in which business owners and the development, operations, and quality assurance departments collaborate to deliver software <strong>in a continuous manner</strong> that enables the business to more quickly seize market opportunities and reduce the time to include customer feedback</p></li><li><p>A true DevOps approach includes lines of business, practitioners, executives, partners, suppliers, and so on</p></li><li><p><strong>Continuous testing</strong> is facilitated by adopting capabilities like <strong>automated testing</strong> and <strong>service virtualization</strong></p></li><li><p>software-defined environments enable you to capture infrastructure as a kind of programmable and repeatable pattern, thereby accelerating deployments</p></li><li><p>Collaboration and communication across stakeholders — that’s the culture of DevOps.</p></li><li><p>Giving all stakeholders <strong>visibility</strong> into a project’s goals and status is crucial for building a DevOps culture based on trust and collaboration.</p></li><li><p>Processes define what those people do. Your organization can have a great culture of collaboration, but if people are doing the wrong things or doing the right things in the wrong way, failure is still likely.</p></li><li><p>Adopting continuous delivery typically is the most critical part of adopting DevOps.</p></li><li><p>From a process perspective, you need to adopt processes in three areas to enable <strong>continuous testing</strong>:</p><p>✓ Test environment provisioning and configuration</p><p>✓ Test data management</p><p>✓ Test integration, function, performance, and security</p></li><li><p>If an organization is building or maintaining multiple applications, everything it does has to be repeatable, in a reliable manner, to ensure quality across all applications</p></li><li><p>Start by focusing on the critical parts of organization — not everything all at once — and then gradually broaden to include all stages</p></li><li><p>The build stage is where the code is compiled to create and unit test the binaries to be deployed. Multiple build tools may be used in this stage, based on cross-platform and cross-technology needs</p></li><li><p>Development organizations typically use <strong>build servers</strong> to facilitate the large number of builds required on an ongoing basis to enable continuous integration</p></li><li><p>For any organization that wants to enable <strong>continuous testing</strong>, <strong>managing test data</strong> is an essential function</p></li><li><p>end-to-end Develop/Test environments =  cloud environments + deployment automation + service virtualization</p></li><li><p>Cloud without DevOps means not leveraging all the benefits of cloud</p></li><li><p>When adopting cloud, you first want to decide on the scope of responsibility that you plan to hand over to the cloud platform and what responsibility you want to take on yourself</p></li><li><p>two primary service models for cloud: Infrastructure as a Service (<strong>IaaS</strong>) and Platform as a Service (<strong>PaaS</strong>)</p></li><li><p>treats infrastructure as code best practices：</p><ul><li>Treat pattern definitions, script packages, and services as code</li><li>version everything</li><li>Automate deployment of topology patterns to the cloud</li><li>Manage versions of patterns across multiple cloud environments</li><li>Automate the testing of patterns</li><li>Cleanup catalog resources to avoid sprawl</li></ul></li><li><p>Ten DevOps myths:</p><ul><li>DevOps Is Only for “Born on the Web” Shops</li><li>DevOps Is Operations Learning How to Code</li><li>DevOps Is Just for Development and Operations</li><li>DevOps Isn’t for ITIL Shops</li><li>DevOps Isn’t for Regulated Industries</li><li>DevOps Isn’t for Outsourced Development</li><li>No Cloud Means No DevOps</li><li>DevOps Isn’t for Large, Complex Systems</li><li>DevOps Is Only about Communication</li><li>DevOps Means Continuous Change Deployment</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异步网络编程</title>
      <link href="/2018/11/25/python%E5%BC%82%E6%AD%A5/"/>
      <url>/2018/11/25/python%E5%BC%82%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h3><p>协程、生成器</p><h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><ul><li><p>协程：又称作Coroutine。从字面上来理解，即协同运行的例程，它是比是线程（thread）更细量级的用户态线程，特点是允许用户的主动调用和主动退出，挂起当前的例程然后返回值或去执行其他任务，接着返回到原来停下的点继续执行</p></li><li><p>有时间再写。。。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>遍历二叉树</title>
      <link href="/2018/06/19/%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2018/06/19/%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p><span class="emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span>非递归实现</p><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inorderTraversal</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        cur = root  <span class="comment">#借助临时的cur，不要修改root</span></span><br><span class="line">        res = []</span><br><span class="line">        stack = []</span><br><span class="line">        <span class="keyword">while</span> cur <span class="keyword">or</span> stack:</span><br><span class="line">            <span class="keyword">if</span> cur:  <span class="comment"># 一直往左走，全部入栈</span></span><br><span class="line">                stack.append(cur) </span><br><span class="line">                cur = cur.left</span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># 取出栈顶节点，处理，再处理该节点的右子树   </span></span><br><span class="line">                cur = stack.pop()</span><br><span class="line">                res.append(cur.val)  </span><br><span class="line">                cur = cur.right</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></tbody></table></figure><h3 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h3><p>写法一</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">preorderTraversal</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        cur = root</span><br><span class="line">        res = []</span><br><span class="line">        stack = []</span><br><span class="line">        <span class="keyword">while</span> cur <span class="keyword">or</span> stack:</span><br><span class="line">            <span class="keyword">if</span> cur:</span><br><span class="line">                stack.append(cur)  <span class="comment"># 每一个节点都放入栈中</span></span><br><span class="line">                res.append(cur.val)</span><br><span class="line">                cur = cur.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur = stack.pop()  <span class="comment"># 这里pop出来的是已经访问过的节点</span></span><br><span class="line">                cur = cur.right  <span class="comment"># 还需要指向右子树</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></tbody></table></figure><p><span class="emoji" alias="heart" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2764.png?v8">❤</span>写法二：<span id="more"></span></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">preorderTraversal</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        cur = root</span><br><span class="line">        res = []</span><br><span class="line">        stack = []</span><br><span class="line">        <span class="keyword">while</span> cur <span class="keyword">or</span> stack:</span><br><span class="line">            <span class="keyword">if</span> cur:</span><br><span class="line">                stack.append(cur.right)  <span class="comment"># 栈中直接放入已访问节点的右子树</span></span><br><span class="line">                res.append(cur.val)</span><br><span class="line">                cur = cur.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur = stack.pop()  <span class="comment"># 取到的就是右子树根节点</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></tbody></table></figure><p> <span class="emoji" alias="neutral_face" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f610.png?v8">😐</span>写法三：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">preorderTraversal</span>(<span class="params">self, root</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        stack, output = [root], []</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            root = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> root <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                output.append(root.val)</span><br><span class="line">                <span class="keyword">if</span> root.right <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:  <span class="comment">#右子树先入栈，左子树后入栈</span></span><br><span class="line">                    stack.append(root.right)</span><br><span class="line">                <span class="keyword">if</span> root.left <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    stack.append(root.left)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> output</span><br></pre></td></tr></tbody></table></figure><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><p><a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/">https://leetcode-cn.com/problems/binary-tree-postorder-traversal/</a></p><p>对于当前节点，只有其<strong>右子树已经处理</strong>或<strong>没有右子树</strong>时，才能处理它。</p><p><span class="emoji" alias="eyes" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f440.png?v8">👀</span>这里要记录一个last_visited节点​​</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">postorderTraversal</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        cur = root</span><br><span class="line">        res = []</span><br><span class="line">        stack = []</span><br><span class="line">        last_visited = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> cur <span class="keyword">or</span> stack:</span><br><span class="line">            <span class="keyword">if</span> cur:</span><br><span class="line">                stack.append(cur)</span><br><span class="line">                cur = cur.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tmp = stack[-<span class="number">1</span>]  <span class="comment"># 定位根节点，这个地方不能pop(),因为可能有右子树</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> tmp.right <span class="keyword">or</span> tmp.right == last_visited:  </span><br><span class="line">                    <span class="comment"># 没有右子树或者已经访问过了，处理当前根节点</span></span><br><span class="line">                    res.append(tmp.val)</span><br><span class="line">                    last_visited = tmp</span><br><span class="line">                    stack.pop()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    cur = tmp.right  <span class="comment"># 右子树未访问，处理右子树</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></tbody></table></figure><p><span class="emoji" alias="heart" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2764.png?v8">❤</span>后序遍历可以借前序遍历的一个变体实现，<strong>先根右左,再倒置</strong>。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">preorderTraversal</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        cur = root</span><br><span class="line">        res = []</span><br><span class="line">        stack = []</span><br><span class="line">        <span class="keyword">while</span> cur <span class="keyword">or</span> stack:</span><br><span class="line">            <span class="keyword">if</span> cur:</span><br><span class="line">                stack.append(cur.left)  <span class="comment"># 栈中直接放入已访问节点的左子树</span></span><br><span class="line">                res.append(cur.val)</span><br><span class="line">                cur = cur.right</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur = stack.pop()  <span class="comment"># 取到的就是左子树根节点</span></span><br><span class="line">        <span class="keyword">return</span> res[::-<span class="number">1</span>]</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记，二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>word2vec + manage experiments</title>
      <link href="/2018/04/05/%E8%AF%8D%E5%90%91%E9%87%8F/"/>
      <url>/2018/04/05/%E8%AF%8D%E5%90%91%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<p>关键词：model base, variable sharing, model sharing</p><h4 id="word2vec"><a href="#word2vec" class="headerlink" title="word2vec"></a>word2vec</h4><ul><li>文本的分布式表示是许多自然语言处理任务的基础</li><li>word2vec是用来生成词语分布式表示的一组模型</li><li>主要有两种模型：skip-gram和CBOW</li><li>算法角度：CBOW模型从上下文词预测目标词，skip-gram模型从目标词预测上下文词<span id="more"></span></li><li>统计角度：CBOW模型将an entire context as one observation，这样做smoothes over了许多分布信息，适合小一些的数据集上；skip-gram模型则是将<strong>each</strong> context-target pair as a new observation，在larger datasets上表现更好</li><li>训练词向量：定义一个单层网络，任务是给定中心词预测词典中的词作为上下文词的概率，我们最后要的是隐含层的权重参数</li><li>使用 softmax 来获得可能的目标词的分布，分母要对字典中的所有词取指数再求和，计算是瓶颈</li><li>规避瓶颈的方法：层次化的softmax 和基于采样的 softmax </li><li>文章**Distributed Representations of Words and Phrases and their Compositionality **指出，训练skip-gram模型时，与更复杂的分层softmax相比，负采样可以加快训练速度，为频繁词汇提供更好的向量表示</li><li>负采样实际上是一种称为噪声对比估计（NCE）的简化模型，基于假设，如噪声样本的数量k和噪声样本的分布Q满足kQ(w) = 1，来简化计算；理论上不能保证其导数和softmax梯度一致</li><li>NCE则随着noise样本增多，提供了这种保证</li><li>负采样和NCE只在训练时有用</li></ul><h4 id="Implementing"><a href="#Implementing" class="headerlink" title="Implementing"></a>Implementing</h4><ul><li>词的indices作为输入（一个scalar），</li><li>BATCH_SIZE的样本，输入维度为[BATCH_SIZE]，输出维度为[BATCH_SIZE,1]</li><li>词向量矩阵维度为[VOCAB_SIZE,EMBED_SIZE]，每一行代表一个词向量</li><li>利用tf.nn.embedding_lookup()找中心词对应的向量，免去了不必要的计算（matrix and onehot vector）</li><li>loss使用tf.nn.nce_loss()，optimizer使用GradientDescentOptimizer</li></ul><h4 id="Structure-TF-models"><a href="#Structure-TF-models" class="headerlink" title="Structure TF models"></a>Structure TF models</h4><p>定义图</p><ul><li>导入数据（placeholder or tf.data）</li><li>定义权重</li><li>定义模型</li><li>定义损失函数</li><li>定义优化器</li></ul><p>执行图</p><ul><li>初始化所有变量</li><li>初始化迭代器或者feed in训练数据</li><li>数据经过模型得到结果</li><li>计算cost</li><li>调整模型参数使得cost最小或者最大</li></ul><p>build model as a class in order to reuse easily.</p><h4 id="Variable-sharing"><a href="#Variable-sharing" class="headerlink" title="Variable sharing"></a>Variable sharing</h4><p>Name scope</p><p>将相关的ops放在一个name_scope下，这样得到的图在TensorBoard上是一块一块的，更加整洁。<br>TensorBoard图中三种边：</p><ol><li>灰实边：数据流</li><li>橙实边：参考边，op_lest影响op_right</li><li>灰虚边：控制依赖边，op_left依赖于op_right</li></ol><p>Variable scope</p><p>和Name scope一样都创建了namespace，调用tf.variable_scope(“name”)会隐式地调用tf.name_scope(“name”)，Variable scope主要功能是促进变量共享（facilitate variable sharing)<br>为实现变量共享:</p><ol><li>使用 <strong>tf.get_variable()</strong>,它会在创建变量之前检查其是否存在</li><li>将所用到的变量放到一个VarScope，将这个VarScope设置为可复用的（reusable）</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fully_connected</span>(<span class="params">x,output_dim,scope_name</span>): <span class="comment">#  基础组件：全连接层</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(scope_name):</span><br><span class="line">        w = tf.get_variable(<span class="string">"weights"</span>,[x.shape[<span class="number">1</span>],output_dim],initializer=tf.random_normal_initializer())</span><br><span class="line">        b = tf.get_variable(<span class="string">"bias"</span>,[output_dim],initializer= tf.constant_initializer(<span class="number">0.0</span>))</span><br><span class="line">        <span class="keyword">return</span> tf.matmul(x,w) + b</span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">two_hidden_layer</span>(<span class="params">x</span>):  <span class="comment">#网络结构：两个全连接层</span></span><br><span class="line">    h1 = fully_connected(x,<span class="number">50</span>,<span class="string">'h1'</span>)</span><br><span class="line">    h2 = fully_connected(h1,<span class="number">10</span>,<span class="string">'h2'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> tf.variable_scope(<span class="string">'two_layers'</span>) <span class="keyword">as</span> scope: <span class="comment">#调用网络，输入x1，x2</span></span><br><span class="line">    logits1 = two_hidden_layer(x1)</span><br><span class="line">    scope.reuse_variables()</span><br><span class="line">    logits2 = two_hidden_layer(x2）</span><br></pre></td></tr></tbody></table></figure><p>以上代码模式，基础组件可以定义更多，比如conv，relu，网络结构可以更复杂，比如放一个ResNet，非常容易scale。<br>由于使用了变量共享，多次传入x，网络TensorBoard图的复杂程度不会爆炸式增加。</p><p>Graph collections</p><p>使用这个，可以获取满足一定条件的所有变量，tf.get_collection(key,scope=None)<br>比如执行optimizer的时候，默认情况下它会获取key=tf.GraphKeys.TRAINABLE_VARIABLES的变量，即所有可训练的变量（当然也可以传入指定的、要训练的变量<br>获取某个scope下的所有变量，tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES,scope=’scope_name’)<br>key还有许多其它的值，见官网。</p><h4 id="Manage-experiments"><a href="#Manage-experiments" class="headerlink" title="Manage experiments"></a>Manage experiments</h4><p>实验总是很久，中断随时发生，因此训练可以随时随地停止、像没事一样恢复，非常重要。<br>另外一个问题是论文结果复现，控制实验的随机因子对复现结果非常关键。</p><p>tf.train.Saver()</p><p><strong>周期性地保存模型参数</strong>是个好习惯<br>tf.train.Saver()类将图的<strong>变量保存</strong>（不是整张图）到二进制文件，也就是一个checkpoint（变量名到tensors的映射）</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义模型</span></span><br><span class="line">...</span><br><span class="line">global_steps = tf.Variable(<span class="number">0</span>, trainable=<span class="literal">False</span>，name=<span class="string">'global_steps'</span>)</span><br><span class="line">optimizer = tf.train.GradientDescentOptimizer(lr).minimize(loss,global_step=global_steps)</span><br><span class="line"><span class="comment">#创建一个saver对象</span></span><br><span class="line">saver = tf.train.Saver()</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动一个会话来执行计算</span></span><br><span class="line"><span class="keyword">with</span> tf.session() <span class="keyword">as</span> sess:</span><br><span class="line">  <span class="keyword">for</span> step <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,training_steps):</span><br><span class="line">        sess.run([optimizer]) <span class="comment">#global_step会在每一步训练后自加1</span></span><br><span class="line">        <span class="keyword">if</span> step%<span class="number">1000</span>==<span class="number">0</span>:</span><br><span class="line">            <span class="comment">#这里传入step也差不多吧...默认保存图中所有变量</span></span><br><span class="line">            saver.save(sess,<span class="string">'checkpoints/model-name'</span>,global_step=global_steps)</span><br></pre></td></tr></tbody></table></figure><p>生成的checkpoint名，像这样，’checkpoints/skip-gram-10000’<br>在恢复模型时可以直接传入checkpoint名（如果有的话</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ckpt = tf.train.get_checkpoint_state(os.path.dirname(<span class="string">'checkpoints/model-name'</span>))</span><br><span class="line"><span class="keyword">if</span> ckpt <span class="keyword">and</span> ckpt.model_checkpoint_path:</span><br><span class="line">    saver.restore(sess,ckpt.model_checkpoint_path) <span class="comment">#恢复的是最近的一个check point</span></span><br></pre></td></tr></tbody></table></figure><p>恢复的时候，网络图还得自己重新搭（still have to create the graph ourselves）之后再加载变量<br>当然，经常的做法是到目前为止表现最好的参数也保存下来（不止是最近的一次）</p><p>tf.summary</p><p>记录模型训练过程中指标变化，包括loss，accuracy等等</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建summaries</span></span><br><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">"summaries"</span>):</span><br><span class="line">    tf.summary.scalar(<span class="string">"loss"</span>,loss)</span><br><span class="line">    tf.summary.histogram(<span class="string">"histogram loss"</span>,loss)</span><br><span class="line">    tf.summary.scalar(<span class="string">"accuracy"</span>,accuracy)</span><br><span class="line">    summary_op = tf.summary.merge_all()</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行summary op</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="keyword">for</span> step <span class="keyword">in</span> <span class="built_in">range</span>(steps):</span><br><span class="line">        _loss,_,summary = sess.run([model.loss,model.optimizer,model.summary_op],feed_dict={...})</span><br><span class="line">        writer = tf.summary.FileWriter(<span class="string">'path'</span>+<span class="built_in">str</span>(lr),sess.graph) <span class="comment">#将lr写入路径，方便tensorboard对比</span></span><br><span class="line">        writer.add(summary,global_step=step) <span class="comment">#记录每一个step的summary</span></span><br><span class="line">    writer.close()</span><br></pre></td></tr></tbody></table></figure><p>control randomization</p><p>为了使得别人在实验时结果会与你一致</p><ol><li><p>op级别<br>所有的tensor初始化时都传入seed参数<br>session记录了随机状态，每一个新的session都会重新start the random state</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c = tf.random_uniform([],-<span class="number">10</span>,<span class="number">10</span>,seed=<span class="number">2</span>)</span><br><span class="line">d = tf.random_uniform([],-<span class="number">10</span>,<span class="number">10</span>,seed=<span class="number">2</span>)</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="built_in">print</span>(sess.run(c)) <span class="comment">#value: a</span></span><br><span class="line">    <span class="built_in">print</span>(sess.run(d)) <span class="comment">#same value: a</span></span><br><span class="line">    <span class="built_in">print</span>(sess.run(c)) <span class="comment">#value: b</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>graph级别<br>比如demo1.py和demo2.py代码相同，设置了tf.set_random_seed(seed)的话执行结果是相同的</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tf.set_random_seed(<span class="number">2</span>)</span><br><span class="line">c = tf.random_uniform([],-<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line">d = tf.random_uniform([],-<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="built_in">print</span>(sess.run(c)) <span class="comment"># 都是a</span></span><br><span class="line">    <span class="built_in">print</span>(sess.run(d)) <span class="comment"># 都是b</span></span><br></pre></td></tr></tbody></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> machine learning </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linear and logistic regression in TensorFlow</title>
      <link href="/2018/03/29/TensorFlow02/"/>
      <url>/2018/03/29/TensorFlow02/</url>
      
        <content type="html"><![CDATA[<h3 id="Linear-Regression"><a href="#Linear-Regression" class="headerlink" title="Linear Regression"></a>Linear Regression</h3><h4 id="问题定义："><a href="#问题定义：" class="headerlink" title="问题定义："></a>问题定义：</h4><p>设X为生育率，Y为预期寿命，能否找到一个线性函数f使得Y = f(X)？</p><img src="/2018/03/29/TensorFlow02/f1.png" class=""><span id="more"></span><p>数据集描述：</p><p>名称: Birth rate - life expectancy in 2010<br>X = 生育率. Type: float.<br>Y = 预期寿命. Type: foat.<br>数据量: 190<br>数据形式: (X,Y)</p><h4 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h4><p><strong>假设</strong>X和Y之间的关系是线性的，这意味着有w和b，满足：Y_pred = wX + b.<br>本例中w，b都是scalar，</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">w = tf.get_variable(<span class="string">'weights'</span>,initializer=tf.constant(<span class="number">0.0</span>))</span><br><span class="line">b = tf.get_variable(<span class="string">'bias'</span>,initializer=tf.constant(<span class="number">0.0</span>))</span><br></pre></td></tr></tbody></table></figure><p>损失函数使用均方误差</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Y_pred = w*X+b</span><br><span class="line">loss = tf.square(Y-Y_pred,name=<span class="string">'loss'</span>)</span><br></pre></td></tr></tbody></table></figure><p>完整代码：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> utils</span><br><span class="line"></span><br><span class="line">DATA_FILE = <span class="string">"data/birth_life_2010.txt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 1: 加载数据，形式为（190，2）的numpy数组，每一行代表一个点</span></span><br><span class="line">data, n_samples = utils.read_birth_life_data(DATA_FILE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 2: 创建placeholders</span></span><br><span class="line">X = tf.placeholder(tf.float32, name=<span class="string">'X'</span>)</span><br><span class="line">Y = tf.placeholder(tf.float32, name=<span class="string">'Y'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 3: 创建变量，初始化为0</span></span><br><span class="line">w = tf.get_variable(<span class="string">'weights'</span>, initializer=tf.constant(<span class="number">0.0</span>))</span><br><span class="line">b = tf.get_variable(<span class="string">'bias'</span>, initializer=tf.constant(<span class="number">0.0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 4: 模型</span></span><br><span class="line">Y_predicted = w * X + b </span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 5: 损失函数</span></span><br><span class="line">loss = tf.square(Y - Y_predicted, name=<span class="string">'loss'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 6: GD最小化loss</span></span><br><span class="line">optimizer = tf.train.GradientDescentOptimizer(learning_rate=<span class="number">0.001</span>).minimize(loss)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">  <span class="comment"># Step 7: 变量初始化</span></span><br><span class="line">  sess.run(tf.global_variables_initializer()) </span><br><span class="line">  </span><br><span class="line">  <span class="comment"># Step 8: 训练100回</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>): <span class="comment"># run 100 epochs</span></span><br><span class="line">    <span class="comment"># 每次传入一个数据点，事实上，使用batches of data更好一点。</span></span><br><span class="line">        <span class="keyword">for</span> x, y <span class="keyword">in</span> data:</span><br><span class="line">      <span class="comment"># Session runs train_op to minimize loss</span></span><br><span class="line">      sess.run(optimizer, feed_dict={X: x, Y:y}) </span><br><span class="line">  </span><br><span class="line">  <span class="comment"># Step 9: output the values of w and b</span></span><br><span class="line">  w_out, b_out = sess.run([w, b]) </span><br></pre></td></tr></tbody></table></figure><p>结论：<br>经过100次训练后，平均损失为30.04，w = -6.07，b = 84.93。<br>这证实了我们的假设，即出生率与一个国家人口的预期寿命之间存在负相关关系。 但是，这并不意味着多一个孩子会减少6年的寿命。</p><h4 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h4><p>假设X和Y满足：Y_pred = wX^2 + uX + b</p><p>只需修改部分代码：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Step 3: 创建变量，初始化为0</span></span><br><span class="line">w = tf.get_variable(<span class="string">'weights_1'</span>, initializer=tf.constant(<span class="number">0.0</span>))</span><br><span class="line">u = tf.get_variable(<span class="string">'weights_2'</span>, initializer=tf.constant(<span class="number">0.0</span>))</span><br><span class="line">b = tf.get_variable(<span class="string">'bias'</span>, initializer=tf.constant(<span class="number">0.0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 4: 模型</span></span><br><span class="line">Y_predicted = w * X * X + X * u + b </span><br></pre></td></tr></tbody></table></figure><p>由于平方损失会给离群点太多的权重，这里损失函数考虑使用Huber loss：</p><img src="/2018/03/29/TensorFlow02/f2.png" class=""><p>tensorflow提供了一些控制流操作：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 具体实现</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">huber_loss</span>(<span class="params">labels, predictions, delta=<span class="number">14.0</span></span>):</span><br><span class="line">    residual = tf.<span class="built_in">abs</span>(labels - predictions)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f1</span>(): <span class="keyword">return</span> <span class="number">0.5</span> * tf.square(residual)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f2</span>(): <span class="keyword">return</span> delta * residual - <span class="number">0.5</span> * tf.square(delta)</span><br><span class="line">    <span class="keyword">return</span> tf.cond(residual &lt; delta, f1, f2)</span><br></pre></td></tr></tbody></table></figure><p>最后结果为：<strong>w: -5.883589, b: 85.124306.</strong></p><h4 id="which-one-is-better？"><a href="#which-one-is-better？" class="headerlink" title="which one is better？"></a>which one is better？</h4><p>we do need test data set！！！</p><h3 id="tf-data"><a href="#tf-data" class="headerlink" title="tf.data"></a>tf.data</h3><p>使用placeholder和feed_dicts的好处是将数据处理与TensorFlow分离，使用python就可以轻松地shuffle, batch, generate arbitrary data. 不好的地方是，数据处理的线程很有可能是瓶颈，使整个程序slow down。</p><p>使用队列也是TF中处理数据的一个选项，队列允许pipelining、threading操作，减少了数据加载到placeholders的时间，但是难以使用且容易崩溃。</p><p>tf.data比placeholder更快，比队列更容易使用，而且不会crash。</p><p>数据存储在一个tf.data.Dataset对象中，而不是一个non-TensorFLow对象（numpy array）</p><h4 id="tf-data基操："><a href="#tf-data基操：" class="headerlink" title="tf.data基操："></a>tf.data基操：</h4><ol><li><p>创建DataSet</p><ol><li><p>从tensor创建</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># features,labels都是tensors，也可以是numpy arrays</span></span><br><span class="line">tf.data.DataSet.from_tensor_slice((features,labels))</span><br></pre></td></tr></tbody></table></figure></li><li><p>从file创建</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件每一行代表一个数据，例如csv文件</span></span><br><span class="line">tf.data.TextLineDataset(filenames)</span><br><span class="line"><span class="comment"># 每一个文件长度都固定，比如都是28*28的图片</span></span><br><span class="line">tf.data.FixedLengthRecordDataset([file1,file2,file3,file4,...])</span><br><span class="line"><span class="comment"># tfrecord格式，（还没用过</span></span><br><span class="line">tf.data.TFRecordDataset(filenames)</span><br></pre></td></tr></tbody></table></figure></li></ol></li><li><p>创建Iterator</p><p>取dataset中的数据需要用到迭代器</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只能遍历一遍</span></span><br><span class="line">iterator = dataset.make_one_shot_iterator()</span><br><span class="line"><span class="comment"># 多次初始化，多次遍历</span></span><br><span class="line">iterator = dataset.make_initializable_iterator()</span><br><span class="line"><span class="comment"># 返回一个或者一组样本</span></span><br><span class="line">iterator.get_next() </span><br></pre></td></tr></tbody></table></figure></li><li><p>训练</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">iterator = dataset.make_initializable_iterator()</span><br><span class="line">...</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>): </span><br><span class="line">        <span class="comment"># 每一个epoch都要初始化iterator</span></span><br><span class="line">        sess.run(iterator.initializer) </span><br><span class="line">        total_loss = <span class="number">0</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                sess.run([optimizer]) </span><br><span class="line">        <span class="keyword">except</span> tf.errors.OutOfRangeError:</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h4 id="其它操作"><a href="#其它操作" class="headerlink" title="其它操作"></a>其它操作</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#简单的命令操作dataset</span></span><br><span class="line">dataset = dataset.shuffle(<span class="number">1000</span>)</span><br><span class="line">dataset = dataset.repeat(<span class="number">100</span>)</span><br><span class="line">dataset = dataset.batch(<span class="number">128</span>)</span><br><span class="line">dataset = dataset.<span class="built_in">map</span>(<span class="keyword">lambda</span> x: tf.one_hot(x, <span class="number">10</span>)) </span><br><span class="line"><span class="comment"># convert each element of dataset to one_hot vector</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Logistic-Regression-with-MINIST"><a href="#Logistic-Regression-with-MINIST" class="headerlink" title="Logistic Regression with MINIST"></a>Logistic Regression with MINIST</h3><h4 id="一个问题："><a href="#一个问题：" class="headerlink" title="一个问题："></a>一个问题：</h4><p>这个实验有多个数据集，训练集、验证集和测试集，如果每个数据集都有各自的iterator，那我们就得为每一个iterator创建一个graph。</p><p> 不，可以用一个迭代器，用不同的数据初始化它</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">iterator = tf.data.Iterator.from_structure(train_data.output_types,</span><br><span class="line">                                           train_data.output_shapes)</span><br><span class="line"><span class="comment"># 每一个epoch的训练前，都要sess.run(train_init)</span></span><br><span class="line">train_init = iterator.make_initializer(train_data)</span><br><span class="line">test_init = iterator.make_initializer(test_data)</span><br></pre></td></tr></tbody></table></figure><p><a href="https://github.com/yikayiyo/stanford-tensorflow-tutorials/blob/master/examples/03_logreg.py">完整代码</a>, tensorboard图示如下：</p><img src="/2018/03/29/TensorFlow02/f3.png" class=""><p>下一步，尝试将这个graph改造得有条理一些。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> machine learning </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TensorFlow Ops</title>
      <link href="/2018/03/28/TensorFlow01/"/>
      <url>/2018/03/28/TensorFlow01/</url>
      
        <content type="html"><![CDATA[<h4 id="一般流程："><a href="#一般流程：" class="headerlink" title="一般流程："></a>一般流程：</h4><h4 id="TFboy基操："><a href="#TFboy基操：" class="headerlink" title="TFboy基操："></a>TFboy基操：</h4><ul><li>定义图<span id="more"></span></li><li>创建writer，两种方式<ul><li>tf.get_default_graph()</li><li>sess.graph</li></ul></li><li>创建session执行图</li><li>关闭writer</li><li>TensorBoard可视化</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">a = tf.constant(<span class="number">2</span>, name=<span class="string">'a'</span>)</span><br><span class="line">b = tf.constant(<span class="number">3</span>, name=<span class="string">'b'</span>)</span><br><span class="line">x = tf.add(a, b, name=<span class="string">'add'</span>)</span><br><span class="line"><span class="comment"># 第一种</span></span><br><span class="line">writer = tf.summary.FileWriter(<span class="string">'./graphs/low'</span>, tf.get_default_graph()) </span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="comment"># 第二种</span></span><br><span class="line">    <span class="comment"># writer = tf.summary.FileWriter('./graphs', sess.graph) </span></span><br><span class="line">    <span class="built_in">print</span>(sess.run(x))</span><br><span class="line">writer.close() <span class="comment"># close the writer when you’re done using it</span></span><br></pre></td></tr></tbody></table></figure><p>writer会将图（包含的各种ops）以日志文件的形式写入指定目录，tensorboard可以将这些文件可视化出来</p><p>上面的程序每跑一次就会产生一个日志文件，不用的日志及时删除</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tensorboard --logdir=<span class="string">'./graphs/low'</span> --port=6006</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">注意路径不要搞错</span></span><br></pre></td></tr></tbody></table></figure><img src="/2018/03/28/TensorFlow01/ex1.png" class=""><h4 id="没记住的"><a href="#没记住的" class="headerlink" title="没记住的"></a>没记住的</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tf.fill([<span class="number">2</span>,<span class="number">3</span>],<span class="number">8</span>) ===&gt; [[<span class="number">8</span>,<span class="number">8</span>,<span class="number">8</span>],[<span class="number">8</span>,<span class="number">8</span>,<span class="number">8</span>]]</span><br><span class="line">tf.lin_space(<span class="number">10.0</span>,<span class="number">13.0</span>,<span class="number">4</span>,name=<span class="literal">None</span>) ===&gt;[<span class="number">10.0</span> <span class="number">11.0</span> <span class="number">12.0</span> <span class="number">13.0</span>]</span><br><span class="line"><span class="comment">#各种分布</span></span><br><span class="line">tf.random_normal</span><br><span class="line">...</span><br><span class="line"><span class="comment">#add multiple tensors</span></span><br><span class="line">tf.add_n([a,b,b]) ====&gt; a+b+b</span><br></pre></td></tr></tbody></table></figure><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><h5 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h5><p>训练中需要更新的参数定义为变量</p><p>常量存储在图中，变量则可能在parameter server上</p><p>常量占了很多存储时，加载图会很慢</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># old way</span></span><br><span class="line">tf.Variable(&lt;initial-value&gt;,name=&lt;optional-name&gt;)</span><br><span class="line"><span class="comment"># now</span></span><br><span class="line">tf.get_variable(...)</span><br><span class="line"><span class="comment"># 当initializer时tf.constant时，不需要参数shape</span></span><br><span class="line">s = tf.get_variable(<span class="string">"scalar"</span>, initializer=tf.constant(<span class="number">2</span>)) </span><br><span class="line">m = tf.get_variable(<span class="string">"matrix"</span>, initializer=tf.constant([[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>]]))</span><br><span class="line">W = tf.get_variable(<span class="string">"big_matrix"</span>, shape=(<span class="number">784</span>, <span class="number">10</span>), initializer=tf.zeros_initializer())</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h5 id="变量初始化"><a href="#变量初始化" class="headerlink" title="变量初始化"></a>变量初始化</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#一次性初始化所有变量</span></span><br><span class="line">sess.run(tf.global_variables_initializer())</span><br><span class="line"><span class="comment">#初始化部分变量</span></span><br><span class="line">sess.run(tf.variables_initializer([a, b]))</span><br><span class="line"><span class="comment">#单独初始化</span></span><br><span class="line">sess.run(W.initializer)</span><br><span class="line"><span class="comment">#从文件加载</span></span><br><span class="line">Todo...</span><br></pre></td></tr></tbody></table></figure><h5 id="变量的值"><a href="#变量的值" class="headerlink" title="变量的值"></a>变量的值</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 两种方式</span></span><br><span class="line"><span class="built_in">print</span>(sess.run(W))</span><br><span class="line"><span class="built_in">print</span>(W.<span class="built_in">eval</span>())</span><br></pre></td></tr></tbody></table></figure><h5 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 赋值会完成初始化的工作</span></span><br><span class="line">W.assign(<span class="number">100</span>)</span><br><span class="line"><span class="comment"># 自增自减不会初始化变量</span></span><br><span class="line">W.assign_add(<span class="number">10</span>)</span><br><span class="line">W.assing_sub(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 变量依赖,使用initialized_value()保证用W的值来初始化V</span></span><br><span class="line">V = tf.Variable(W.initialized_value()*<span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure><h4 id="控制依赖"><a href="#控制依赖" class="headerlink" title="控制依赖"></a>控制依赖</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># g has 5 ops: a,b,c,d,e</span></span><br><span class="line"><span class="comment"># 还没用到过</span></span><br><span class="line"><span class="keyword">with</span> g.control_dependencies([a,b,c]):</span><br><span class="line">    <span class="comment"># d,e only run after a,b,c have executed</span></span><br><span class="line">    d = ...</span><br><span class="line">    e = ...</span><br></pre></td></tr></tbody></table></figure><h4 id="数据导入"><a href="#数据导入" class="headerlink" title="数据导入"></a>数据导入</h4><ol><li><p>old way：placeholders and feed_dict</p><p>例如，对于f(x,y) = 2x + y，x y 就是真实值的占位符</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#shape=None 意味着接收任意shape的张量</span></span><br><span class="line">tf.placeholder(dtype,shape=<span class="literal">None</span>,name=<span class="literal">None</span>)</span><br><span class="line"><span class="comment">#any tensors that are feedable can be fed</span></span><br><span class="line">tf.Graph.is_feedable(tensor)</span><br><span class="line"><span class="comment">#feed_dict可以用来测试模型，</span></span><br><span class="line"><span class="comment">#直接传入某些值免去了大量的计算</span></span><br><span class="line">a = tf.add(<span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">b = tf.multiply(a, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="built_in">print</span>(sess.run(b))                                 <span class="comment"># &gt;&gt; 21</span></span><br><span class="line">    <span class="comment"># compute the value of b given the value of a is 15</span></span><br><span class="line">    <span class="built_in">print</span>(sess.run(b, feed_dict={a: <span class="number">15</span>}))              <span class="comment"># &gt;&gt; 45</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>new way: tf.data</p><p>[ ] todo…</p></li></ol><h4 id="lazy-loading"><a href="#lazy-loading" class="headerlink" title="lazy loading"></a>lazy loading</h4><p>需要计算op的时候才创建</p><p>因为训练绝大数情况都要计算多次，所以lazy loading会产生大量的冗余节点</p><p>解决办法：</p><ol><li>尽可能的将ops的定义和计算分开（不要在计算的时候创建op</li><li>当你将相关ops组合在一起（比如，1中的步骤在一个类里面）可以使用python的@property机制确保某些功能只执行一次（!!!有待研究）</li></ol><p>相关博客<a href="http://danijar.com/structuring-your-tensorflow-models/">http://danijar.com/structuring-your-tensorflow-models/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> machine learning </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sparql 笔记</title>
      <link href="/2018/03/26/sparql/"/>
      <url>/2018/03/26/sparql/</url>
      
        <content type="html"><![CDATA[<h3 id="Jumping-Right-In"><a href="#Jumping-Right-In" class="headerlink" title="Jumping Right In"></a>Jumping Right In</h3><ul><li>FROM指定的数据集会被调用SPARQL处理器时指定的数据集覆盖（如果都指定了</li><li>RDF不是数据格式，而是数据模型，它可以选择存储数据文件的语法</li><li>如果我们将数据与其它数据结合起来，那么RDF三元组的主语和谓语都必须属于特定的名称空间，以防止类似名称之间的混淆，于是我们使用URI来表示它们</li><li>当使用完整的URI时，将其放在尖括号中以向处理器显示它是一个URI</li><li>在semantic web开发中，词汇表是一组使用标准格式存储的术语，供人们重复使用</li><li>发现不同来源三元组之间联系的能力是SPARQL的最佳特性之一</li><li>约定：主谓宾分别用?s,?p,?o表示</li><li>只有满足图模式中所有三元组的数据才会被返回<span id="more"></span></li></ul><h3 id="The-Semantic-Web-RDF-and-Linked-Data-and-SPARQL"><a href="#The-Semantic-Web-RDF-and-Linked-Data-and-SPARQL" class="headerlink" title="The Semantic Web,RDF,and Linked Data(and SPARQL)"></a>The Semantic Web,RDF,and Linked Data(and SPARQL)</h3><ul><li>the semantic web isn’t about the query language or about the model—it’s about the data</li><li>RDF中基本的信息单元是三元组</li><li>将RDF作为一串字节保存在磁盘上的技术术语是序列化</li><li>RDFS gives people a way to describe vocabularies. It is itself a vocabulary with a schema whose triples declare facts.</li><li>Linked Data：<ul><li>Use URIs as names for things.</li><li>Use HTTP URIs so that people can look up those names.</li><li>When someone looks up a URI, provide useful information, using the standards (RDF*, SPARQL).</li><li>Include links to other URIs so that they can discover more things.</li></ul></li></ul><h3 id="SPARQL-Queries"><a href="#SPARQL-Queries" class="headerlink" title="SPARQL Queries"></a>SPARQL Queries</h3><p>介绍SPARQL查询语言更多更有用的特征</p><h4 id="More-Readable-Query-Results"><a href="#More-Readable-Query-Results" class="headerlink" title="More Readable Query Results"></a>More Readable Query Results</h4><ul><li><strong>分号</strong>表示接下来的谓语-宾语对与之前的共有一个主语  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ?<span class="keyword">first</span> ?<span class="keyword">last</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">{</span><br><span class="line">  ?person ab:firstName ?<span class="keyword">first</span>;</span><br><span class="line">          ab:lastName  ?last.</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li>使用那些可读性强的属性，比如标签、描述等等（字符串，而不是URI</li><li><strong>rdfs:label</strong> 是第一个应该注意的属性，别的，<strong>rdfs:comment</strong>,<strong>skos:prefLabel</strong>（首选标签）,<strong>skos:altLabel</strong>（备选标签）</li><li>给定的资源并不总必须是主语、谓语或者宾语，在不同的三元组中它可以是不同的（多个）角色</li></ul><h4 id="Data-That-Might-Not-Be-There"><a href="#Data-That-Might-Not-Be-There" class="headerlink" title="Data That Might Not Be There"></a>Data That Might Not Be There</h4><ul><li>将triple pattern放入到OPTIONAL graph patterns中，表示“如果有的话，检索该值”</li><li>OPTIONAL{t1.t2.t3}包含三个三元组，这些三元组需要同时满足</li><li>OPTIONAL{t1} OPTIONAL{t2} OPTIONAL{t3}则是三个独立的条件</li><li>OPTIONAL graph patterns的顺序很重要  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 优先使用nick作为?<span class="keyword">first</span></span><br><span class="line"><span class="keyword">SELECT</span> ?<span class="keyword">first</span> ?<span class="keyword">last</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">{</span><br><span class="line">    ?s ab:lastName ?last.</span><br><span class="line">    OPTIONAL {?s ab:nick ?<span class="keyword">first</span>}</span><br><span class="line">    OPTIONAL {?s ab:firstName ?<span class="keyword">first</span>}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="Finding-Data-That-Doesn’t-Meet-Certain-Conditions"><a href="#Finding-Data-That-Doesn’t-Meet-Certain-Conditions" class="headerlink" title="Finding Data That Doesn’t Meet Certain Conditions"></a>Finding Data That Doesn’t Meet Certain Conditions</h4><ul><li>SPARQL1.0  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 利用<span class="keyword">FILTER</span>和bound，?v没有绑定值时返回<span class="literal">true</span>，然后输出</span><br><span class="line">OPTIONAL {?s ?p ?v}</span><br><span class="line"><span class="keyword">FILTER</span>(<span class="operator">!</span>bound(?v))</span><br></pre></td></tr></tbody></table></figure></li><li>SPARQL1.1  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 当指定的<span class="keyword">pattern</span>不存在时返回ture</span><br><span class="line"><span class="keyword">NOT</span> <span class="keyword">EXISTS</span> {?s ?p ?v}</span><br></pre></td></tr></tbody></table></figure>  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#另一种方式，减去满足<span class="keyword">pattern</span>的资源（多数情况下表现相同</span><br><span class="line">MINUS {?s ?p ?v}</span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="Serching-Futher-In-The-Data"><a href="#Serching-Futher-In-The-Data" class="headerlink" title="Serching Futher In The Data"></a>Serching Futher In The Data</h4><ul><li>RDF三元组中的对象可以是字符串或者URI，字符串值更易读，但是<strong>URI使得将该数据和其它数据链接起来更加容易</strong></li><li>如果一个数据集中资源的URI可以和另一个数据集中的URI对应起来，哪怕数据集来自不同的地方，不清楚组织形式，也可以利用SPARQL查询到更多的信息</li><li><strong>逗号</strong>表示“接下来的三元组主语谓语和前一个三元组的相同”</li><li>利用属性路径（property paths）：  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 借助正则表达式的符号<span class="operator">+</span>（<span class="keyword">one</span> <span class="keyword">or</span> more）,返回直接引用、间接引用了A的论文</span><br><span class="line"><span class="keyword">SELECT</span> ?s </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">{?s c:cites<span class="operator">+</span> :paperA.}</span><br><span class="line"># 指定引用层数</span><br><span class="line">#{?s c:cites{<span class="number">3</span>} :paperA.}</span><br><span class="line">#相同效果</span><br><span class="line">#{?s c:cites<span class="operator">/</span>c:cites<span class="operator">/</span>c:cites :paperA.}</span><br><span class="line">#<span class="operator">^</span>表示取相反,返回A引用的文章</span><br><span class="line">#{?s <span class="operator">^</span>c:cites :paperA.}</span><br><span class="line"># <span class="operator">^</span>结合property path的例子：引用了F引用的文章的文章</span><br><span class="line">#{</span><br><span class="line">#    ?s c:cites<span class="operator">/</span><span class="operator">^</span>c:cites :paperF .</span><br><span class="line">#    <span class="keyword">FILTER</span>(?s <span class="operator">!=</span> :paperF)</span><br><span class="line">#}</span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="Searching-With-Blank-Nodes"><a href="#Searching-With-Blank-Nodes" class="headerlink" title="Searching With Blank Nodes"></a>Searching With Blank Nodes</h4><ul><li>空白节点的任何名称都是临时的，通常会给一个变量名</li><li>过渡的东西，用来链接三元组</li><li>最终的select列表中一般不包含空白节点</li></ul><h4 id="Eliminating-Redundant-Output"><a href="#Eliminating-Redundant-Output" class="headerlink" title="Eliminating Redundant Output"></a>Eliminating Redundant Output</h4><ul><li>DISTINCT关键字</li><li>DISTINCT关键字不会增加查询结构的复杂性（就是在SELECT内容前面加个DISTINCT</li></ul><h4 id="Combining-Different-Search-Conditions"><a href="#Combining-Different-Search-Conditions" class="headerlink" title="Combining Different Search Conditions"></a>Combining Different Search Conditions</h4><ul><li>UNION关键字：指定多个graph patterns，返回满足任意一个pattern的数据的组合(a combination of all the data that fits any of those patterns) </li><li>有些SPARQL处理器在其返回结果中使用声明的前缀，使得结果可读性更强</li></ul><h4 id="Filtering-Data-Based-On-Conditions"><a href="#Filtering-Data-Based-On-Conditions" class="headerlink" title="Filtering Data Based On Conditions"></a>Filtering Data Based On Conditions</h4><ul><li>FILTER() 只有一个参数，表达式只要返回的是布尔值就可以作为参数</li><li>RDF解析器读入输入数据时，它将这些前缀映射到适当的名称空间URIs，然后将数据交给查询处理器</li><li>!isURI(?city): 如果?city不是一个正常的URI，返回true</li><li>IN关键字：查询某个变量属于列表的三元组（前面加NOT可以表示相反的意思  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ask <span class="keyword">for</span> data <span class="keyword">where</span> the ?v <span class="keyword">is</span> either A <span class="keyword">or</span> B</span><br><span class="line"><span class="keyword">FILTER</span>(?v <span class="keyword">IN</span> (A,B))</span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="Retrieving-A-Specific-Number-Of-Results"><a href="#Retrieving-A-Specific-Number-Of-Results" class="headerlink" title="Retrieving A Specific Number Of Results"></a>Retrieving A Specific Number Of Results</h4><ul><li>LIMIT关键字</li><li>放在花括号外面</li><li>OFFSET关键字:跳过几个结果</li></ul><h4 id="Querying-Named-Graphs"><a href="#Querying-Named-Graphs" class="headerlink" title="Querying Named Graphs"></a>Querying Named Graphs</h4><ul><li>命名图(named graph)：为三元组集合命名，方便管理（进行替换之类的操作</li><li>查询的数据集可以在查询内部用FROM指定，也可以在外部在ARQ命令行中指定，后者会覆盖前者  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span><span class="operator">&lt;</span>xx.ttl<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">FROM</span><span class="operator">&lt;</span>yy.ttl<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">{...}</span><br></pre></td></tr></tbody></table></figure></li><li>指定的查询数据集构成了默认图(default graph)，它不属于任何命名图</li><li>FROM NAMED :表示数据集不会被加入到默认图，查询时需要指定其graph name（ARQ的约定是将URI作为其name），第六章会有SPARQL1.1标准的相关内容  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ?lname ?courseName</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>ex069.ttl<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">FROM</span> NAMED <span class="operator">&lt;</span>ex125.ttl<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">FROM</span> NAMED <span class="operator">&lt;</span>ex122.ttl<span class="operator">&gt;</span> # 即使这里写了，如果在查询中没有指定（GRAPH <span class="operator">&lt;</span>ex125.ttl<span class="operator">&gt;</span>），其数据不会被用来检索</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">{</span><br><span class="line">    { ?student ab:lastName ?lname }</span><br><span class="line">    <span class="keyword">UNION</span></span><br><span class="line">    { GRAPH <span class="operator">&lt;</span>ex125.ttl<span class="operator">&gt;</span> { ?course ab:courseTitle ?courseName } }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li>GRAPH关键字：查询中使用这个关键字表明引用特定命名图中的数据</li><li>GRAPH后面也可以跟变量，让SPARQL处理器寻找满足某个模式的图  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#这里只设置了特定的命名图来查询，如果存在默认图，则没有任何返回结果</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> NAMED <span class="operator">&lt;</span>yyy.ttl<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">FROM</span> NAMED <span class="operator">&lt;</span>xxx.ttl<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">{GRAPH ?g(?s ?p ?o)}</span><br></pre></td></tr></tbody></table></figure></li><li>SPARQL处理器有一些预定义的命名图，当你在GRAPH中指定时不需要事先标识  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ?graph ?email </span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>ex134.ttl<span class="operator">&gt;</span> </span><br><span class="line"><span class="keyword">FROM</span> NAMED <span class="operator">&lt;</span>ex125.ttl<span class="operator">&gt;</span> </span><br><span class="line"><span class="keyword">FROM</span> NAMED <span class="operator">&lt;</span>ex122.ttl<span class="operator">&gt;</span> </span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">{</span><br><span class="line">    ?graph dc:<span class="type">date</span> "2011-09-24" . </span><br><span class="line">    { GRAPH ?graph { ?s ab:email ?email } }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="Queries-In-Your-Queries"><a href="#Queries-In-Your-Queries" class="headerlink" title="Queries In Your Queries"></a>Queries In Your Queries</h4><ul><li>子查询特征：可以将复杂的查询细分，又可以将来自不同查询的结果合并</li><li>每个子查询必须放到自己的花括号中</li></ul><h4 id="Combining-Values-And-Assigning-Values-To-Variables"><a href="#Combining-Values-And-Assigning-Values-To-Variables" class="headerlink" title="Combining Values And Assigning Values To Variables"></a>Combining Values And Assigning Values To Variables</h4><ul><li>sparql查询出来的值可以用于数学运算，函数调用</li><li>BIND关键字  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#数学运算的例子</span><br><span class="line">#这里利用amount创建了变量tip和total</span><br><span class="line"><span class="keyword">SELECT</span> ?description </span><br><span class="line">?amount </span><br><span class="line">((?amount <span class="operator">*</span> <span class="number">.2</span>) <span class="keyword">AS</span> ?tip) </span><br><span class="line">((?amount <span class="operator">+</span> ?tip) <span class="keyword">AS</span> ?total)</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">{</span><br><span class="line">    ?meal e:description ?description ;</span><br><span class="line">          e:amount ?amount .</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#函数调用的例子</span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">(UCASE(SUBSTR(?description,<span class="number">1</span>,<span class="number">3</span>))<span class="keyword">as</span> ?mealCode) </span><br><span class="line">?amount </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">{</span><br><span class="line">    ?meal e:description ?description ;</span><br><span class="line">          e:amount ?amount .</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#改进,expression calculation moved <span class="keyword">to</span> a subquery,利用BIND关键字为变量赋值</span><br><span class="line"><span class="keyword">SELECT</span> ?mealCode ?amount</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">{</span><br><span class="line">    ?meal e:description ?description ;</span><br><span class="line">          e:amount ?amount .</span><br><span class="line">    BIND (UCASE(SUBSTR(?description,<span class="number">1</span>,<span class="number">3</span>)) <span class="keyword">as</span> ?mealCode)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="Sorting-Aggregating-Finding-The-Biggest-And-Smallest-And…"><a href="#Sorting-Aggregating-Finding-The-Biggest-And-Smallest-And…" class="headerlink" title="Sorting, Aggregating, Finding The Biggest And Smallest And…"></a>Sorting, Aggregating, Finding The Biggest And Smallest And…</h4><ul><li>SPARQL使用<strong>ORDER BY</strong>来排序（默认从小到大）.  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 根据amount排序</span><br><span class="line"><span class="keyword">SELECT</span> ?description ?<span class="type">date</span> ?amount</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">{</span><br><span class="line">    ?meal e:description ?description ;</span><br><span class="line">    e:<span class="type">date</span> ?<span class="type">date</span> ;</span><br><span class="line">    e:amount ?amount .</span><br><span class="line">}</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ?amount</span><br></pre></td></tr></tbody></table></figure></li><li>从大到小排序：利用DESC()，括号里面是排序用的指标  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#根据amount从大到小排序</span><br><span class="line"><span class="keyword">SELECT</span> ?description ?<span class="type">date</span> ?amount </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">{</span><br><span class="line">    ?meal e:description ?description ;</span><br><span class="line">        e:<span class="type">date</span> ?<span class="type">date</span> ;</span><br><span class="line">        e:amount ?amount .</span><br><span class="line">}</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">DESC</span>(?amount)</span><br></pre></td></tr></tbody></table></figure></li><li>多条件排序，各个条件空格隔开  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 先根据description排序（字母表），再根据amount从大到小排序</span><br><span class="line"><span class="keyword">SELECT</span> ?description ?<span class="type">date</span> ?amount </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">{</span><br><span class="line">    ?meal e:description ?description ;</span><br><span class="line">        e:<span class="type">date</span> ?<span class="type">date</span> ;</span><br><span class="line">        e:amount ?amount .</span><br><span class="line">}</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ?description <span class="keyword">DESC</span>(?amount)</span><br></pre></td></tr></tbody></table></figure></li><li>找最值<ul><li>sparql1.0: 先排序，然后LIMIT 1</li><li>sparql1.1: MAX(),MIN()</li></ul></li><li>均值：AVG()  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> (<span class="built_in">AVG</span>(?amount) <span class="keyword">as</span> ?avgAmount)</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">{</span><br><span class="line">    ?meal e:amount ?amount .</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li>求和SUM(),计数COUNT()</li><li>GROUP_CONCAT(): 将很多数据绑定到一个变量，默认的分隔符是空格  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 返回一个amountlist，形如“<span class="number">25.05</span>,<span class="number">10.00</span>,<span class="number">6.65</span>,<span class="number">31.45</span>”</span><br><span class="line"><span class="keyword">SELECT</span> (GROUP_CONCAT(?amount;SEPARATOR <span class="operator">=</span> <span class="string">','</span>) <span class="keyword">AS</span> amountlist)</span><br><span class="line"><span class="keyword">WHERE</span> { ?meal e:amount ?amount.} </span><br></pre></td></tr></tbody></table></figure></li><li>GROUP BY: 根据某属性分组；代入SUM()函数可以求和，类似的，可以代入别的函数  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 统计早中晚餐总数</span><br><span class="line"><span class="keyword">SELECT</span> ?description (<span class="built_in">SUM</span>(?amount) <span class="keyword">AS</span> ?meanTotal)</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">{...}</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> ?description</span><br></pre></td></tr></tbody></table></figure></li><li>HAVING 关键字：限定显示出来的结果需要满足的条件  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#我们只对总数超过<span class="number">20</span>的感兴趣</span><br><span class="line"><span class="keyword">SELECT</span> ?description (<span class="built_in">SUM</span>(?amount) <span class="keyword">AS</span> ?meanTotal)</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">{...}</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> ?description</span><br><span class="line"><span class="keyword">HAVING</span> (<span class="built_in">SUM</span>(?amount)<span class="operator">&gt;</span><span class="number">20</span>)</span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="Query-A-Remote-SPARQL-Service"><a href="#Query-A-Remote-SPARQL-Service" class="headerlink" title="Query A Remote SPARQL Service"></a>Query A Remote SPARQL Service</h4><ul><li>查询远程sparql服务<ul><li>FROM 关键字(RDF file)  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ?title</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>xxx:<span class="operator">/</span><span class="operator">/</span>xxx.xxx.xxxx<span class="operator">/</span>xxx<span class="operator">&gt;</span></span><br><span class="line">{?s dc:title ?title}</span><br></pre></td></tr></tbody></table></figure></li><li>SERVICE 关键字(SPARQL endpoint)  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 在SPAERQL endpoint运行查询得到一些内容，再进行检索返回结果</span><br><span class="line"><span class="keyword">SELECT</span> ?p ?o</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">{</span><br><span class="line">    SERVICE <span class="operator">&lt;</span>xxx:<span class="operator">/</span><span class="operator">/</span>xxx.xxx<span class="operator">/</span>xxx<span class="operator">&gt;</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">SELECT</span> ?p ?o</span><br><span class="line">        <span class="keyword">WHERE</span> {xxx ?p ?o}</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><strong>ARQ 必须指定–data参数，即便查询对数据没有任何操作（上面的查询，其实只是指定了待查询的endpoint，而不是数据</strong></li><li>可以借助<strong>D2RQ</strong>使用SPARQL查询关系数据库（RDB）</li></ul><h4 id="Federated-Queries-Searching-Multiple-Datasets-With-One-Query"><a href="#Federated-Queries-Searching-Multiple-Datasets-With-One-Query" class="headerlink" title="Federated Queries:Searching Multiple Datasets With One Query"></a>Federated Queries:Searching Multiple Datasets With One Query</h4><ul><li>联合查询(Federated Queries):一个query查询多个数据集<ul><li>第一个子查询中绑定的变量，在之后的子查询中依旧可用</li><li>如果数据集之间关系密切，上面的特点就会很有用（用来交叉引用）</li><li>如果一个查询由两个子查询，子查询1返回a个结果，子查询2返回b个结果，那么整体查询就返回a*b个结果（cross-product）</li><li>子查询依次执行，可能会花点时间</li></ul></li></ul><h3 id="Coping-Creating-And-Converting-Data"><a href="#Coping-Creating-And-Converting-Data" class="headerlink" title="Coping,Creating,And Converting Data"></a>Coping,Creating,And Converting Data</h3><p>除了查询出结果还能做更多的事</p><h4 id="Query-Forms-SELECT-DESCRIBE-ASK-and-CONSTRUCT"><a href="#Query-Forms-SELECT-DESCRIBE-ASK-and-CONSTRUCT" class="headerlink" title="Query Forms: SELECT, DESCRIBE, ASK, and CONSTRUCT"></a>Query Forms: SELECT, DESCRIBE, ASK, and CONSTRUCT</h4><ul><li>CONSTRUCT返回三元组；可以返回原数据也可以抽取出值来创建新的三元组；可以用来复制、创建、转换</li><li>ASK询问处理器给定的图模式是否描述特定数据集中的一组三元组，返回一个布尔值；可以用来自动化数据处理流程中的质量控制；</li><li>DESCRIBE要求提供描述特定资源的三元组</li></ul><h4 id="Copying-Data"><a href="#Copying-Data" class="headerlink" title="Copying Data"></a>Copying Data</h4><ul><li>利用CONSTRUCT抽取三元组；结合GRAPH关键字可以从特定命名图中抽取；SELECT后面跟的是变量列表，CONSTRUCT后面跟的是想要构造的三元组      <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#construct后面跟的是三元组，用花括号包围,里面可以包含任意个三元组模式（triple patterns）</span><br><span class="line">CONSTRUCT</span><br><span class="line">{?person ?p ?o}</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">{...}</span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="Creating-New-Data"><a href="#Creating-New-Data" class="headerlink" title="Creating New Data"></a>Creating New Data</h4><ul><li>利用一些函数处理数据，得到新的字段</li><li>指明资源所属的类会让信息推断更加容易</li><li>所谓的创建信息其实是将隐含的信息明确化</li></ul><h4 id="Converting-Data"><a href="#Converting-Data" class="headerlink" title="Converting Data"></a>Converting Data</h4><ul><li>将一个命名空间中的属性转换到需要的命名空间</li><li>意味着规范化URI以便更加容易地组合数据</li><li>owl:sameAs是DBpedia中用来将不同来源的资源联系起来的方式</li></ul><h4 id="Finding-Bad-Data"><a href="#Finding-Bad-Data" class="headerlink" title="Finding Bad Data"></a>Finding Bad Data</h4><ul><li>schema是一组关于数据结构和数据类型的规则</li><li>如果数据遵循了某个schema那么就不需要程序员写代码应对“给字符串加了1”这样的情形了</li><li>语义网应用采用了别的方法，通过添加更多的metadata</li><li>使用SPARQL添加限制而不是OWL</li></ul><h4 id="Defining-Rules-with-SPARQL"><a href="#Defining-Rules-with-SPARQL" class="headerlink" title="Defining Rules with SPARQL"></a>Defining Rules with SPARQL</h4><ul><li>rules expressed as queries</li><li>一些常用的：<ul><li>isURI</li><li>datatype(?amount)) != xsd:integer</li><li>!(bound(?grade))</li><li>?grade &lt; 5</li></ul></li></ul><h4 id="Generating-Data-About-Broken-Rules"><a href="#Generating-Data-About-Broken-Rules" class="headerlink" title="Generating Data About Broken Rules"></a>Generating Data About Broken Rules</h4><ul><li>将ASK换为CONSTRUCT</li><li>问题建模：问题类型、相关属性</li><li>可以使用Union将不同的规则加合并，但是随着规则的增多，这种方式会产生越来越多的错误（ there’d be greater and greater room for error</li><li>好的处理方式是：分开存储规则，使用是时候pipeline</li></ul><h4 id="Using-Existing-SPARQL-Rules-Vocabularies"><a href="#Using-Existing-SPARQL-Rules-Vocabularies" class="headerlink" title="Using Existing SPARQL Rules Vocabularies"></a>Using Existing SPARQL Rules Vocabularies</h4><ul><li>Schemarama</li><li>SPIN</li><li>关系数据库–API–check for rule compliance using SPARQL</li></ul><h4 id="Asking-for-a-Description-of-a-Resource"><a href="#Asking-for-a-Description-of-a-Resource" class="headerlink" title="Asking for a Description of a Resource"></a>Asking for a Description of a Resource</h4><ul><li>DESCRIBE+URI :返回资源的一些信息，具体返回结果和SPARQL查询引擎有关</li><li>CONSTRUCT可以完成相同的事情，with better control，因此不太推荐在serious的应用开发中使用</li></ul><h3 id="Datatypes-And-Functions"><a href="#Datatypes-And-Functions" class="headerlink" title="Datatypes And Functions"></a>Datatypes And Functions</h3><h4 id="Datatypes-and-Queries"><a href="#Datatypes-and-Queries" class="headerlink" title="Datatypes and Queries"></a>Datatypes and Queries</h4><ul><li>数据类型元数据的存储是记录语义信息的最早方式之一</li><li>标明数据类型方便理解，不标明的话会有默认设置</li><li>str()强制类型转换：FILTER (str(?o) = “two”) #返回所有值为”two”的</li></ul><h4 id="Representing-Strings"><a href="#Representing-Strings" class="headerlink" title="Representing Strings"></a>Representing Strings</h4><ul><li>单引号，双引号，三个单引号或者双引号</li><li>ARQ输出的时候:使用双引号分隔字符串；回车为/r，换行为/n，转义为/；输出的顺序doesn’t matter</li></ul><h4 id="Comparing-Values-and-Doing-Arithmetic"><a href="#Comparing-Values-and-Doing-Arithmetic" class="headerlink" title="Comparing Values and Doing Arithmetic"></a>Comparing Values and Doing Arithmetic</h4><ul><li>当使用不同的数字类型显式键入不同的值时，仍然可以在执行算术时将它们一起使用：比如integer和decimal可以乘到一起</li></ul><h4 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h4><ul><li>SPARQL 1.0规范提供了一些基本函数，SPARQL 1.1提供了更广泛的选择，几乎所有都基于XPath函数</li><li>SPARQL处理器可以提供其实施者想要包含的任何扩展功能</li></ul><h4 id="Program-Logic-Functions"><a href="#Program-Logic-Functions" class="headerlink" title="Program Logic Functions"></a>Program Logic Functions</h4><ul><li>IF()函数有三个参数。 如果第一个参数为true，则该函数返回第二个参数的值; 否则返回第三个</li><li>COALESCE():接受很多参数，返回the first one that doesn’t result in an error  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ?<span class="keyword">first</span> ?<span class="keyword">last</span> </span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">{</span><br><span class="line">?s ab:lastName ?<span class="keyword">last</span>; </span><br><span class="line">   ab:firstName ?firstname . </span><br><span class="line">OPTIONAL{ ?s ab:nick ?nickname . } </span><br><span class="line">BIND (<span class="built_in">COALESCE</span>(?nickname,?firstname) <span class="keyword">AS</span> ?<span class="keyword">first</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="Node-Type-and-Datatype-Checking-Functions"><a href="#Node-Type-and-Datatype-Checking-Functions" class="headerlink" title="Node Type and Datatype Checking Functions"></a>Node Type and Datatype Checking Functions</h4><ul><li>函数参数可能需要是特定类型，数据字段也需要是特定类型</li><li>datatype()函数可以用来检测类型</li><li>isBlank(), isLiteral(), isNumeric(), isIRI(), and isURI()</li><li>数字，字符串和关键字true和false（全部写成小写）都是literals，只有URI和空白节点不是</li><li>datatype(params) 返回一个URI，标识params的类型,params为空白节点和URIs时返回为空</li><li>bound()告诉我们一个变量是否有一个绑定的值</li></ul><h4 id="Node-Type-Conversion-Functions"><a href="#Node-Type-Conversion-Functions" class="headerlink" title="Node Type Conversion Functions"></a>Node Type Conversion Functions</h4><ul><li>URI() function lets you convert values to URIs if possible</li><li>在将值传递给URI()或IRI()函数之前，使用ENCODE_FOR_URI()函数预处理是个推荐的做法，但要注意它只接受simple literals或xsd：string</li><li>str():返回传入资源的字符串形式，传入为空白节点时不返回值</li><li>一个例子：  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CONSTRUCT {?s ?p ?testURI.} </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">{</span><br><span class="line">    ?s ?p ?o . </span><br><span class="line">    BIND( IF(isURI(?o), ?o, URI(ENCODE_FOR_URI(str(?o))) ) <span class="keyword">AS</span> ?testURI)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="Datatype-Conversion"><a href="#Datatype-Conversion" class="headerlink" title="Datatype Conversion"></a>Datatype Conversion</h4><ul><li>conversion to boolean is pickier: xsd:boolean(?o)不能转换True，可以转换true</li><li>xsd:dateTime()不能转换“2011-11-12” ，可以转换“2011-11-12T14:30:00”</li><li>STRDT()接收两个参数，一个literal值和一个类型URI，创建一个typed literal（自定义类型）  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CONSTRUCT { ?s u:amount ?newAmount . } </span><br><span class="line"><span class="keyword">WHERE</span> {</span><br><span class="line">    ?s im:product ?prodName ;</span><br><span class="line">       im:amount ?amount ; </span><br><span class="line">       im:units ?units .</span><br><span class="line">       BIND (STRDT(?amount, URI(CONCAT("http://learningsparql.com/ns/units#",?units))) <span class="keyword">AS</span> ?newAmount)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="Checking-Adding-and-Removing-Spoken-Language-Tags"><a href="#Checking-Adding-and-Removing-Spoken-Language-Tags" class="headerlink" title="Checking, Adding, and Removing Spoken Language Tags"></a>Checking, Adding, and Removing Spoken Language Tags</h4><ul><li>FILTER ( lang(?label) = “en” ) #只返回英文标签</li><li>BIND (str(?label) AS ?strippedLabel) #去掉@en，只返回文字信息</li><li>STRLANG()函数可以为属性加标签，比如：STRLANG(?USTerm,”en-US”)</li></ul><h4 id="String-Functions"><a href="#String-Functions" class="headerlink" title="String Functions"></a>String Functions</h4><ul><li>STRLEN(), SUBSTR(), UCASE(), and LCASE()</li><li>STRSTARTS(), STRENDS(), CONTAINS(),regex() #返回布尔值</li><li>The regex() function expects its first argument to be either an xsd:string or a simple literal with no language tag。可以str()一下</li></ul><h4 id="Numeric-Functions"><a href="#Numeric-Functions" class="headerlink" title="Numeric Functions"></a>Numeric Functions</h4><ul><li>abs(),round(),ceil(),flloor()</li><li>rand()+CONSTRUCT :生成样本数据</li></ul><h4 id="Date-and-Time-Functions"><a href="#Date-and-Time-Functions" class="headerlink" title="Date and Time Functions"></a>Date and Time Functions</h4><ul><li>now(),timezone(),tz()</li></ul><h4 id="Hash-Functions"><a href="#Hash-Functions" class="headerlink" title="Hash Functions"></a>Hash Functions</h4><ul><li>MD5(),SHA1(),SHA224(),SHA256(),SHA384(),SHA512()</li></ul><h4 id="Extension-Functions"><a href="#Extension-Functions" class="headerlink" title="Extension Functions"></a>Extension Functions</h4><ul><li>不同的SPARQL处理器支持的拓展函数不同</li><li>less portable</li></ul><h3 id="Updating-Data-With-SPARQL"><a href="#Updating-Data-With-SPARQL" class="headerlink" title="Updating Data With SPARQL"></a>Updating Data With SPARQL</h3><p>query the data with the SPARQL query language and manage it with the update language.</p><h4 id="Getting-Started-with-Fuseki"><a href="#Getting-Started-with-Fuseki" class="headerlink" title="Getting Started with Fuseki"></a>Getting Started with Fuseki</h4><ul><li>下载、安装</li></ul><h4 id="Adding-Data-to-a-Dataset"><a href="#Adding-Data-to-a-Dataset" class="headerlink" title="Adding Data to a Dataset"></a>Adding Data to a Dataset</h4><ul><li>更新文件后缀为.ru，意思是一个插入请求，not a query<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">INSERT</span> DATA后面跟要插入的triples</span><br><span class="line"># 简单快速插入数据</span><br><span class="line"><span class="keyword">INSERT</span> DATA </span><br><span class="line">{d:i8301 ab:homeTel "(718) 440-9821" . ab:Person a rdfs:Class .}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">where</span>后面跟triple patterns，可以引用上面的变量</span><br><span class="line"># 灵活创造</span><br><span class="line"><span class="keyword">INSERT</span> {d:i8301 ab:homeTel "(718) 440-9821" . ab:Person a rdfs:Class .}</span><br><span class="line"><span class="keyword">WHERE</span> {}</span><br></pre></td></tr></tbody></table></figure></li><li>三元组模式就是任意位置都可以被变量替换的三元组</li></ul><h4 id="Deleting-Data"><a href="#Deleting-Data" class="headerlink" title="Deleting Data"></a>Deleting Data</h4><ul><li>DELETE DATA{}和DELETE{}WHERE{}</li><li>DELETE WHERE{} :删除匹配where条件的三元组</li><li>CLEAR  DEFAULT</li></ul><h4 id="Changing-Existing-Data"><a href="#Changing-Existing-Data" class="headerlink" title="Changing Existing Data"></a>Changing Existing Data</h4><ul><li>在一次更新操作中，删除+插入</li><li>即使删除发生在插入之前，INSERT图形模式仍然具有WHERE子句存储的所有信息</li></ul><h4 id="Named-Graphs"><a href="#Named-Graphs" class="headerlink" title="Named Graphs"></a>Named Graphs</h4><ul><li>SPARQL更新允许使用分号连接多个操作</li><li>将三元组插入不存在的图时，SPARQL处理器会创建该图</li></ul><h4 id="Dropping-Graphs"><a href="#Dropping-Graphs" class="headerlink" title="Dropping Graphs"></a>Dropping Graphs</h4><ul><li>DROP GRAPH d:g1 #删除图g1</li><li>DROP DEFAULT #清除默认图，（因为默认图总是存在，即使为空</li><li>DROP NAMED：删除命名图</li><li>DROP ALL ：删除所有图</li><li>SPARQL Update没有UNDO操作，因此DROP ALL是个需要慎重的动作</li><li>这里的DROP换为CLEAR表示图中的清除三元组</li><li>CREATE GRAPH：创建一个空白图</li></ul><h4 id="Named-Graph-Syntax-Shortcuts-WITH-and-USING"><a href="#Named-Graph-Syntax-Shortcuts-WITH-and-USING" class="headerlink" title="Named Graph Syntax Shortcuts: WITH and USING"></a>Named Graph Syntax Shortcuts: WITH and USING</h4><ul><li>with语句指明要操作的图，比GRAPH节省</li><li>USING的作用类似于SELECT语句的FROM</li><li>USING NAMED === FROM NAMED  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USING</span> NAMED d:g2 </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">{ </span><br><span class="line">    # 这里一定要声明GRAPH d:g2</span><br><span class="line">    GRAPH d:g2 {?s dm:tag "five" . ?s dm:tag "six" .}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li>使用USING就不要使用WITH</li></ul><h4 id="Deleting-and-Replacing-Triples-in-Named-Graphs"><a href="#Deleting-and-Replacing-Triples-in-Named-Graphs" class="headerlink" title="Deleting and Replacing Triples in Named Graphs"></a>Deleting and Replacing Triples in Named Graphs</h4>  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> DATA { GRAPH d:g2{ d:x dm:tag "six" }}</span><br></pre></td></tr></tbody></table></figure>  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># GRAPH<span class="operator">+</span>图名或者变量名</span><br><span class="line"><span class="keyword">DELETE</span> { GRAPH ?g { ?s ?p "three" } } </span><br><span class="line"><span class="keyword">WHERE</span> { GRAPH ?g { ?s ?p "three" } }</span><br></pre></td></tr></tbody></table></figure>  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> d:g1 </span><br><span class="line"><span class="keyword">DELETE</span> { ?s ?p "four"}</span><br><span class="line"><span class="keyword">WHERE</span> { ?s ?p "four"}</span><br></pre></td></tr></tbody></table></figure><h3 id="Building-Applications-With-SPARQL"><a href="#Building-Applications-With-SPARQL" class="headerlink" title="Building Applications With SPARQL"></a>Building Applications With SPARQL</h3><ul><li>将查询发送到端点的最常见方式是将查询的转义版本作为参数添加到端点的URI</li><li>D2RQ</li><li>SPARQLWrapper for python</li><li>ARQ source code for java</li></ul><h3 id="Glossary"><a href="#Glossary" class="headerlink" title="Glossary"></a>Glossary</h3><ul><li><strong>blank node</strong>: A subject or object in an RDF graph that has no identity. These are typically used to group together other values</li><li><strong>default graph</strong>: The triples in an RDF dataset that don’t belong to a named graph</li><li><strong>IRI</strong>: Internationalized Resource Identifier: a URI that allows a wider choice of characters,making it “internationalized.”</li><li><strong>literal</strong>: A value, as opposed to a URI, which is a name for something. A literal may have a datatype or a spoken language tag associated with it, but not both. A simple literal is a literal with no language tag or datatype</li><li><strong>N3</strong>: A non-XML RDF serialization format developed by Tim Berners-Lee. Turtle is a simplified version of N3</li><li><strong>N-Triples</strong>: A very simple RDF serialization format that shows complete URIs with no abbreviation and a triple on each line. Often used as a graph dump format</li><li><strong>named graph</strong>: A set of triples, typically within a larger collection of them, that can be referenced with a particular name. The name is a URI</li><li><strong>RDF/XML</strong>: RDF’s original serialization format, based on XML</li><li><strong>RDFS</strong>: the RDF Schema (RDFS) specification lets you specify classes, properties, and metadata about those classes and properties. These serve as metadata to let you infer new facts about your data, not as validation rules to indicate correct versus incorrect data</li><li><strong>triplestore</strong>: A specialized database manager designed for storing triples</li><li><strong>Turtle</strong>: An increasingly popular RDF serialization format based on N3</li><li><strong>URI</strong>: “URI” is used more often to refer to an identifier, and “URL” to refer to a locator, or address.We use URIs to identify resources and property names in RDF</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>知识图谱小demo</title>
      <link href="/2018/03/10/kgdemo/"/>
      <url>/2018/03/10/kgdemo/</url>
      
        <content type="html"><![CDATA[<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>系统：<br>ubuntu16.04</p><p>软件目录:</p><ul><li>项目目录/home/gao/software/kgdemo/</li><li>数据库/home/gao/software/mysql</li><li>应用框架/home/gao/software/apache-jena-3.6.0（这里使用了它的TDB组件</li><li>SPARQL服务器/home/gao/software/apache-jena-fuseki-3.6.0</li><li>数据转化工具/home/gao/software/d2rq-0.8.1</li><li>本体构建工具/home/gao/software/Protege-5.2.0<span id="more"></span></li></ul><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><p>与电影相关的.基本统计数据如下：</p><ol><li>演员数量：505人</li><li>电影数量：4518部</li><li>电影类型：19类</li><li>人物与电影的关系：14451</li><li>电影与类型的关系：7898</li></ol><p>演员的基本信息包括：姓名、英文名、出生日期、死亡日期、出生地、个人简介.<br>电影的基本信息包括：电影名称、电影简介、电影评分、电影发行日期、电影类型.</p><img src="/2018/03/10/kgdemo/ErGraph.png" class=""><h3 id="本体建模"><a href="#本体建模" class="headerlink" title="本体建模"></a>本体建模</h3><img src="/2018/03/10/kgdemo/OntoGraph.png" class=""><ul><li><p>打开protege,在Ontology IRI中填写新建本体资源的IRI为”<a href="http://www.kgmovie.demo.com/">http://www.kgmovie.demo.com</a>“</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入protege目录,执行下面的命令</span></span><br><span class="line">./run.sh</span><br></pre></td></tr></tbody></table></figure></li><li><p>点击“Entities”tab标签,选择“Classes”标签.在这个界面,我们创建电影知识图谱的类/概念.</p><p>在owl:Thing下创建三个子类,Person,Movie,Genre.三个类的默认关系是互斥的.</p></li><li><p>切换到”Object Properties”页面创建<strong>类之间的关系,即,对象属性</strong>。</p><p>创建了三个对象属性，”hasActedIn”表示某人参演了某电影,该属性的”domain”是人,”range”是电影。(<em>“domain”表示该属性是属于哪个类的，”range”表示该属性的取值范围</em>),设置该属性的逆属性(Inverse of)是”hasActor”,可用于推理.另外一个属性”hasGenre”表示电影属于什么类型.</p></li><li><p>切换到”Data properties”页面创建<strong>类的属性,即,数据属性</strong>.</p><p>其实区分数据属性和对象属性还有一个很直观的方法,我们观察其”range”取值范围即可.</p><p><strong>对象属性的取值范围是类,而数据属性的取值范围则是字面量.</strong></p></li><li><p>保存文件,命名为”kgdemo.owl”</p></li><li><p>注意到,<strong>mysql中有五个表,本体中只有三个类</strong></p></li></ul><h2 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h2><h3 id="mysql-RDF"><a href="#mysql-RDF" class="headerlink" title="mysql -> RDF"></a>mysql -&gt; RDF</h3><ul><li><p>下载D2RQ，进入其目录，运行下面的命令生成<strong>默认的</strong>mapping文件：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./generate-mapping -u &lt;username&gt; -p &lt;password&gt; -o ../kgdemo/kg_demo_movie_mapping.ttl jdbc:mysql:///kg_demo_movie</span><br></pre></td></tr></tbody></table></figure></li><li><p>根据我们定义的本体<strong>修改mapping文件</strong></p><p>ttl文件中添加前缀: @prefix : <a href="http://www.kgmovie.demo.com/#">http://www.kgmovie.demo.com#</a> .(包括最后的这个句号)</p><p>去除没用的genre__label和genre_genre_id信息</p><p>vocab:xxxx 换成了本体构建时候的类</p><p>d2rq:property属性修改为本体中定义的属性(对象属性或者数据属性)</p></li><li><p>数据转为RDF</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./dump-rdf -o ../kgdemo/kg_demo_movie.nt ../kgdemo/kg_demo_movie_mapping.ttl</span><br></pre></td></tr></tbody></table></figure></li><li><p>查询示例</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ?titles <span class="keyword">WHERE</span> {</span><br><span class="line">  ?p rdf:type :Person.</span><br><span class="line">  ?p :personEnglishName <span class="string">'Stephen Chow'</span>.</span><br><span class="line">  ?p :hasActedIn ?movies.</span><br><span class="line">  ?movies :movieTitle ?titles</span><br><span class="line">}</span><br><span class="line">limit <span class="number">10</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>返回结果为:</p><table><thead><tr><th>titles</th></tr></thead><tbody><tr><td>“功夫”</td></tr><tr><td>“琉璃樽”</td></tr><tr><td>“英雄本色”</td></tr><tr><td>“少林足球”</td></tr><tr><td>“西游记第壹佰零壹回之月光宝盒”</td></tr><tr><td>“长江七号”</td></tr><tr><td>“西游记大结局之仙履奇缘”</td></tr><tr><td>“建国大业”</td></tr><tr><td>“审死官”</td></tr><tr><td>“龙在天涯”</td></tr></tbody></table></li></ul><h3 id="Bug-To-Fix"><a href="#Bug-To-Fix" class="headerlink" title="Bug To Fix"></a>Bug To Fix</h3><p>使用中文姓名查询不到person</p><h2 id="jena-SPARQL-endpoint及推理"><a href="#jena-SPARQL-endpoint及推理" class="headerlink" title="jena SPARQL endpoint及推理"></a>jena SPARQL endpoint及推理</h2><h3 id="jena示例"><a href="#jena示例" class="headerlink" title="jena示例"></a>jena示例</h3><ul><li>下载apache-jena和apache-jena-fuseki</li><li>在apache-jena目录下,使用“tdbloader”将之前我们的RDF数据以TDB的方式存储。命令如下：</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">./tdbloader --loc="../../kgdemo/tdb" "../../kgdemo/kg_demo_movie.nt"</span><br><span class="line">16:15:50 INFO  loader               :: -- Start triples data phase</span><br><span class="line">16:15:50 INFO  loader               :: ** Load empty triples table</span><br><span class="line">16:15:50 INFO  loader               :: -- Start quads data phase</span><br><span class="line">16:15:50 INFO  loader               :: ** Load empty quads table</span><br><span class="line">16:15:50 INFO  loader               :: Load: ../../kgdemo/kg_demo_movie.nt -- 2018/03/19 16:15:50 CST</span><br><span class="line">16:15:52 INFO  loader               :: -- Finish triples data phase</span><br><span class="line">16:15:52 INFO  loader               :: ** Data: 47,144 triples loaded in 1.26 seconds [Rate: 37,327.00 per second]</span><br><span class="line">16:15:52 INFO  loader               :: -- Finish quads data phase</span><br><span class="line">16:15:52 INFO  loader               :: -- Start triples index phase</span><br><span class="line">16:15:52 INFO  loader               :: ** Index SPO-&gt;POS: 47,144 slots indexed in 0.14 seconds [Rate: 334,354.63 per second]</span><br><span class="line">16:15:52 INFO  loader               :: ** Index SPO-&gt;OSP: 47,144 slots indexed in 0.13 seconds [Rate: 374,158.72 per second]</span><br><span class="line">16:15:52 INFO  loader               :: -- Finish triples index phase</span><br><span class="line">16:15:52 INFO  loader               :: ** 47,144 triples indexed in 0.27 seconds [Rate: 172,688.64 per second]</span><br><span class="line">16:15:52 INFO  loader               :: -- Finish triples load</span><br><span class="line">16:15:52 INFO  loader               :: ** Completed: 47,144 triples loaded in 1.55 seconds [Rate: 30,356.73 per second]</span><br><span class="line">16:15:52 INFO  loader               :: -- Finish quads load</span><br></pre></td></tr></tbody></table></figure><ul><li>在fuseki-server目录下,运行 <em>./fuseki-server</em> 服务,会在当前目录生成run文件夹,将本体文件重命名为”kgdemo.ttl”放入run/database,然后在run/configuration里创建config.ttl文件,内容为:</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">@prefix :      &lt;http://base/#&gt; .</span><br><span class="line">@prefix tdb:   &lt;http://jena.hpl.hp.com/2008/tdb#&gt; .</span><br><span class="line">@prefix rdf:   &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .</span><br><span class="line">@prefix ja:    &lt;http://jena.hpl.hp.com/2005/11/Assembler#&gt; .</span><br><span class="line">@prefix rdfs:  &lt;http://www.w3.org/2000/01/rdf-schema#&gt; .</span><br><span class="line">@prefix fuseki: &lt;http://jena.apache.org/fuseki#&gt; .</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">:service1        a                fuseki:Service ;</span><br><span class="line">fuseki:dataset                    &lt;#dataset&gt; ;</span><br><span class="line">fuseki:name                       "kg_demo_movie" ;</span><br><span class="line">fuseki:serviceQuery               "query" , "sparql" ;</span><br><span class="line">fuseki:serviceReadGraphStore      "get" ;</span><br><span class="line">fuseki:serviceReadWriteGraphStore "data" ;</span><br><span class="line">fuseki:serviceUpdate              "update" ;</span><br><span class="line">fuseki:serviceUpload              "upload" .</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;#dataset&gt; rdf:type ja:RDFDataset ;</span><br><span class="line">    ja:defaultGraph &lt;#model_inf&gt; ;</span><br><span class="line">    .</span><br><span class="line"></span><br><span class="line">&lt;#model_inf&gt; a ja:InfModel ;</span><br><span class="line">    ja:baseModel &lt;#tdbGraph&gt; ;</span><br><span class="line"></span><br><span class="line">    #本体文件的路径</span><br><span class="line">    ja:content [ja:externalContent &lt;file:////home/gao/software/apache-jena-fuseki-3.6.0/run/databases/kgdemo.ttl&gt; ] ;</span><br><span class="line">    </span><br><span class="line">    #启用OWL推理机</span><br><span class="line">    ja:reasoner [ja:reasonerURL &lt;http://jena.hpl.hp.com/2003/OWLFBRuleReasoner&gt;] .</span><br><span class="line"></span><br><span class="line">&lt;#tdbGraph&gt; rdf:type tdb:GraphTDB ;</span><br><span class="line">    tdb:dataset &lt;#tdbDataset&gt; ;</span><br><span class="line">    .</span><br><span class="line"></span><br><span class="line">&lt;#tdbDataset&gt; rdf:type tdb:DatasetTDB ;</span><br><span class="line">    tdb:location "/home/gao/software/kgdemo/tdb" ;</span><br></pre></td></tr></tbody></table></figure><ul><li>重启运行 <em>./fuseki-server</em></li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[2018-03-19 16:39:13] Server     INFO  Apache Jena Fuseki 3.6.0</span><br><span class="line">[2018-03-19 16:39:13] Config     INFO  FUSEKI_HOME=/home/gao/software/apache-jena-fuseki-3.6.0</span><br><span class="line">[2018-03-19 16:39:13] Config     INFO  FUSEKI_BASE=/home/gao/software/apache-jena-fuseki-3.6.0/run</span><br><span class="line">[2018-03-19 16:39:13] Config     INFO  Shiro file: file:///home/gao/software/apache-jena-fuseki-3.6.0/run/shiro.ini</span><br><span class="line">[2018-03-19 16:39:13] Config     INFO  Configuration file: /home/gao/software/apache-jena-fuseki-3.6.0/run/config.ttl</span><br><span class="line">[2018-03-19 16:39:13] Config     INFO  Load configuration: file:///home/gao/software/apache-jena-fuseki-3.6.0/run/configuration/conf.ttl</span><br><span class="line">[2018-03-19 16:39:13] Config     INFO  Register: /kg_demo_movie</span><br><span class="line">[2018-03-19 16:39:13] Server     INFO  Started 2018/03/19 16:39:13 CST on port 3030</span><br></pre></td></tr></tbody></table></figure><ul><li>打开页面localhost:3030,查询,这里使用中文ok</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PREFIX rdf: <span class="operator">&lt;</span>http:<span class="operator">/</span><span class="operator">/</span>www.w3.org<span class="operator">/</span><span class="number">1999</span><span class="operator">/</span><span class="number">02</span><span class="operator">/</span><span class="number">22</span><span class="operator">-</span>rdf<span class="operator">-</span>syntax<span class="operator">-</span>ns#<span class="operator">&gt;</span></span><br><span class="line">prefix rdfs: <span class="operator">&lt;</span>http:<span class="operator">/</span><span class="operator">/</span>www.w3.org<span class="operator">/</span><span class="number">2000</span><span class="operator">/</span><span class="number">01</span><span class="operator">/</span>rdf<span class="operator">-</span>schema#<span class="operator">&gt;</span></span><br><span class="line">prefix owl: <span class="operator">&lt;</span>http:<span class="operator">/</span><span class="operator">/</span>www.w3.org<span class="operator">/</span><span class="number">2002</span><span class="operator">/</span><span class="number">07</span><span class="operator">/</span>owl#<span class="operator">&gt;</span></span><br><span class="line">prefix : <span class="operator">&lt;</span>http:<span class="operator">/</span><span class="operator">/</span>www.kgmovie.demo.com#<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> ?titles <span class="keyword">WHERE</span> {</span><br><span class="line">  ?p rdf:type :Person.</span><br><span class="line">  ?p :personName <span class="string">'周星驰'</span>.</span><br><span class="line">  ?p :hasActedIn ?movies.</span><br><span class="line">  ?movies :movieTitle ?titles</span><br><span class="line">}</span><br><span class="line">limit <span class="number">10</span></span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th></th><th>titles</th></tr></thead><tbody><tr><td>1</td><td>“琉璃樽”</td></tr><tr><td>2</td><td>“西游记第壹佰零壹回之月光宝盒”</td></tr><tr><td>3</td><td>“大内密探零零发”</td></tr><tr><td>4</td><td>“功夫”</td></tr><tr><td>5</td><td>“长江七号”</td></tr><tr><td>6</td><td>“回魂夜”</td></tr><tr><td>7</td><td>“百变星君”</td></tr><tr><td>8</td><td>“英雄本色”</td></tr><tr><td>9</td><td>“建国大业”</td></tr><tr><td>10</td><td>“唐伯虎点秋香”</td></tr></tbody></table><h3 id="自定义推理规则"><a href="#自定义推理规则" class="headerlink" title="自定义推理规则"></a>自定义推理规则</h3><ul><li>在“databases”文件夹下新建一个文本文件“rules.ttl”，填入如下内容：</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@prefix : &lt;http://www.kgmovie.demo.com#&gt; .</span><br><span class="line">@prefix owl: &lt;http://www.w3.org/2002/07/owl#&gt; .</span><br><span class="line">@prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .</span><br><span class="line">@prefix xsd: &lt;XML Schema&gt; .</span><br><span class="line">@prefix rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt; .</span><br><span class="line"></span><br><span class="line">[ruleComedian: (?p :hasActedIn ?m) (?m :hasGenre ?g) (?g :genreName '喜剧') -&gt; (?p rdf:type :Comedian)]</span><br><span class="line">[ruleInverse: (?p :hasActedIn ?m) -&gt; (?m :hasActor ?p)]</span><br></pre></td></tr></tbody></table></figure><ul><li>修改juseki-server配置文件:</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">@prefix :      &lt;http://base/#&gt; .</span><br><span class="line">@prefix tdb:   &lt;http://jena.hpl.hp.com/2008/tdb#&gt; .</span><br><span class="line">@prefix rdf:   &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .</span><br><span class="line">@prefix ja:    &lt;http://jena.hpl.hp.com/2005/11/Assembler#&gt; .</span><br><span class="line">@prefix rdfs:  &lt;http://www.w3.org/2000/01/rdf-schema#&gt; .</span><br><span class="line">@prefix fuseki: &lt;http://jena.apache.org/fuseki#&gt; .</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">:service1        a                fuseki:Service ;</span><br><span class="line">fuseki:dataset                    &lt;#dataset&gt; ;</span><br><span class="line">fuseki:name                       "kg_demo_movie" ;</span><br><span class="line">fuseki:serviceQuery               "query" , "sparql" ;</span><br><span class="line">fuseki:serviceReadGraphStore      "get" ;</span><br><span class="line">fuseki:serviceReadWriteGraphStore "data" ;</span><br><span class="line">fuseki:serviceUpdate              "update" ;</span><br><span class="line">fuseki:serviceUpload              "upload" .</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;#dataset&gt; rdf:type ja:RDFDataset ;</span><br><span class="line">    ja:defaultGraph &lt;#model_inf&gt; ;</span><br><span class="line">    .</span><br><span class="line"></span><br><span class="line">&lt;#model_inf&gt; a ja:InfModel ;</span><br><span class="line">    ja:baseModel &lt;#tdbGraph&gt; ;</span><br><span class="line"></span><br><span class="line">    #本体文件的路径</span><br><span class="line">    ja:content [ja:externalContent &lt;file:////home/gao/software/apache-jena-fuseki-3.6.0/run/databases/kgdemo.ttl&gt; ] ;</span><br><span class="line">    </span><br><span class="line">    #关闭OWL推理机</span><br><span class="line">    #ja:reasoner [ja:reasonerURL &lt;http://jena.hpl.hp.com/2003/OWLFBRuleReasoner&gt;] .</span><br><span class="line">  </span><br><span class="line">  #开启规则推理机，并指定规则文件路径</span><br><span class="line">    ja:reasoner [</span><br><span class="line">        ja:reasonerURL &lt;http://jena.hpl.hp.com/2003/GenericRuleReasoner&gt; ; </span><br><span class="line">        ja:rulesFrom &lt;file:////home/gao/software/apache-jena-fuseki-3.6.0/run/databases/rules.ttl&gt; ; ]</span><br><span class="line">    .</span><br><span class="line">&lt;#tdbGraph&gt; rdf:type tdb:GraphTDB ;</span><br><span class="line">    tdb:dataset &lt;#tdbDataset&gt; ;</span><br><span class="line">    .</span><br><span class="line"></span><br><span class="line">&lt;#tdbDataset&gt; rdf:type tdb:DatasetTDB ;</span><br><span class="line">    tdb:location "/home/gao/software/kgdemo/tdb" ;</span><br><span class="line">    .</span><br></pre></td></tr></tbody></table></figure><ul><li>查询:</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> n <span class="keyword">WHERE</span> {</span><br><span class="line">?x rdf:type :Comedian.</span><br><span class="line">?x :personName ?n.</span><br><span class="line">}</span><br><span class="line">limit <span class="number">10</span></span><br></pre></td></tr></tbody></table></figure><p>结果如下:</p><table><thead><tr><th></th><th>n</th></tr></thead><tbody><tr><td>1</td><td>“邓浩光”</td></tr><tr><td>2</td><td>“梁朝伟”</td></tr><tr><td>3</td><td>“杨恭如”</td></tr><tr><td>4</td><td>“梁韵蕊”</td></tr><tr><td>5</td><td>“吴宇森”</td></tr><tr><td>6</td><td>“徐锦江”</td></tr><tr><td>7</td><td>“黄家驹”</td></tr><tr><td>8</td><td>“叶进”</td></tr><tr><td>9</td><td>“午马”</td></tr><tr><td>10</td><td>“梁咏琪”</td></tr></tbody></table><h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3><p>不用sparql，用natural language查询结果<br>query-answer</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 知识图谱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构建IT领域概念图谱</title>
      <link href="/2018/01/10/%E6%9E%84%E5%BB%BAIT%E9%A2%86%E5%9F%9F%E6%A6%82%E5%BF%B5%E5%9B%BE%E8%B0%B1/"/>
      <url>/2018/01/10/%E6%9E%84%E5%BB%BAIT%E9%A2%86%E5%9F%9F%E6%A6%82%E5%BF%B5%E5%9B%BE%E8%B0%B1/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.sciencedirect.com/science/article/pii/S0957417415005941">原文地址</a></p><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>​<strong>关联开放数据</strong>（LOD）中包含丰富的知识和语义，它的发展促使了很多知识型应用的诞生和兴起。在这些应用中，实体间的相关性（不同于相似性）这一概念扮演了重要角色。</p><p>​在给定一个查询后我们感兴趣的不只是确切的返回值（exact answers ），还有那些与查询紧密相关的东西。</p><p>​利用DBpedia中IT领域数据构建概念图谱的方法，不仅利用字符串匹配，还可以利用LOD数据集中编码的显示或隐式语义。在此基础上构建的专家系统，可以帮助那些在IT领域进行<strong>实体搜索</strong>任务的用户。</p><p>​为了对相关实体进行<strong>排序</strong>需要计算相关度，这就涉及到不同的<strong>相关性度量</strong>（relatedness measures）。</p><h3 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h3><p>​基于关键词匹配的搜索在同义、歧义发生时，表现得很挣扎（suffer）。哪怕查询语句、资源描述都结构化了，同样的问题依然存在。导致这一问题的主要原因是，它们都<strong>无法捕获</strong>查询、资源描述中的词语的**词义(meaning of terms)以及语义关联(the semantic relation)**。</p><p>​相关性（relatedness）是语义上的，比相似性概念宽泛（wider）。举例来说，MySQL和PostgreSQL很相似的，PHP和MySQL则是很相关的。</p><p>​构建图谱的关键在于，怎么衡量两个实体间的相关度。</p><p>​本文提出了一种语义感知的度量来评估实体间相关度，并利用这个度量构建IT领域概念图谱，图上每个节点都是IT概念（编程语言、数据库、技术、框架，等等）。</p><p>​构建图谱时，利用了来自web的数据的<strong>统计特征</strong>以及从LOD数据集中抽取的<strong>语义知识</strong>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 知识图谱 </tag>
            
            <tag> 关联数据 </tag>
            
            <tag> DBpedia </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性模型</title>
      <link href="/2017/11/11/%E7%BA%BF%E6%80%A7%E6%A8%A1%E5%9E%8B/"/>
      <url>/2017/11/11/%E7%BA%BF%E6%80%A7%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>能不能使用线性分类器得到形状为圆圈的决策边界？</p><span id="more"></span><ul><li>可以的！所谓的线性分类器，<strong>线性</strong>指的是权重向量<strong>w</strong>和标签y的关系，而决策边界指的是y如何随着x的变化而变化</li></ul><p>**the prediction is driven by the score w · φ(x)**，其中x是原始输入，φ(x)是提取到的特征</p><p>机器学习问题：定义优化问题，求解得到<strong>w</strong>（在 φ(x)固定的情况下）</p><p>构造特征：</p><ul><li>先验知识</li><li>特征模板</li></ul><p>定义特征：</p><ul><li>数组：适用于特征稠密的情况，假定特征排序固定</li><li>字典：特征稀疏(few nonzeros)时用字典表示字段到double<br>的映射更有效</li></ul><p>定义特征时一定要明确特征的含义</p><p>模型的表达（表现）能力——Expressivity：</p><ul><li>hypothesis class：特征φ(x)固定而<strong>w</strong>不同的预测器的集合<br>$$<br>F = {f_w : w ∈ R^d}<br>$$</li><li>学习的目的：利用训练数据从F中找到一个特定的预测器</li><li>如果<strong>φ(x)定义的F</strong>中的预测器都很差劲，no amount of learning can help.</li><li>关键在于：φ(x)能不能把好的预测器表达出来</li><li>F是不是<strong>越大越好？</strong></li></ul><p><strong>non-linearities in the original measurements(原始度量中的非线性)</strong> :</p><ul><li>Non-monotonicity(非单调性)：<ul><li>体温和健康程度的关系就不是单调的，你不能说体温越高越健康，反之亦然</li><li>φ(x) = [1, temperature(x)]   bad</li><li>φ(x) = [1, (temperature(x) − 37)^2] 转换特征，利用了先验知识</li><li>φ(x) = [1, temperature(x), temperature(x)^2]   task to simple blocks</li></ul></li><li>Saturation(饱和)：<ul><li>产品推荐</li><li>φ(x) = N(x) 购买产品的人数（受欢迎程度）和相关性，不具有线性关系</li><li>φ(x) = logN(x) 转换特征，取对数（N with a large dynamic range）</li><li>φ(x) = [1[0 &lt; N(x) ≤ 10], 1[10 &lt; N(x) ≤ 100],…]离散化，范围足够精细的话，可以非常灵活地捕捉常规关系</li></ul></li><li>Interaction between features(特征组合)：<ul><li>根据身高、体重预测健康病人状况</li><li>φ(x) = [height(x), weight(x)] #没能捕获身高体重的关系</li><li>φ(x) = (52 + 1.9(height(x) − 60) − weight(x))^2 #组合输入得到新的特征，利用了外界知识</li><li>φ(x) = [1, height(x), weight(x), height(x)^2, weight(x)^2, height(x)weight(x)] #添加包含多个度量的特征</li></ul></li></ul><p>Linear in what？ </p><ul><li>Linear in w?  Yes</li><li>Linear in φ(x)?  Yes </li><li>Linear in x?  No! (x not necessarily even a vector，可以是图片、文字)</li></ul><p>小结：</p><ul><li>从特征提取的角度来看，我们可以定义<strong>任意</strong>特征，带来x的极度非线性的函数</li><li>从学习的角度来看，线性在有效优化权重方面起着重要作用（因为它会导致凸优化问题）</li><li><strong>线性模型很强大</strong>！</li><li>将手工定义特征自动化—&gt; 神经网络</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> machine learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jupyter notebook添加kernel</title>
      <link href="/2017/08/03/jupyter%20notebook%E6%B7%BB%E5%8A%A0kernel/"/>
      <url>/2017/08/03/jupyter%20notebook%E6%B7%BB%E5%8A%A0kernel/</url>
      
        <content type="html"><![CDATA[<p>安装jupyter时使用了推荐的Anaconda，python默认环境python3。<br>添加python2的方法如下，亲测有效 - 0-</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conda create -n py27 python=<span class="number">2.7</span></span><br><span class="line">source activate py27</span><br><span class="line">conda install notebook ipykernel</span><br><span class="line">ipython kernel install --user</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《编码》读后感</title>
      <link href="/2017/07/31/%E7%BC%96%E7%A0%81%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
      <url>/2017/07/31/%E7%BC%96%E7%A0%81%E8%AF%BB%E5%90%8E%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<p>很有趣的书。</p><p>早点读到这本书的话，学习计算机基础知识的时候应该会一边学一边感叹“哇！有意思！”吧。</p><p>计算机在今天如此普及，现代人享受便利的时候如果想想这东西是怎么发明出来的，一定得惊叹“不可思议”。</p><p>盲文、摩斯码、灯泡、电池、继电器、十进制、bit、二进制、门电路等等，书中记录了这些探索是如何一步一步影响着现代科技的。</p><p><strong>每一种语言都可以看作是一套编码</strong>。</p><p>编码是为了满足人的某个需求出现的，而语言是为了交流。</p><p>规则不一样时，同一个物体在编码空间所处的位置就不一样了。</p><p>如果只有一门语言，一种编码，就不需要翻译了。</p><p>人类起初在不同的区域形成了不同的语言，如今交流如此频繁，回归一种语言是不是有一种宿命的感觉。</p><p>God is watching you.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂 </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫tips（2）</title>
      <link href="/2017/07/24/%E7%88%AC%E8%99%ABtips%EF%BC%882%EF%BC%89/"/>
      <url>/2017/07/24/%E7%88%AC%E8%99%ABtips%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="动态内容"><a href="#动态内容" class="headerlink" title="动态内容"></a>动态内容</h3><p>依赖JavaScript的动态网站，不是在第一次加载时下载全部内容，网页中展示的内容并没有出现在HTML源码中</p><h4 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h4><blockquote><p>Asynchronous JavaScript and XML<br>综合了多项技术的浏览器端网页开发技术<br>允许JavaScript创建到服务器的HTTP请求并获得响应</p></blockquote><span id="more"></span><p>  传统的Web应用允许用户端填写表单（form），当提交表单时就向网页服务器发送一个请求。服务器接收并处理传来的表单，然后送回一个新的网页，但这个做法浪费了许多带宽，因为在前后两个页面中的大部分HTML码往往是相同的。由于每次应用的沟通都需要向服务器发送请求，应用的回应时间依赖于服务器的回应时间。这导致了用户界面的回应比本机应用慢得多。<br>  与此不同，AJAX应用可以仅向服务器发送并取回必须的数据，并在客户端采用JavaScript处理来自服务器的回应。因为在服务器和浏览器之间交换的数据大量减少（大约只有原来的5%）[来源请求],服务器回应更快了。同时，很多的处理工作可以在发出请求的客户端机器上完成，因此Web服务器的负荷也减少了。</p><h3 id="抓取方式"><a href="#抓取方式" class="headerlink" title="抓取方式"></a>抓取方式</h3><ul><li>JavaScript逆向工程</li><li>渲染 JavaScript</li></ul><h4 id="JavaScript逆向工程"><a href="#JavaScript逆向工程" class="headerlink" title="JavaScript逆向工程"></a>JavaScript逆向工程</h4><p>所谓逆向工程就是去了解数据的请求链接是什么形式<br>AJAX数据可以直接请求，我们要做的是构建请求，然后分析返回的结果（ 一般是JSON数据——python提供了json模块可以方便地解析response数据<br>与抽取html再分析相比，这种方式下数据的结构其实更容易抽取<br><strong>构建请求时利用边界情况进行简化</strong>：</p><ol><li>提高每个页面的显示数量可以减少下载次数</li><li>尝试利用正则减少请求，使用一次搜索查询就能匹配所有结果</li></ol><h4 id="渲染JavaScript"><a href="#渲染JavaScript" class="headerlink" title="渲染JavaScript"></a>渲染JavaScript</h4><p>渲染引擎是浏览器在显示网页时解析HTML、应用css样式并执行JavaScript语句的部分<br>利用Selenium+PhantomJS可以模拟<strong>上述行为</strong>（Selenium也可以执行JavaScript脚本）没有关注<strong>链接构造</strong><br>轮询网页：判断特定内容有没有出现</p><h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><p>前者从长期来看性能和可靠性更高<br>后者适合作为短期解决方案，不需要我们了解网站的后端工作原理<br>不足在于渲染网页增加了开销，轮询网页在网络较慢时经常失败</p><h4 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h4><p>表单交互</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium + phantomJS 小Demo</title>
      <link href="/2017/07/23/selenium%20+%20phantomJS%20%E5%B0%8FDemo/"/>
      <url>/2017/07/23/selenium%20+%20phantomJS%20%E5%B0%8FDemo/</url>
      
        <content type="html"><![CDATA[<p>借助selenium和phantomJS抓取淘宝美食信息.</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>数据库配置</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#样例</span></span><br><span class="line">MONGO_URL=<span class="string">'localhost'</span></span><br><span class="line">MONGO_DB=<span class="string">'taobao'</span></span><br><span class="line">MONGO_TABLE=<span class="string">'product'</span></span><br></pre></td></tr></tbody></table></figure><p>声明浏览器</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">browser=webdriver.PhantomJS(service_args=SERVICE_ARGS)</span><br></pre></td></tr></tbody></table></figure><p>浏览器配置</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#不加载图片、开启缓存</span></span><br><span class="line">SERVICE_ARGS=[<span class="string">'--load-images=false'</span>,<span class="string">'--disk-cache=true'</span>]</span><br></pre></td></tr></tbody></table></figure><h4 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h4><span id="more"></span><ol><li>给定url,请求页面</li><li>判断加载成功，定位搜索框input，搜索按钮submit</li><li>搜索框中输入信息，input.send_keys(‘美食’)；点击搜索按钮，submit.click()</li><li>等待加载，获取结果总页数（正则提取数字)</li></ol><h4 id="翻页"><a href="#翻页" class="headerlink" title="翻页"></a>翻页</h4><p>采用页面跳转，即输入到第X页然后点击确定。</p><ol><li>判断加载成功，定位跳转按钮，页码框</li><li>清除页码框中原始信息，输入页码，点击跳转按钮</li><li>判断翻页成功：高亮页码 == 页码框中的数 ==&gt; text_to_be_present_in_element()</li></ol><h4 id="页面解析"><a href="#页面解析" class="headerlink" title="页面解析"></a>页面解析</h4><ol><li>判断加载是否成功</li><li>获取page_source</li><li>利用css解析器或者xpath，对于itemlist中的每一个item，提取相关信息</li><li>存入数据库</li></ol><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>抛出异常</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫tips</title>
      <link href="/2017/07/21/%E7%88%AC%E8%99%ABtips/"/>
      <url>/2017/07/21/%E7%88%AC%E8%99%ABtips/</url>
      
        <content type="html"><![CDATA[<h3 id="链接抓取"><a href="#链接抓取" class="headerlink" title="链接抓取"></a>链接抓取</h3><ul><li>根据首页链接抓取内容</li><li>页面包含的链接放入一个set,避免重复</li><li>解析robot.txt,避免下载禁止爬取的页面</li><li>已经抓取过的链接放在一个set</li><li><span id="more"></span></li><li>抽取深度达到限定值后停止,避免爬虫陷阱</li><li>同一域名的两次下载之间设置延迟,避免爬取过快</li><li>下载失败时重试下载(设置一个try_times参数,递归调用</li></ul><p>得到一堆html页面</p><h3 id="数据抓取"><a href="#数据抓取" class="headerlink" title="数据抓取"></a>数据抓取</h3><table><thead><tr><th>方法</th><th>性能</th><th>使用难度</th><th>安装难度</th></tr></thead><tbody><tr><td>正则</td><td>快</td><td>困难</td><td>简单</td></tr><tr><td>Beautiful Soup</td><td>慢</td><td>简单</td><td>简单</td></tr><tr><td>Lxml</td><td>快</td><td>简单</td><td>相对困难</td></tr><tr><td>如果爬虫的瓶颈在下载页面,不是数据抓取,那么可以使用BS</td><td></td><td></td><td></td></tr><tr><td>如果要抓的数据不多,使用正则更加高效率</td><td></td><td></td><td></td></tr><tr><td>lxml是最佳选择</td><td></td><td></td><td></td></tr></tbody></table><h4 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h4><p>如果要选取的东西,格式很常见,有很多相似项,可以尝试指明它的父元素或者祖先元素,最好是有id属性 (:_&lt; id是<strong>唯一</strong>的吧)  </p><h4 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h4><ul><li>选择所有标签: *.</li><li>选择a标签: a</li><li>选择class=”link”的元素: .link</li><li>选择class=”link”的a标签: a.link</li><li>选择id=”home”的a标签: a#home</li><li>选择父元素为a标签的所有span标签: a &gt; span</li><li>选择a标签内的所有span标签: a span</li><li>选择title属性为”home”的所有a标签: a[title=home]</li></ul><h4 id="给链接抽取添加数据处理回调"><a href="#给链接抽取添加数据处理回调" class="headerlink" title="给链接抽取添加数据处理回调"></a>给链接抽取添加数据处理回调</h4><ul><li>构造回调<strong>函数</strong>或者回调<strong>类</strong>(定义**_<em>call_</em>()**方法)</li><li>数据写入文件</li></ul><h3 id="下载缓存"><a href="#下载缓存" class="headerlink" title="下载缓存"></a>下载缓存</h3><h4 id="磁盘缓存"><a href="#磁盘缓存" class="headerlink" title="磁盘缓存"></a>磁盘缓存</h4><ul><li><p>下载前检查缓存</p></li><li><p>没有时再请求网页下载,并存至缓存</p></li><li><p>设计URL到文件名的<strong>映射</strong> : 注意命名格式限制,例如长度,允许的字符</p></li><li><p>数据(html)可以压缩: zlib.compress|zlib.decompress</p></li><li><p>保存时间戳,过期缓存失效</p><p><strong>缺点</strong>: 受限于文件系统,数量有限</p></li></ul><h4 id="数据库缓存"><a href="#数据库缓存" class="headerlink" title="数据库缓存"></a>数据库缓存</h4><p>存储大量数据,没有复杂的连接操作,选择易拓展的NoSql<br>加载时间比文件系统多,但免于文件系统的限制</p><h3 id="并发下载"><a href="#并发下载" class="headerlink" title="并发下载"></a>并发下载</h3><h4 id="多线程爬虫"><a href="#多线程爬虫" class="headerlink" title="多线程爬虫"></a>多线程爬虫</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#处理url的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">thread_crawler</span>:</span><br><span class="line">    ...</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">process_url</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    ...</span><br><span class="line">  </span><br><span class="line">    <span class="comment">#逻辑:设定一个线程池,最大线程数为max_threads.当有URL爬取时,检测是否有线程,有的话处理掉完成的线程,      再判断是否创建新线程</span></span><br><span class="line">    threads=[]</span><br><span class="line">    <span class="keyword">while</span> threads <span class="keyword">or</span> crawl_queue:</span><br><span class="line">        <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> thread.is_allive():</span><br><span class="line">                <span class="comment">#remove</span></span><br><span class="line">                threads.remove(thread)</span><br><span class="line">        <span class="comment">#在多个线程中启动process_url,条件是当前线程数小于设定值,并且待爬队列不为空</span></span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(threads)&lt;max_threads <span class="keyword">and</span> crawl_queue:</span><br><span class="line">            thread = threading.Thread(target=process_url)</span><br><span class="line">            thread.start()</span><br><span class="line">            threads.append(thread)</span><br></pre></td></tr></tbody></table></figure><h4 id="多进程爬虫"><a href="#多进程爬虫" class="headerlink" title="多进程爬虫"></a>多进程爬虫</h4><p>有几个cpu创建几个进程</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">processes=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_cpus):</span><br><span class="line">    p=multiprocessing.Process(target=thread_crawler)</span><br><span class="line">    p.start()</span><br><span class="line">    processes.append(p)</span><br></pre></td></tr></tbody></table></figure><h3 id="动态内容"><a href="#动态内容" class="headerlink" title="动态内容"></a>动态内容</h3><p>todo…</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium学习</title>
      <link href="/2017/07/19/selenium%E5%AD%A6%E4%B9%A0/"/>
      <url>/2017/07/19/selenium%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="声明浏览器对象"><a href="#声明浏览器对象" class="headerlink" title="声明浏览器对象"></a>声明浏览器对象</h3><p>ubuntu下打不开chrome浏览器，重新安装了chromium-browser，并使用下面的声明语句  </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">browser = webdriver.Chrome(<span class="string">"/usr/lib/chromium-browser/chromedriver"</span>)</span><br></pre></td></tr></tbody></table></figure><p>方案来源<a href="https://stackoverflow.com/questions/22476112/using-chromedriver-with-selenium-python-ubuntu">https://stackoverflow.com/questions/22476112/using-chromedriver-with-selenium-python-ubuntu</a> </p><p>貌似添加chrome的path也能解决 </p><h3 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h3><p>可以通过id，name，classname，xpath，css_selector等获得<br>两种写法：<span id="more"></span></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">elem = browser.find_element(By.ID,<span class="string">"kw"</span>)</span><br></pre></td></tr></tbody></table></figure><p>或者</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elem = browser.find_element_by_id(<span class="string">"kw"</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="获取多个元素"><a href="#获取多个元素" class="headerlink" title="获取多个元素"></a>获取多个元素</h3><p>就是element和elements的小区别，返回一个列表 </p><h3 id="元素交互"><a href="#元素交互" class="headerlink" title="元素交互"></a>元素交互</h3><p>先获取特定元素，再对其调用交互<br>input.send_keys(“xxx”) 为元素赋值”xxx“<br>button.click() 点击button元素</p><h3 id="交互动作"><a href="#交互动作" class="headerlink" title="交互动作"></a>交互动作</h3><p>将动作附加到动作链中执行,比如可以实现元素拖拽、点击、双击等</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br></pre></td></tr></tbody></table></figure><h3 id="执行JavaScript"><a href="#执行JavaScript" class="headerlink" title="执行JavaScript"></a>执行JavaScript</h3><p>browser.execute_script(script_name)  </p><h3 id="获取属性值"><a href="#获取属性值" class="headerlink" title="获取属性值"></a>获取属性值</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">elem.get_attribute(<span class="string">'xxx'</span>) </span><br><span class="line">elem.get_property(<span class="string">'xxxx'</span>)  </span><br></pre></td></tr></tbody></table></figure><h3 id="获取文本值"><a href="#获取文本值" class="headerlink" title="获取文本值"></a>获取文本值</h3><p>elem.text  </p><h3 id="获取ID、位置、标签名、大小"><a href="#获取ID、位置、标签名、大小" class="headerlink" title="获取ID、位置、标签名、大小"></a>获取ID、位置、标签名、大小</h3><p>elem.id<br>elem.location<br>elem.tag_name<br>elem.size</p><h3 id="Frame"><a href="#Frame" class="headerlink" title="Frame"></a>Frame</h3><p>提取元素时，要注意frame的切换<br>位于子frame时，找不到父frame中的元素</p><h3 id="等待"><a href="#等待" class="headerlink" title="等待"></a>等待</h3><p>隐式等待<br>显式等待</p><h3 id="前进后退"><a href="#前进后退" class="headerlink" title="前进后退"></a>前进后退</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brower.back()</span><br><span class="line">brower.forward() </span><br></pre></td></tr></tbody></table></figure><h3 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">browser.get_cookies()</span><br><span class="line">browser.add_cookie({<span class="built_in">dict</span>})</span><br></pre></td></tr></tbody></table></figure><h3 id="选项卡管理"><a href="#选项卡管理" class="headerlink" title="选项卡管理"></a>选项卡管理</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打开一个页面，新建一个选项卡，切换回页面</span></span><br><span class="line">url=<span class="string">"http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable"</span></span><br><span class="line">browser.get(url)</span><br><span class="line">browser.execute_script(<span class="string">'window.open()'</span>)</span><br><span class="line">browser.switch_to.window(browser.window_handles[<span class="number">0</span>])</span><br></pre></td></tr></tbody></table></figure><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>超时、元素不存在等</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Integer Break</title>
      <link href="/2017/06/23/Integer%20Break/"/>
      <url>/2017/06/23/Integer%20Break/</url>
      
        <content type="html"><![CDATA[<p>Given a positive integer n, break it into the sum of at least two positive integers and maximize the product of those integers. Return the maximum product you can get.</p><p>For example, given n = 2, return 1 (2 = 1 + 1); given n = 10, return 36 (10 = 3 + 3 + 4).<br>Note: You may assume that n is not less than 2 and not larger than 58.</p><p><strong>思路:<span id="more"></span> 最值问题,求导.</strong><br>假设一个数N分成了N/x份,每份都是x,则有<br>$$<br>y=x^{N/x},\<br>\ln y=(N/x)\ln x,\<br>\frac{1}{y}*y^{‘}=\frac{n}{x^2}(1-\ln x),<br>$$<br>另y’=0,则有lnx=1,x=e.<br>题中规定x只能是正整数,e约为2.718,则取离e较近的数3,此时y较大.<br>于是有递推式: dp(i)=3dp(i-3) (i&gt;4 ),i&lt;=4时,dp[i]=[1,1,1,2,4].</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">integerBreak</span>(<span class="params">self, n</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        bottom to up dp.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        res=[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line">        <span class="keyword">if</span> n&lt;=<span class="number">4</span>:<span class="keyword">return</span> res[n]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ans=<span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> n&gt;<span class="number">4</span>:</span><br><span class="line">                ans*=<span class="number">3</span></span><br><span class="line">                n-=<span class="number">3</span></span><br><span class="line">            ans*=n</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深、浅拷贝</title>
      <link href="/2017/06/22/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
      <url>/2017/06/22/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<p><strong>拷贝是对于可变对象list而言的，非容器类型（如数字、字符串、和其他’原子’类型的对象）是没有拷贝这个说法的</strong></p><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></tbody></table></figure><p>b是a的别名，指向一个地址<span id="more"></span></p><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a[:]              <span class="comment">#或者使用 b = list(a)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>] <span class="keyword">is</span> b[<span class="number">0</span>]</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.append([<span class="number">6</span>,<span class="number">7</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b[<span class="number">3</span>].append(<span class="string">'x'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="string">'x'</span>], [<span class="number">6</span>, <span class="number">7</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="string">'x'</span>]]</span><br></pre></td></tr></tbody></table></figure><p>浅拷贝构造了一个新的list对象<br>b的内部元素<strong>是a元素的引用</strong> ( the new list represents a sequence of references to the same elements as in the first )<br>修改b中的可变对象会影响a ；</p><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> copy</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=copy.deepcopy(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="string">'x'</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="string">'x'</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b[<span class="number">3</span>].pop()</span><br><span class="line"><span class="string">'x'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="string">'x'</span>]]</span><br></pre></td></tr></tbody></table></figure><p>不仅list对象是新的，list里的元素也是新的；<br>这里a[3] is not b[3] .</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dynamic programming</title>
      <link href="/2017/06/20/Dynamic-%20programming/"/>
      <url>/2017/06/20/Dynamic-%20programming/</url>
      
        <content type="html"><![CDATA[<img src="/2017/06/20/Dynamic-%20programming/dp1.JPG" class=""><img src="/2017/06/20/Dynamic-%20programming/dp2.JPG" class=""><p><strong>5 steps</strong> to solve DP:</p><p><strong>1.subprobs</strong><br><strong>2.guess</strong><br><strong>3.recurrence</strong><br><strong>4.order</strong><br><strong>5.orig prob</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Find the contiguous subarray within an array (containing at least one number) which has the largest sum.</span></span><br><span class="line"><span class="string">For example, given the array [-2,1,-3,4,-1,2,1,-5,4],</span></span><br><span class="line"><span class="string">the contiguous subarray [4,-1,2,1] has the largest sum = 6.</span></span><br><span class="line"><span class="string">5 steps to DP:</span></span><br><span class="line"><span class="string">1.subprobs:  dp(i)-&gt; maxsubarray in nums[:i]</span></span><br><span class="line"><span class="string">2.guess:  for each nums[i] add it or not.</span></span><br><span class="line"><span class="string">3.recurrence:  dp(i)=max(nums[i]+dp(i-1),nums[i])</span></span><br><span class="line"><span class="string">4.order:  for i=1,..,n: dp(i)</span></span><br><span class="line"><span class="string">5.orig prob:  dp(n)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxSubArray</span>(<span class="params">self, nums</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        curSum = maxSum = nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums[<span class="number">1</span>:]:</span><br><span class="line">            curSum = <span class="built_in">max</span>(num, curSum + num)</span><br><span class="line">            maxSum = <span class="built_in">max</span>(maxSum, curSum)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> maxSum</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>决策树</title>
      <link href="/2017/06/12/%E5%86%B3%E7%AD%96%E6%A0%91/"/>
      <url>/2017/06/12/%E5%86%B3%E7%AD%96%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h4 id="构造决策树"><a href="#构造决策树" class="headerlink" title="构造决策树"></a>构造决策树</h4><p>第一个问题:当前数据集上哪个特征在划分数据分类时起决定作用?为此需要一个评估标准.</p><p>划分的大原则是:将无序的数据变得有序.</p><p>划分之后接着划分,递归.</p><p>递归结束条件:程序遍历完所有划分数据集的属性或者分支下的数据均为一个类型.</p><p>为了度量引入了信息论的东西,也就是熵.</p><h4 id="熵"><a href="#熵" class="headerlink" title="熵"></a>熵</h4><p>信息的定义:如果待分类的事务可能划分在多个分类中,则符号xi的信息定义为:<br>$$<br>l(x_i)=-\log_2 p(x_i),<br>$$</p><p>其中p(xi)是选择该分类的概率.</p><p>熵是信息的期望值.我们需要计算所有类别所有可能值包含的信息期望值:<br>$$<br>H=-\sum_{i=1}^n p(x_i)\log_2 p(x_i),<br>$$</p><p>其中,n为样本分类.</p><h4 id="另外"><a href="#另外" class="headerlink" title="另外"></a>另外</h4><p>数据最好是标称型的 ；(对于ID3算法,数值型数据最好是离散的.</p><p>出现过拟合时,可以剪枝.</p><p>剪枝策略,预剪枝或者后剪枝.</p><p>别的决策数算法,C4.5|CART.</p><p><a href="https://github.com/yikayiyo/machinelearninginaction/blob/master/Ch03/trees.py">https://github.com/yikayiyo/machinelearninginaction/blob/master/Ch03/trees.py</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> machine learning </tag>
            
            <tag> classification </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>借助义元改善词表示学习</title>
      <link href="/2017/06/09/%E5%80%9F%E5%8A%A9%E4%B9%89%E5%85%83%E6%94%B9%E5%96%84%E8%AF%8D%E8%A1%A8%E7%A4%BA%E5%AD%A6%E4%B9%A0/"/>
      <url>/2017/06/09/%E5%80%9F%E5%8A%A9%E4%B9%89%E5%85%83%E6%94%B9%E5%96%84%E8%AF%8D%E8%A1%A8%E7%A4%BA%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<img src="/2017/06/09/%E5%80%9F%E5%8A%A9%E4%B9%89%E5%85%83%E6%94%B9%E5%96%84%E8%AF%8D%E8%A1%A8%E7%A4%BA%E5%AD%A6%E4%B9%A0/HowNet.png" class="" title="HowNet中的一个例子"><h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><p>  义元是语义上的最小单位，单词的每一个含义通常都是很多义元组合而成的。为了让每个词义的义元更加确切，人们进行了手工标注，并构建了常识性的语言知识库。这篇文章指出，单词的义元信息可以改善词表示学习（一种将单词映射到低维语义空间的技术，是许多NLP任务的一个基本步骤）。关键点在于利用义元信息准确捕捉单词在特定语境下的确切含义。具体说来，作者拓展了skip-gram框架，提出了三种义元编码模型来学习sememes-senses-words的表示，<span id="more"></span>而且在不同的语境中确定词义时用到了注意力机制。为了检验学到的词表示的质量，进行了两个实验，包括相似度计算和单词类推，结果新模型的效果显著好于设置的基础模型。这也说明了作者的模型可以对义元信息正确建模，通过注意力机制使义元作用于词表示学习。</p><h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>  义元是最小的语义单元，现有概念（比如某个词的词义）都可以通过一个有限集合内的义元组合而来。问题在于，某个词的义元并不明确，于是人们人工构建了一个常识性的语言知识库。<br>HowNet就是这样的一个知识库，里面的每一个概念都用和它相关的一个或多个义元进行了标注。与WordNet不同，HowNet强调由义元表示的part和attribute的意义，在单词相似度计算、语义分析方面被广泛使用。<br>  作者的目标在于将义元信息纳入词表示学习，从而得到改进的词嵌入。WRL是许多NLP任务，包括语言建模、神经机器翻译，基本的、非常重要的步骤。<br>  关于词表示的研究已经有很多，其中word2vec实现了效率和有效性非常不错的平衡。在word2vec中，一个词对应一个词嵌入，忽略了词的多义。(Huang et al，2012)提出一种处理WRL的多原型模型，根据上下文聚类进行无监督的词义归纳和词嵌入。(Chen et al,2014)进一步利用WordNet同义词集指导词表示学习。<br>  从上得出结论：词义消歧在词表示学习中非常关键。作者认为每个单词下的义元标注可以带来必需的语义上的调整。为探讨其可行性，提出了SE-WRL模型，该模型可以在检测词义的同时，学习词表示。具体说来，这个框架把每个单词的词义看作是义元的组合，根据上下文迭代地进行词义消歧，通过拓展skip-gram模型学习sememes-senses-words的表示。该框架提出一种基于注意力的方法来自动根据上下文选择近似的词义。<br>实验中用两个任务评估模型，包括词语相似度和词语类比，最后举几个例子。结果表明该模型结果显著好于其它模型，尤其在单词类比方面。这说明该模型在义元信息的帮助下可以构建更好的知识表示，在词义消歧方面还有潜力。<br>本文贡献总结如下：</p><ol><li>第一个利用知网义元改善词表示学习的工作（as far as）</li><li>借助知网的义元信息，根据上下文，成功利用注意力机制检测词义、学习词表示</li><li>大量实验证明有效性</li></ol><h4 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h4><p>  词表示<br>  词义消歧和表示学习</p><h4 id="系统方法"><a href="#系统方法" class="headerlink" title="系统方法"></a>系统方法</h4><p>  本节介绍SE-WRL框架。具体来说，我们在经过语义正则化的大型语料库上学习模型，得到义元、词义、词嵌入。<br>下面首先介绍知网、词语结构。接着介绍常规的WRL模型skip-gram。最后详细介绍三种义元编码模型。</p><h4 id="Sememes，Senses-and-Words-in-HowNet"><a href="#Sememes，Senses-and-Words-in-HowNet" class="headerlink" title="Sememes，Senses and Words in HowNet"></a>Sememes，Senses and Words in HowNet</h4><p>  知网中标注了每个词的精确词义，对于每一个词义，其重要的部分、属性都以义元的形式给出。<br>  义元之间形成了复杂的层次结构，本文没有考虑这种结构，把义元视为一个集合。<br>  约束：W-S-X  （word-sense-sememe）C(w):上下文集合</p><h4 id="常规skip-gram模型"><a href="#常规skip-gram模型" class="headerlink" title="常规skip-gram模型"></a>常规skip-gram模型</h4><p>  该模型认为词嵌入应该和其上下文词语相关；<br>  给定目标词，最大限度地提高上下文词语的预测概率；<br>  利用一个滑动窗口选择上下文词语；<br>  对于词序列H={w1,…,wn}，skip-gram模型的目的是最大化：</p><img src="/2017/06/09/%E5%80%9F%E5%8A%A9%E4%B9%89%E5%85%83%E6%94%B9%E5%96%84%E8%AF%8D%E8%A1%A8%E7%A4%BA%E5%AD%A6%E4%B9%A0/max.png" class=""><p>  经softmax归一化：</p><img src="/2017/06/09/%E5%80%9F%E5%8A%A9%E4%B9%89%E5%85%83%E6%94%B9%E5%96%84%E8%AF%8D%E8%A1%A8%E7%A4%BA%E5%AD%A6%E4%B9%A0/softmax.png" class=""><h4 id="SE-WRL-Model"><a href="#SE-WRL-Model" class="headerlink" title="SE-WRL Model"></a>SE-WRL Model</h4><h5 id="SSA"><a href="#SSA" class="headerlink" title="SSA"></a>SSA</h5><p>  简单聚合模型。一个词嵌入，由组成它的义元向量取均值得到。m为词语w的义元总数。</p><img src="/2017/06/09/%E5%80%9F%E5%8A%A9%E4%B9%89%E5%85%83%E6%94%B9%E5%96%84%E8%AF%8D%E8%A1%A8%E7%A4%BA%E5%AD%A6%E4%B9%A0/ssa.png" class=""><p>  包含相同义元的相似词语可能会最终形成相似的表示。</p><h5 id="SAC"><a href="#SAC" class="headerlink" title="SAC"></a>SAC</h5><p>  SSA模型不足：每一个词只有一个表示<br>  利用attention机制，自动根据目标词为上下文词选择合适的词义；通过对上下文词消歧，来学到更好的目标词表示。<br>  <img src="/2017/06/09/%E5%80%9F%E5%8A%A9%E4%B9%89%E5%85%83%E6%94%B9%E5%96%84%E8%AF%8D%E8%A1%A8%E7%A4%BA%E5%AD%A6%E4%B9%A0/sacp.png" class=""><br>  目标词（as an attention）：original word embedding<br>  上下文词：sememe embeddings，公式为：</p><img src="/2017/06/09/%E5%80%9F%E5%8A%A9%E4%B9%89%E5%85%83%E6%94%B9%E5%96%84%E8%AF%8D%E8%A1%A8%E7%A4%BA%E5%AD%A6%E4%B9%A0/sac1.png" class=""><p>  意思是：每个sense embedding*attention score，然后求和.</p><img src="/2017/06/09/%E5%80%9F%E5%8A%A9%E4%B9%89%E5%85%83%E6%94%B9%E5%96%84%E8%AF%8D%E8%A1%A8%E7%A4%BA%E5%AD%A6%E4%B9%A0/sac2.png" class=""><p>  每一个sense由组成它的sememe embeddings取均值得到：</p><img src="/2017/06/09/%E5%80%9F%E5%8A%A9%E4%B9%89%E5%85%83%E6%94%B9%E5%96%84%E8%AF%8D%E8%A1%A8%E7%A4%BA%E5%AD%A6%E4%B9%A0/sac3.png" class=""><p>  attention机制认为，上下文词的sense embedding和目标词w越相关，在构建上下文词的word embedding时这个sense就越该被考虑。这种机制下，上下文中的每个词都表示成了其sense的特定分布。</p><h5 id="SAT"><a href="#SAT" class="headerlink" title="SAT"></a>SAT</h5><p>  和SAC相反，SAT将很多的上下文词视为attention，来选择目标词的词义。<br>  <img src="/2017/06/09/%E5%80%9F%E5%8A%A9%E4%B9%89%E5%85%83%E6%94%B9%E5%96%84%E8%AF%8D%E8%A1%A8%E7%A4%BA%E5%AD%A6%E4%B9%A0/satp.png" class=""><br>  上下文词（as an attention）：original word embeddings<br>  目标词：sememe embedding，公式：</p><img src="/2017/06/09/%E5%80%9F%E5%8A%A9%E4%B9%89%E5%85%83%E6%94%B9%E5%96%84%E8%AF%8D%E8%A1%A8%E7%A4%BA%E5%AD%A6%E4%B9%A0/sat.png" class=""><p>  直觉上，SAT效果应该好于SAC。</p><h4 id="总结展望-我的-0"><a href="#总结展望-我的-0" class="headerlink" title="总结展望(我的-0-)"></a>总结展望(我的-0-)</h4><p>  文章提出一个模型,该模型可以对义元信息较好地建模,改善了词表示.在词语类推和相似度计算中,相比传统模型该模型都展示出了优势.<br>  在处理义元时忽略掉了其复杂的层次结构,并且只对中文进行处理.可以想象的是,如果对层次结构有较好的建模,词表示会更加精确,其表示的学习过程也会更加容易收敛.另外,这种机制应该适用于其它语言,值得尝试.</p><h4 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h4><p><a href="http://nlp.csai.tsinghua.edu.cn/~lzy/publications/acl2017_sememe.pdf">Improved Word Representation Learning with Sememes</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> word embedding </tag>
            
            <tag> attention </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简洁的python</title>
      <link href="/2017/06/05/%E7%AE%80%E6%B4%81%E7%9A%84python/"/>
      <url>/2017/06/05/%E7%AE%80%E6%B4%81%E7%9A%84python/</url>
      
        <content type="html"><![CDATA[<h4 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h4><p>一般情况下,条件分支只有简单的返回或对同一变量进行赋值操作时,可以转为条件表达式.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.改写条件语句</span></span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">0</span>:</span><br><span class="line">    y = math.log(x)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    y = <span class="built_in">float</span>(<span class="string">'nan'</span>)</span><br><span class="line"><span class="comment">#简洁写法</span></span><br><span class="line">y = math.log(x) <span class="keyword">if</span> x &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="built_in">float</span>(<span class="string">'nan'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.改写递归函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fac</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x * fac(x-<span class="number">1</span>)</span><br><span class="line"><span class="comment">#简洁写法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fac</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> x == <span class="number">0</span> <span class="keyword">else</span> x * fac(x-<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><p>列表解析(list comprehension)</p><p>将一个列表转为另一个时用更少的代码</p><span id="more"></span><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.映射操作</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">capitalize_all</span>(<span class="params">t</span>):</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> t:</span><br><span class="line">        res.append(s.capitalize())</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"><span class="comment">#简洁写法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">capitalize_all</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="keyword">return</span> [s.capitalize() <span class="keyword">for</span> s <span class="keyword">in</span> t]</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.过滤操作</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">only_upper</span>(<span class="params">t</span>):</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> t:</span><br><span class="line">        <span class="keyword">if</span> s.isupper():</span><br><span class="line">            res.append(s)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"><span class="comment">#简洁写法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">only_upper</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="keyword">return</span> [s <span class="keyword">for</span> s <span class="keyword">in</span> t <span class="keyword">if</span> s.isupper()]</span><br></pre></td></tr></tbody></table></figure><h4 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h4><p>类似于列表解析但又不同,经常和sum,max,min之类的函数配合使用</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>l=[x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g = (x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g</span><br><span class="line">&lt;generator <span class="built_in">object</span> &lt;genexpr&gt; at <span class="number">0x7f33f66f2780</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>(g)</span><br><span class="line"><span class="number">30</span></span><br></pre></td></tr></tbody></table></figure><h4 id="any和all"><a href="#any和all" class="headerlink" title="any和all"></a>any和all</h4><p>any接收一个布尔值组成的序列,其中任何值是True时返回True.</p><p>all接收一个布尔值组成的序列,所有值是True时返回True.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#发现禁止字母,返回False</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">avoids</span>(<span class="params">word,forbidden</span>):</span><br><span class="line">    <span class="keyword">for</span> letter <span class="keyword">in</span> word:</span><br><span class="line">        <span class="keyword">if</span> letter <span class="keyword">in</span> forbidden:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="comment">#改写</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">avoids</span>(<span class="params">word,forbidden</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> <span class="built_in">any</span>(letter <span class="keyword">in</span> forbidden <span class="keyword">for</span> letter <span class="keyword">in</span> word)</span><br><span class="line"></span><br><span class="line"><span class="comment">#单词必须使用required中的全部字母</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uses_all</span>(<span class="params">word,required</span>):</span><br><span class="line">    <span class="keyword">for</span> letter <span class="keyword">in</span> required:</span><br><span class="line">        <span class="keyword">if</span> letter <span class="keyword">not</span> <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="comment">#改写</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uses_all</span>(<span class="params">word,required</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">all</span>(letter <span class="keyword">in</span> word <span class="keyword">for</span> letter <span class="keyword">in</span> required)</span><br></pre></td></tr></tbody></table></figure><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><p>有些问题可以借助集合处理.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#第一次出现时加入词典,再次出现时函数返回True</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">has_duplicates</span>(<span class="params">t</span>):</span><br><span class="line">    d={}</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> t:</span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">in</span> d:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        d[x] = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#同一函数借助集合的简写形式</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">has_duplicates</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(<span class="built_in">set</span>(t))&lt;<span class="built_in">len</span>(t)</span><br></pre></td></tr></tbody></table></figure><h4 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h4><p>将每个键映射到其出现次数,键是可散列的.</p><p>类似于集合,提供了一些加法,减法,交集,并集的操作.还有一个常用的most_common方法,返回一个值-频率对的列表,按照最常见到最少见排序.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>count=Counter(<span class="string">'parrot'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>count</span><br><span class="line">Counter({<span class="string">'r'</span>: <span class="number">2</span>, <span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'p'</span>: <span class="number">1</span>, <span class="string">'t'</span>: <span class="number">1</span>, <span class="string">'o'</span>: <span class="number">1</span>})</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> val,freq <span class="keyword">in</span> count.most_common(<span class="number">3</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(val,freq)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">(<span class="string">'r'</span>, <span class="number">2</span>)</span><br><span class="line">(<span class="string">'a'</span>, <span class="number">1</span>)</span><br><span class="line">(<span class="string">'p'</span>, <span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><h4 id="命名元组"><a href="#命名元组" class="headerlink" title="命名元组"></a>命名元组</h4><p>提供了快速定义简单类的方法；如果类变得很复杂,可以定义新类继承当前的命名元组,或者使用原始类定义.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义一个Point对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,x=<span class="number">0</span>,y=<span class="number">0</span></span>):</span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self,</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'(%g,%g)'</span>%(self.x,self.y)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#改写</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line">Point = namedtuple(<span class="string">'Point'</span>,[<span class="string">'x'</span>,<span class="string">'y'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Point</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">'__main__.Point'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Point(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p</span><br><span class="line">Point(x=<span class="number">1</span>,y=<span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure><h4 id="收集参数"><a href="#收集参数" class="headerlink" title="收集参数"></a>收集参数</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#收集任意个数的按位实参并输出</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printall</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>printall(<span class="number">1</span>,<span class="number">2.0</span>,<span class="string">'3'</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2.0</span>, <span class="string">'3'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>printall(<span class="number">1</span>,<span class="number">2.0</span>,third=<span class="string">'3'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: printall() got an unexpected keyword argument <span class="string">'third'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#收集关键词实参    </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printall</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(args,kwargs)</span><br><span class="line">    </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>printall(<span class="number">1</span>,<span class="number">2.0</span>,third=<span class="string">'3'</span>)</span><br><span class="line">((<span class="number">1</span>, <span class="number">2.0</span>), {<span class="string">'third'</span>: <span class="string">'3'</span>})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>处理参数很多的函数时,创建和传递字典来指定常用的选项是非常有用的.</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis事务</title>
      <link href="/2017/06/03/redis%E4%BA%8B%E5%8A%A1/"/>
      <url>/2017/06/03/redis%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>  一组命令的集合,要么都执行,要么都不执行.同命令一样,是Redis的最小执行单位.<br>  <span id="more"></span></p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>  先将属于同一事务的命令发送给Redis,然后让Redis依次执行这些命令(FIFO).</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">redis&gt; SADD "user:1:following" 2</span><br><span class="line">QUEUED</span><br><span class="line">redis&gt; SADD "user:2:followers" 1</span><br><span class="line">QUEUED</span><br><span class="line">redis&gt; EXEC</span><br><span class="line">1) (interger) 1</span><br><span class="line">2) (interger) 1</span><br></pre></td></tr></tbody></table></figure><p>  MULTI命令告诉Redis,下面的命令属于同一事务.<br>  当输入一条命令,Redis返回QUEUED,表示该命令已经进入等待执行的事务队列中了.<br>  当事务队列里的所有命令被执行完之后,EXEC命令会将回复队列作为自己的执行结果返回给客户端,客户端从事务状态返回到非事务状态,至此,事务执行完毕。<br>  如果在发送EXEC命令前客户端掉线了,则Redis会请空事务队列,所有命令都不执行；一旦服务器端收到了EXEC,所有的命令就都会被执行.</p><h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><p>  包括<strong>语法错误</strong>和<strong>运行错误</strong>.<br>  如果事务队列中的命令存在语法错误(指令不存在或者参数不对),执行EXEC后Redis会返回错误,连语法正确的命令也不会执行.这种错误的命令在输入时,Redis就会提示你error信息.<br>  运行错误,是指那些在输入时Redis不会返回error提示信息的命令.例如,使用散列命令操作集合类型的键,这种错误在实际执行之前Redis是无法发现的.如果一条命令出现了运行错误,事务里的其它命令依然会被执行.<br>  Redis事务没有回滚功能.开发者需要自己处理错误,恢复数据库.</p><h4 id="错误预防"><a href="#错误预防" class="headerlink" title="错误预防"></a>错误预防</h4><p>  对于语法错误,完全可以在开发时找到并解决；<br>  对于运行错误,可以做的是,合理规划数据库(保证键名规范等)</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Redis事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2!=True</title>
      <link href="/2017/05/23/2!=True/"/>
      <url>/2017/05/23/2!=True/</url>
      
        <content type="html"><![CDATA[<p>问题:为什么2!=True呢?</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">num=<span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> num==<span class="literal">True</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span> <span class="string">'True'</span></span><br><span class="line"><span class="meta">... </span><span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span> <span class="string">'False'</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></tbody></table></figure><span id="more"></span><p>其实也是个无聊的东西…查官方文档时候感觉还不错,至少能看懂…</p><h4 id="真值测试"><a href="#真值测试" class="headerlink" title="真值测试"></a>真值测试</h4><p>python中的任何对象都有真值，以下对象的真值为<strong>false</strong>：<br>    - None<br>    - False<br>    - zero of any numeric type,for example 0,0.0,0j.<br>    - any empty sequence,for example,’’,(),[].<br>    - any empty mapping,for example,{}<br>    - instances of user-defined classes, if the class defines a <strong>bool</strong>() or <strong>len</strong>() method, when that method returns the integer zero or bool value False.<br>其它所有对象的真值都被视为 <strong>true</strong> 。一些返回布尔值的操作和内置函数，总是返回0或者False来表示真值为<strong>false</strong>，返回1或者True来表示真值为<strong>true</strong>. (例外: <strong>布尔操作</strong> or 和 and 总是<strong>返回其操作数</strong>)</p><h4 id="布尔操作"><a href="#布尔操作" class="headerlink" title="布尔操作"></a>布尔操作</h4><p>python中的布尔操作，有如下规则：</p><table><thead><tr><th>Operations</th><th>Result</th><th>Notes</th></tr></thead><tbody><tr><td>x or y</td><td>if x is false,then y,else x</td><td>(1)</td></tr><tr><td>x and y</td><td>if x is false,then x,else y</td><td>(2)</td></tr><tr><td>not x</td><td>if x is false,then True,else False</td><td>(3)</td></tr><tr><td>Notes:</td><td></td><td></td></tr><tr><td>(1) This is a short-circuit operator, so it only evaluates the second argument if the first one is false.</td><td></td><td></td></tr><tr><td>只会在第一个参数为假的时候考虑第二个参数.</td><td></td><td></td></tr><tr><td>(2) This is a short-circuit operator, so it only evaluates the second argument if the first one is true.</td><td></td><td></td></tr><tr><td>只会在第一个参数为真的时候考虑第二个参数.</td><td></td><td></td></tr><tr><td>(3) not has a lower priority than non-Boolean operators, so <strong>not a == b</strong> is interpreted as <strong>not (a == b)</strong>, and <strong>a == not b</strong> is a syntax error.</td><td></td><td></td></tr></tbody></table><p>于是有:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">True</span> <span class="keyword">and</span> <span class="number">0</span>    <span class="comment"># 0</span></span><br><span class="line"><span class="number">0</span> <span class="keyword">and</span> <span class="literal">True</span>    <span class="comment"># 0</span></span><br><span class="line"><span class="literal">True</span> <span class="keyword">and</span> <span class="number">1</span>    <span class="comment"># 1</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">and</span> <span class="literal">True</span>    <span class="comment"># True</span></span><br><span class="line"><span class="literal">True</span> <span class="keyword">and</span> <span class="number">2</span>    <span class="comment"># 2</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">and</span> <span class="literal">True</span>    <span class="comment"># True</span></span><br><span class="line"><span class="literal">False</span> <span class="keyword">and</span> <span class="number">0</span>    <span class="comment"># False</span></span><br><span class="line"><span class="number">0</span> <span class="keyword">and</span> <span class="literal">False</span>    <span class="comment"># 0</span></span><br><span class="line"><span class="literal">False</span> <span class="keyword">and</span> <span class="number">1</span>    <span class="comment"># False</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">and</span> <span class="literal">False</span>    <span class="comment"># False</span></span><br><span class="line"><span class="literal">False</span> <span class="keyword">and</span> <span class="number">2</span>    <span class="comment"># False</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">and</span> <span class="literal">False</span>    <span class="comment"># False</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">True</span> <span class="keyword">or</span> <span class="number">0</span>    <span class="comment"># True</span></span><br><span class="line"><span class="number">0</span> <span class="keyword">or</span> <span class="literal">True</span>    <span class="comment"># True</span></span><br><span class="line"><span class="literal">True</span> <span class="keyword">or</span> <span class="number">1</span>    <span class="comment"># True</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">or</span> <span class="literal">True</span>    <span class="comment"># 1</span></span><br><span class="line"><span class="literal">True</span> <span class="keyword">or</span> <span class="number">2</span>    <span class="comment"># True</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">or</span> <span class="literal">True</span>    <span class="comment"># 2</span></span><br><span class="line"><span class="literal">False</span> <span class="keyword">or</span> <span class="number">0</span>    <span class="comment"># 0</span></span><br><span class="line"><span class="number">0</span> <span class="keyword">or</span> <span class="literal">False</span>    <span class="comment"># False</span></span><br><span class="line"><span class="literal">False</span> <span class="keyword">or</span> <span class="number">1</span>    <span class="comment"># 1</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">or</span> <span class="literal">False</span>    <span class="comment"># 1</span></span><br><span class="line"><span class="literal">False</span> <span class="keyword">or</span> <span class="number">2</span>    <span class="comment"># 2</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">or</span> <span class="literal">False</span>    <span class="comment"># 2</span></span><br></pre></td></tr></tbody></table></figure><h4 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">isinstance</span>(<span class="literal">True</span>,<span class="built_in">int</span>)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">isinstance</span>(<span class="literal">False</span>,<span class="built_in">int</span>)  <span class="comment"># True</span></span><br><span class="line"><span class="literal">True</span> <span class="keyword">is</span> <span class="number">1</span>    <span class="comment"># False</span></span><br><span class="line"><span class="literal">False</span> <span class="keyword">is</span> <span class="number">0</span>    <span class="comment"># False</span></span><br><span class="line"><span class="built_in">int</span>(<span class="literal">True</span>)    <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">int</span>(<span class="literal">False</span>)    <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">bool</span>(<span class="number">2</span>)     <span class="comment"># True</span></span><br><span class="line"><span class="built_in">bool</span>(<span class="number">0</span>)     <span class="comment"># False</span></span><br></pre></td></tr></tbody></table></figure><p>布尔值包括两个常量对象，分别是True和False，来表示真值；<br>在数值上下文中，布尔值True和False等同于1和0，例如：5+True，返回6；<br>内置函数bool()可以将任何值转换为布尔值，前提是该值可以被解释为真值.<br>结论：2 != True ，但是 bool(2) == True.</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实体排序论文-2</title>
      <link href="/2017/05/21/%E5%AE%9E%E4%BD%93%E6%8E%92%E5%BA%8F%E8%AE%BA%E6%96%87-2/"/>
      <url>/2017/05/21/%E5%AE%9E%E4%BD%93%E6%8E%92%E5%BA%8F%E8%AE%BA%E6%96%87-2/</url>
      
        <content type="html"><![CDATA[<h3 id="知识图谱中实体相似度计算研究"><a href="#知识图谱中实体相似度计算研究" class="headerlink" title="知识图谱中实体相似度计算研究"></a>知识图谱中实体相似度计算研究</h3><h4 id="知识图谱"><a href="#知识图谱" class="headerlink" title="知识图谱"></a>知识图谱</h4><p>  本质是一种语义网络,结点代表实体或概念,边代表实体或概念间的各种语义关系.一个含有大量实体的知识库,如果构建得当,实体信息表示得当,可以很方便的供我们分析处理.</p><h4 id="相似实体"><a href="#相似实体" class="headerlink" title="相似实体"></a>相似实体</h4><p>  对于实体间关系的研究,目前较多的集中在相似性的度量.判断实体之间的相似度首先要理解实体的语义信息,传统的字符串匹配不可行,例如让你从刘德华和马德华和张学友中选两个相似度较高的,<span id="more"></span>你肯定会说是刘德华和张学友,尽管从字符串匹配的角度看,刘德华和马德华匹配度更高.<br>  在数据结构化存储的知识库中,实体属性可以作为相似度判断的主要依据.而如何度量属性上的相似度是解决问题的关键.文本型属性的相似度计算是更研究重点.</p><h4 id="本文贡献"><a href="#本文贡献" class="headerlink" title="本文贡献"></a>本文贡献</h4><ol><li>提出知识图谱中实体相似度的通用方法,可以处理各种类型的属性值,包括数值型,列表型,文本型；</li><li>文本型数据的相似度计算中使用了语义模型,增加了实体在语义上的相似度；</li><li>实体的相似度计算中,使用了集成学习的方法,提高分类的正确率；</li></ol><h4 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h4><ol><li>相似实体推荐在诸多领域得到广泛应用.如电商和搜索引擎中的推荐系统；医疗领域可以评注病人之间的相似度,辅助医生决策.</li><li>对于文本相似度计算,有基于统计的方法和基于语义分析的方法.基于统计的方法通常采用VSM进行文本表示,将文本表示为特征词集合,根据词频提取关键特征词,计算在关键特征词向量空间上的相似度,来代表文本相似度.基于语义分析的方法,考虑了词语间的语义关系,即近义词.</li></ol><h4 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h4><p>假设:</p><ol><li>不同类别实体对相似度为0；</li><li>实体与自身相似度为4；</li><li>实体对相似度满足对称性,即实体1和实体2的相似度等于实体2和实体1的相似度；</li></ol><h5 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h5><p>  剔除不满足上述假设的数据,占比0.9%；<br>  列表型数据中属性表达不一致的进行归一化,例如普通话,中文,汉语,简体中文等归为汉语；</p><h5 id="特征生成"><a href="#特征生成" class="headerlink" title="特征生成"></a>特征生成</h5><p>  对于不同类型的属性值,采用不同的计算方法:</p><ol><li>对于数值型的属性:<br>$$<br>D(d_i,d_j)=\frac{|d_j-d_i|}{Max(d_n)-Min(d_n)}<br>$$<br>  D的值域在[0,1],di和dj差值越大D越大,表示它们之间的相似度越小.</li><li>对于列表型的属性,采用Jaccard计算相似度:<br>$$<br>Jaccard(A,B)=\frac{|A\cap B|}{|A\cup B|}<br>$$<br>  Jaccard的值域在[0,1],越大相似度越高.</li><li>对于文本型的属性,首先进行分词,计算得到TF-IDF向量.使用余弦相似度衡量相似性:<br>$$<br>CosSim=\frac{\sum_{i=1}^n(A_i*B_i)}{\sqrt{\sum_{i=1}^N(A_i)^2}*\sqrt{\sum_{i=1}^N(B_i)^2}}<br>$$</li></ol><p>  引入LDA得到降维了的主题模型向量,使用余弦相似度和Hellinger距离衡量向量间的相似性:<br>$$<br>H(P,Q)=\frac1{\sqrt2}\sqrt{\sum_{i=1}^{k}(\sqrt{p_i}-\sqrt{q_i})^2}<br>$$</p><h5 id="模型选择"><a href="#模型选择" class="headerlink" title="模型选择"></a>模型选择</h5><p>  提到了机器学习中涉及到的一些基本方法.</p><h5 id="算法总结"><a href="#算法总结" class="headerlink" title="算法总结"></a>算法总结</h5><p>  主要是2个模块:特征生成和分类器训练<br>  数据约束:不同类别下的实体,属性会有不同,维度也有差异；同类别下的实体特征维度相同；<br>  需要对不同类别的实体训练不同的分类器；</p><h4 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h4><p>  引入集成学习效果并不明显,但是比单一分类效果好.</p><h4 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h4><p>  特征之间加区分度.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 实体排序 </tag>
            
            <tag> 相似度计算 </tag>
            
            <tag> 集成学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实体排序论文-1</title>
      <link href="/2017/05/18/%E5%AE%9E%E4%BD%93%E6%8E%92%E5%BA%8F%E8%AE%BA%E6%96%87-1/"/>
      <url>/2017/05/18/%E5%AE%9E%E4%BD%93%E6%8E%92%E5%BA%8F%E8%AE%BA%E6%96%87-1/</url>
      
        <content type="html"><![CDATA[<h3 id="基于给定实体和属性的相似实体推荐方法"><a href="#基于给定实体和属性的相似实体推荐方法" class="headerlink" title="基于给定实体和属性的相似实体推荐方法"></a>基于给定实体和属性的相似实体推荐方法</h3><p>相似实体推荐主要用在问答系统和搜索引擎中.</p><p>一个实体可能对应着多个概念,引入属性之后,我们更可能推断出查询意图.例如,苹果+总部,我们知道苹果指的是公司;苹果+口感,我们知道说的是水果.</p><p>进行相似实体推荐,要做两件事:</p><ul><li>根据实体和不同属性的组合概率推断实体所属的概念</li><li>得到该概念下候选的相似实体,排序后输出<span id="more"></span></li></ul><h4 id="实体概念化"><a href="#实体概念化" class="headerlink" title="实体概念化"></a>实体概念化</h4><h5 id="建立概念的属性模板"><a href="#建立概念的属性模板" class="headerlink" title="建立概念的属性模板"></a>建立概念的属性模板</h5><p>基于假设:当一个概念的不同实体下频繁出现某个属性时,认为这个属性对于本概念是典型的.典型属性的权重高!</p><p>具体做法:把每个实体所有属性加入其所属的概念中,计数该属性出现的次数并做归一化.<br>$$<br>P(a_j|c_k) = \frac {count(a_j)}{max\lbrace count(a_i)|a_i \in attr(c_k)\rbrace}<br>$$</p><p>$$<br>Template(c_k)=\left\lbrace {(a_i,p(a_i|c_k))|a_i \in e_i \land e_i \in c_k}\right\rbrace<br>$$</p><h5 id="给定属性推断实体概念"><a href="#给定属性推断实体概念" class="headerlink" title="给定属性推断实体概念"></a>给定属性推断实体概念</h5><p>$$<br>P(c_k|e^s,A) = \sum_{i:a_i\in A}^{N}P(a_i|c_k)<br>$$</p><p>直觉上,源实体属性在某个概念中出现的越多,属于该概念的概率越高；</p><h4 id="实体相似性"><a href="#实体相似性" class="headerlink" title="实体相似性"></a>实体相似性</h4><h5 id="实体间关系的关联方式"><a href="#实体间关系的关联方式" class="headerlink" title="实体间关系的关联方式:"></a>实体间关系的关联方式:</h5><ul><li>概念关联: 相同概念下的实体相似,比如水果这个概念下,苹果,梨,葡萄就是相似的；</li><li>属性关联: 相似实体通常具有相似的属性集,比如苹果和葡萄,就会有口感,产地,价格等共有属性；</li><li>链接关联: 一个实体页面中出现的其它实体通常和该实体是类似的</li></ul><h5 id="根据上面的关联方式-得到三个直观的假设"><a href="#根据上面的关联方式-得到三个直观的假设" class="headerlink" title="根据上面的关联方式,得到三个直观的假设:"></a>根据上面的关联方式,得到三个直观的假设:</h5><ol><li>两个实体相似,首先这两个实体属于同一个概念；</li><li>一个实体页面频繁出现另一个实体,那么这两个实体较相似；</li><li>如果两个实体共有属性较多,那么这两个实体较相似；</li></ol><h5 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h5><p>$$<br>{使用概率}P(e^t|Q){表示给定一个查询}Q={ e^s,A},A={a_1,a_2,…,a_N}(e^s表示输入的源实体,A表示输入的属性列表),推荐一个相似的实体e^t的条件概率.<br>$$</p><p>$$<br>P(e^t|Q)=\frac{P(e^t,Q)}{P(Q)}\infty P(e^t,Q),P(Q)不受e^t的影响,可以不考虑<br>$$</p><p>$$<br>P(e^t,Q)=P(Q|e^t)P(e^t)=P(e^s,A|e^t)P(e^t)=P(e^s|e^t)P(A|e^t)P(e^t)=P(e^s,e^t)P(A|e^t)=P(e^t|e^s)P(e^s)P(A|e^t)<br>$$</p><p>$$<br>\infty P(e^t|e^s)P(A|e^t) {,式中假设e^s和A相互独立,P(e^s)不影响最终结果可以去掉}<br>$$</p><p>得到的两个P,一个表示实体相关度,另一个表示与属性集的重合度.</p><h5 id="计算实体相关度"><a href="#计算实体相关度" class="headerlink" title="计算实体相关度"></a>计算实体相关度</h5><p>考虑了候选实体在源实体页面出现的频度,以及候选实体和源实体属性的Jaccard相似度.<br>$$<br>P(e^t|e^s)=\alpha \frac{count(e^t)}{\sum_{i:e^i\in E}^{N}count(e^i)}+(1-\alpha) \frac{|A^s \bigcap A^t|}{|A^s \bigcup A^t|}<br>$$</p><h5 id="计算与属性集的重合度"><a href="#计算与属性集的重合度" class="headerlink" title="计算与属性集的重合度"></a>计算与属性集的重合度</h5><p>考虑候选实体属性集与查询属性集的Jaccard相似度.<br>$$<br>P(A|e^t)=\frac{|A^t \cap A|}{|A|}<br>$$</p><h4 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h4><table><thead><tr><th>方法名</th><th>方法</th></tr></thead><tbody><tr><td>Base_1</td><td>不推断概念,只考虑候选实体,源实体的属性重合度</td></tr><tr><td>Base_2</td><td>概念推断,不考虑候选实体和查询属性集合的重合度</td></tr><tr><td>Base_3</td><td>不推断概念,考虑候选实体和查询属性集合的重合度</td></tr><tr><td>Ad</td><td>概念推断,考虑候选实体和查询属性集合的重合度</td></tr></tbody></table><p>1,3都没有推断实体概念,导致推荐实体与搜索意图有较大差距,3由于考虑了查询重合度效果比1好；</p><p>2,4都进行了概念推断,可以判断搜索者意图,提高了准确率,4由于考虑了查询重合度效果比2好；</p><p>随着查询输入的属性增多,234方法的结果都有所提高,这是因为查询的属性增多时,可以推断出实体更细粒度的概念,更好地推断搜索者的意图；</p><p>1没有考虑查询属性,因此结果并不因为属性增多而提高.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 实体排序 </tag>
            
            <tag> 相似度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>烦</title>
      <link href="/2017/05/17/%E7%83%A6/"/>
      <url>/2017/05/17/%E7%83%A6/</url>
      
        <content type="html"><![CDATA[<p>​前几年,打篮球也冷静不下来的时候,会去围合下面买个可乐,背背单词.说是下面其实有点搞笑,毕竟住在二楼.临近毕业最烦的时候,坐在乒乓球台上抽烟.基友,路路还他妈来凑热闹,不知道他们有什么好烦的.是因为选择太多嘛?很气!!过一会,带着吃的的清华回来了,招呼过来抽一根.也记不清他抽没抽,总之完了之后烟给阿布了,”傻逼才抽烟”好像没什么毛病.</p><span id="more"></span><p>​<img src="/2017/05/17/%E7%83%A6/IMG_2070.JPG" class=""></p><p>​最近每天都在看paper,看书,学东西,很忙,但是很难受.完全冷静不下来.英语已经是我最讨厌的东西了,星期三是我最讨厌的一天.就是今天了!上午英语课下午组会,全他妈在浪费时间.心态有点崩,感觉读研都在浪费时间了.想找人聊天,把通讯录翻来翻去,翻着翻着睡着了.好像总会给人家带去负能量,很不好意思.朋友圈关了,微博删了,游戏卸了,不知道能不能好一点.</p><p>​喜欢一个人不需要理由吧.</p><p>​毕竟我也说不清喜欢什么.</p><p>​因为和姑娘没什么进展,所以才烦吧.</p><p>​刚刚还在感伤过去反思现在,怎么突然出来个姑娘,真他妈麻瓜啊我.</p><p>​读paper的时候,会突然出来个姑娘.</p><p>​看书的时候,会突然出来个姑娘.</p><p>​学东西的时候,会突然出来个姑娘.</p><p>​是同一个姑娘.</p><p>​烦的时候,突然出来个姑娘.</p><p>​有这种事就好了.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习tips</title>
      <link href="/2017/05/16/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0tips/"/>
      <url>/2017/05/16/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0tips/</url>
      
        <content type="html"><![CDATA[<h3 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h3><p>“A computer program is said to learn from experience <em>E</em> with respect to some class of tasks <em>T</em> and performance measure <em>P</em> if its performance at tasks in <em>T</em>, as measured by <em>P</em>, improves with experience <em>E</em>.”</p><p>Machine learning is all about drawing lines through data and we decide what purpose the line services, such as <strong>a decision boundary</strong> in a classification algorithm, or <strong>a predictor</strong> that models real-world behavior. And these lines in turn just come from finding <strong>the minimum of a cost function</strong> using <strong>gradient descent</strong>.<span id="more"></span></p><p>The key to determining what parameters to choose to best approximate the data is to find a way to characterize how “wrong” our boundary or predictor is. We do this by using a <strong>cost function</strong> (or a <strong>loss function</strong>).</p><p>The <strong>perceptron algorithm</strong> forms the basis for many modern day ML algorithms, most notably <strong>neural networks</strong>. </p><p>Like neurons, perceptrons take in several inputs and spit out an output. </p><p>We would want to use different weights for each input.</p><p>We use a bias as a measure of how difficult it is for the perceptron to say ‘yes’ or ‘no’</p><p>A logistic model can predict probabilities while a perceptron can only predict yes or no.</p><h3 id="Part-2"><a href="#Part-2" class="headerlink" title="Part 2"></a>Part 2</h3><p>A support vector is a vector from the data point with the smallest margin to the decision boundary.</p><p>The idea behind a support vector machine is to classify data by drawing a decision boundary such that it <strong><em>maximizes</em> the support vectors</strong>. By maximizing the support vectors, we’re also maximizing the margins in a data set, and thus the decision boundary is as far away as possible from the data points.</p><p>The SVM algorithm fails when you have a <strong>linearly inseparable</strong> dataset.</p><p>Before, we wanted <em>every single</em> data point to be as far away (to the correct side) from the decision boundary as possible. Now, we’ll allow a data point to stray toward the wrong side of the boundary, but we’ll add a “cost” to that happening (remember cost functions from the last post?). This is something that happens very often in machine learning and is called <strong>regularization</strong>.</p><p>You can think of a kernel as mapping a set data from one coordinate system to another coordinate system. In the original coordinate system the data may not be linearly separable at all, whereas in the new coordinate system if we choose the correct kernel, we should get a set a data set is very easily linearly separable.</p><h3 id="Part-3"><a href="#Part-3" class="headerlink" title="Part 3"></a>Part 3</h3><p>A neuron takes in any number of numerical inputs and spits out just one output. To get to this output, the neuron calculates an intermediate value called s by multiplying each input by a different weight, adding them all together, and adding an additional number called the bias.</p><p>An activation function is any function that takes in our s and gives the output of our neuron, called the <strong>activation</strong>.</p><p>Using a step function makes training very difficult because there’s no way to tell whether the neural network is getting closer or farther from the correct answer.But sigmoid function is a nice activation function because it is smooth everywhere, making it easier to figure out if you’re getting closer to the top.</p><p>Artificial neural network are composed of <strong>layers</strong> of artificial neurons in a similar way. In general, there are three types of layers: an input layer, one or more hidden layers, and an output layer. </p><p>At its very core, training a neural network just means <strong>adjusting the parameters</strong>.</p><p>When the neural network outputs the wrong answer, you find the slopes of the output layer (the domino closest to the marble) first because it was the direct cause of the incorrect answer. And since the output layer depends on the hidden layer, you’ll have to fix that too by finding the slopes and using gradient descent. Eventually you’ll work your way back to the hidden layer closest to the input layer.</p><p>Changing the parameters in one layer will affect the outputs of the next layer which will affect the outputs of the next layer, and so on until the cost function itself is affected.It turns out that once we calculate the slopes of a given layer, we can easily find the slopes of a previous layer.</p><p>We calculate slopes by starting from the back and propagating our algorithm backwards through the neural network until we get all the slopes for gradient descent.This, in a nutshell, is the back-propagation algorithm.</p><h3 id="Part-4"><a href="#Part-4" class="headerlink" title="Part 4"></a>Part 4</h3><p>Todo…</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> machine learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Logistic Regression</title>
      <link href="/2017/05/15/Logistic-Regression/"/>
      <url>/2017/05/15/Logistic-Regression/</url>
      
        <content type="html"><![CDATA[<img src="/2017/05/15/Logistic-Regression/Logistic-curve.svg.png" class="" title="sigmoid函数曲线图"><blockquote><p>Perhaps you’ve seen some data points and then someone <strong>fit</strong> a line called the best-fit line to these points; <em>that’s regression</em>.What happens in logistic regression is we have a bunch of data, and with the data we try to build an equation to do classification for us. </p><footer><strong>Peter Harrington</strong><cite>Machine Learning in Action</cite></footer></blockquote><h4 id="Classification-with-logistic-regression-and-the-sigmoid-function"><a href="#Classification-with-logistic-regression-and-the-sigmoid-function" class="headerlink" title="Classification with logistic regression and the sigmoid function"></a>Classification with logistic regression and the sigmoid function</h4><p>  理想函数: 接收所有特征,返回预测类别.<span id="more"></span></p><p>  对于一个逻辑回归分类器,我们在所有的特征上乘以一个回归系数,求和,带入sigmoid函数,返回一个属于[0,1]的值.任何大于0.5的数据归为1类,小于0.5的归为0类.</p><p>$$<br>\sigma(z)=\frac{1}{1+e^{-z}}<br>$$</p><h4 id="Using-optimization-to-find-the-best-regression-coefficients"><a href="#Using-optimization-to-find-the-best-regression-coefficients" class="headerlink" title="Using optimization to find the best regression coefficients"></a>Using optimization to find the best regression coefficients</h4><p>  梯度上升法基本思想:要找到某函数的最大值,最好的方法是沿着该函数的梯度方向探寻.</p><p>  对于函数f(x,y),其梯度可以表示为:<br>$$<br>\nabla f(x,y)=\begin{pmatrix}\frac{\partial f(x,y)}{\partial x}\ \frac{\partial f(x,y)}{\partial y}\end{pmatrix}<br>$$<br>  迭代公式如下:<br>$$<br>w:=w+\alpha \nabla _wf(w)<br>$$<br>  α称为步长,或者学习率.该公式一直迭代,直到迭代次数达到规定,或者算法误差到达某个范围.</p><img src="/2017/05/15/Logistic-Regression/ga500.png" class="" title="梯度上升迭代500次得到的decision boundary"><p>  梯度上升算法在每次更新回归系数时,都要遍历整个数据集.如果样本特征和数量很多时,计算复杂度太高.改进策略是,一次只用一个点来更新回归系数,该方法称为随机梯度上升算法.</p><img src="/2017/05/15/Logistic-Regression/sga01.png" class="" title="随机梯度上升迭代1次得到的decision boundary"><p>  效果更糟了?不不不.当你比较这两种优化算法时,你必须保证得到的回归系数是收敛的.That is, are the parameters reaching a steady value, or are they constantly changing?</p><img src="/2017/05/15/Logistic-Regression/sga0200.png" class="" title="随机梯度上升迭代200次得到的decision boundary"><p>  可以看出,效果不错.可如果你有看迭代过程中回归系数的变化情况,会发现一些周期性的波动.样本中不能分类的点(数据集并非线性可分)在每次迭代时都会引发系数的剧烈改变.<br>  我们希望算法能避免来回波动,更快地收敛,于是有了改进的随机梯度上升算法:<br>  1. 步长不再一成不变<br>  2. 随机选取样本更新回归系数,选过的样本丢弃<br>    遍历20次的时候系数基本上就已经收敛了.代码中给的默认迭代次数是150次.<br>    <img src="/2017/05/15/Logistic-Regression/sga120.png" class="" title="改进随机梯度上升迭代20次得到的decision boundary"><br>    <img src="/2017/05/15/Logistic-Regression/sga1150.png" class="" title="改进随机梯度上升迭代150次得到的decision boundary"></p><p>  代码链接<br><a href="https://github.com/yikayiyo/machinelearninginaction/blob/master/Ch05/logRegres.py">https://github.com/yikayiyo/machinelearninginaction/blob/master/Ch05/logRegres.py</a></p><h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h4><p>  逻辑回归的目的是找非线性函数sigmoid的最佳拟合参数.<br>  为找最佳,最常用的是梯度上升法.<br>  简化版本为随机梯度上升算法,占用更少的计算机资源,是一个在线算法.<br>  通过调整步长和样本选取方式可以继续改进算法.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> machine learning </tag>
            
            <tag> classification </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Generative Model</title>
      <link href="/2017/05/10/Generative%20Model/"/>
      <url>/2017/05/10/Generative%20Model/</url>
      
        <content type="html"><![CDATA[<h2 id="Classification"><a href="#Classification" class="headerlink" title="Classification"></a>Classification</h2><p>​输入一些属性(input sth),经过一个function处理,输出一个结果(output sth)；</p><p>​包括二分类(Credit sorting)或者多分类(Handwritten character recognition,face recognition).</p><h3 id="how-to-do-classification"><a href="#how-to-do-classification" class="headerlink" title="how to do classification?"></a>how to do classification?</h3><p>​Binary classification as example: </p><span id="more"></span><p>​traning : Class 1 means the target is 1,Class 2 means the target is -1.<br>​Testing: closer to 1 -&gt; Class 1; closer to -1 -&gt; Class 2.<br>​理想情况下,我们要做的是找到Loss最小的function作为分类器,Loss根据具体情况定义.</p><h4 id="Generative-model"><a href="#Generative-model" class="headerlink" title="Generative model"></a>Generative model</h4><p>​生成模型的做法,要求p(Y|X)得先从数据中学习联合概率分布p(Y,X),然后利用贝叶斯公式求:<br>​<br>$$<br>p(Y|X)={p(Y,X)\over \sum p(Y_i,X)}\tag{1}<br>$$<br>​举个例子,假设我们现在有两个类,Class 1和Class 2,已知P(C1),P(C2),P(x|C1),P(x|C2).现在如果有x,那它属于某一类别的可能性,可由下面的公式算出:<br>$$<br>p(C_1|x) =\frac {p(C_1,x)}{p(C_1,x)+p(C_2,x)} \ = \frac{p(x|C_1)p(C_1)}{p(x|C_1)p(C_1)+p(x|C_2)p(C_2)}\tag{2}<br>$$</p><h4 id="Maximum-Likelihood"><a href="#Maximum-Likelihood" class="headerlink" title="Maximum Likelihood"></a>Maximum Likelihood</h4><p>​假设样本点均来自高斯分布,我们首先根据训练数据推导出这个高斯分布,然后就可以根据这个分布计算新样本来自于这个分布的概率了.比如说有,</p><p>$$<br>f_{\mu,\Sigma}(x)=\frac{1}{(2\pi)^{1/2}}\frac{1}{|\Sigma|^{1/2}}\exp \left \lbrace -\frac12(x-\mu)^T \Sigma^{-1} (x-\mu) \right\rbrace\tag{3}<br>$$</p><p>$$<br>\mathrm {the\ function\ determines\ by\ mean\ \mu \ and\ covariance\ matrix\ \Sigma}<br>$$<br>其实任何一个高斯分布都可以产生这些样本点,只是可能性的大小不同罢了(Diffierent Likelyhood.我们的目标是,找到最可能产生这些样本点的分布(即求出参数).<br>其中Likelyhood of a Gaussian = the probability of the Gaussian samples x1,x2,…,xN,记作:<br>$$<br>L(\mu,\Sigma)=\prod_{i=1}^Nf(x^i)\tag{4}<br>$$</p><p>根据maximum likelyhood有:<br>$$<br>{\mu^*,\Sigma^*}=arg \max_{\mu,\Sigma} L(\mu,\Sigma)\tag{5}<br>$$</p><p>计算时,根据下面的式子求解:<br>$$<br>\mu^*=\frac1N \sum_{i=1}^{N}x^i\tag{6}<br>$$</p><p>$$<br>\Sigma^*=\frac1N \sum_{i=1}^{N}{(x^i-\mu^*)(x^i-\mu^*)^T}\tag{7}<br>$$</p><h4 id="Now-we-can-do-classification"><a href="#Now-we-can-do-classification" class="headerlink" title="Now we can do classification"></a>Now we can do classification</h4><p>现在我们有了:<br>$$<br>f_{\mu^1,\Sigma^1}(x) = p(x|C_1)\tag{8.1}<br>$$</p><p>$$<br>f_{\mu^2,\Sigma^2}(x) = p(x|C_2)\tag{8.2}<br>$$</p><p>$$<br>p(C1)=\frac{count(C1)}{count(C1)+count(C2)}\tag{8.3}<br>$$</p><p>$$<br>p(C2)=\frac{count(C2)}{count(C1)+count(C2)}\tag{8.4}<br>$$</p><p>将(8)式代入(2)式就得到了p=P(C1|x),如果p&gt;0.5,x属于class 1,反之属于class 2.<br>这里我们假设数据分布满足高斯分布,当然也可以是其它分布!!</p><h4 id="Posterior-Probability"><a href="#Posterior-Probability" class="headerlink" title="Posterior Probability"></a>Posterior Probability</h4><p>在贝叶斯统计中，一个随机事件或者一个不确定事件的后验概率是在考虑和给出相关证据或数据后所得到的条件概率。<br>下面是比较有趣的一件事:<br>$$<br>p(C_1|x)={p(x|C_1)p(C_1)\over p(x|C_1)p(C_1)+p(x|C_2)p(C_2)}=\frac{1}{1+\frac{P(x|C_2)P(C_2)}{P(x|C_1)(C_1)}}=\frac{1}{1+\exp(-z)}=\sigma(z),这里有z=\ln \frac{P(x|C_1)P(C_1)}{P(x|C_2)P(C_2)}<br>\tag{9}<br>$$<br>Sigmoid函数!我确实是在学机器学习!<br>将(3)(8)带入(9)中,有<br>$$<br>z=\ln \frac{P(x|C_1)}{P(x|C_2)}+\ln \frac{P(C_1)}{P(C_2)}=\ln \frac{|\Sigma^2|^{0.5}}{|\Sigma^1|^{0.5}}-\frac12x^T(\Sigma^1)^{-1}x+\frac12x^T(\Sigma^2)^{-1}x-\frac12(\mu^1)^T(\Sigma^1)^{-1}\mu^1+\frac12(\mu^2)^T(\Sigma^2)^{-1}\mu^2+\ln \frac{count(C_1)}{count(C_1)}<br>$$<br>如果covariance matrix相同,则有,<br>$$<br>z=(\mu^1-\mu^2)^T\Sigma^{-1}x-\frac12(\mu^1)^T\Sigma^{-1}\mu^1+\frac12(\mu^2)^T\Sigma^{-1}\mu^2+\ln \frac{count(C_1)}{count(C_1)}=\omega^Tx+b,其中,\omega^T=(\mu^1-\mu^2)^T\Sigma^{-1},b=-\frac12(\mu^1)^T\Sigma^{-1}\mu^1+\frac12(\mu^2)^T\Sigma^{-1}\mu^2+\ln \frac{count(C_1)}{count(C_1)}<br>\tag{10}<br>$$</p><p>$$<br>\left[\ \mathbf {in \ generative \ model \ , we \ estimate\ count(C_1),\ count(C_2),\mu^1,\mu^2,\Sigma,then\ we\ have \ \omega \ and\ b}\ \right]<br>$$</p><p>直接求w和b会怎么样?也就是所谓的Logistic Regression模型了!</p><p>参考<a href="https://www.youtube.com/watch?v=fZAZUYEeIMg">https://www.youtube.com/watch?v=fZAZUYEeIMg</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> machine learning </tag>
            
            <tag> classification </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>what`s overfitting in machine learning</title>
      <link href="/2017/04/30/what-s-overfitting-in-machine-learning/"/>
      <url>/2017/04/30/what-s-overfitting-in-machine-learning/</url>
      
        <content type="html"><![CDATA[<h4 id="过拟合-欠拟合"><a href="#过拟合-欠拟合" class="headerlink" title="过拟合?欠拟合?"></a>过拟合?欠拟合?</h4><p>​ 一般情况我们把学习器在训练集上的误差称为’训练误差’(training error),在新样本上的误差称为’泛化误差’(generalization error).而机器学习的目的是得到泛化误差小的学习器.</p><p>​ 为了得到性能较好的学习器,我们尽可能多地学习适用于所有潜在样本的普遍规律.(考虑得尽可能的多)</p><p>​ 然而,当学习器把训练样本学习得’太好’的时候,很有可能把训练样本本身的一些特点当成了所有潜在样本都会有的一般性质.这样的学习器泛化性能下降了,这就是’过拟合’.与之相对的’欠拟合’,指对训练样本的一般性质尚未学好.下图中的 1,3 分别表示了欠拟合和过拟合.</p><span id="more"></span><img src="/2017/04/30/what-s-overfitting-in-machine-learning/underfitting_overfitting_001.png" class="" title="图示"><p>(A more complex model yields lower error on training data.(if we can truly find the best function)But a more complex model does not always lead to better performance on testing data.This is <strong>Overfitting</strong>.)</p><hr><h4 id="发生原因"><a href="#发生原因" class="headerlink" title="发生原因?"></a>发生原因?</h4><h5 id="对于过拟合"><a href="#对于过拟合" class="headerlink" title="对于过拟合:"></a>对于过拟合:</h5><p>​ (1) 训练<strong>数据</strong>有噪声 (2) 训练<strong>模型</strong>过度复杂</p><h5 id="对于欠拟合"><a href="#对于欠拟合" class="headerlink" title="对于欠拟合:"></a>对于欠拟合:</h5><p>​ (1) 训练<strong>模型</strong>过度简单</p><hr><h4 id="如何克服"><a href="#如何克服" class="headerlink" title="如何克服?"></a>如何克服?</h4><h5 id="对于欠拟合-1"><a href="#对于欠拟合-1" class="headerlink" title="对于欠拟合:"></a>对于欠拟合:</h5><p>​ 增强学习能力,重新设计模型:</p><p>​ 比如在决策树学习中拓展分支,在神经网络学习中增加训练轮数等；</p><h5 id="对于过拟合-1"><a href="#对于过拟合-1" class="headerlink" title="对于过拟合:"></a>对于过拟合:</h5><p>​ 首先必须认识到过拟合是无法避免的,我们能做到只能是**”缓解”**!</p><p>​ 可以考虑的是: (1)更多的训练数据 (有效但是并不总是可行) (2)正则化</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> machine learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python迭代器(2)</title>
      <link href="/2017/04/19/python%E8%BF%AD%E4%BB%A3%E5%99%A8-2/"/>
      <url>/2017/04/19/python%E8%BF%AD%E4%BB%A3%E5%99%A8-2/</url>
      
        <content type="html"><![CDATA[<p>昨天的问题解决了   -   -</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>i.__iter__()</span><br><span class="line">&lt;listiterator <span class="built_in">object</span> at <span class="number">0x7f5f9d3f2310</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i.__iter__()</span><br><span class="line">&lt;listiterator <span class="built_in">object</span> at <span class="number">0x7f5f9d3f22d0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i.__iter__()</span><br><span class="line">&lt;listiterator <span class="built_in">object</span> at <span class="number">0x7f5f9d3f2350</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>每次调用 ***i._<em>iter</em>_()<em><strong>时总会产生新的iterator对象,这样调用</strong></em>next()***时才会总是输出1.</p><p>去麻烦了一下外国朋友,顺便写了写英文 : )</p><p>我之前为什么会觉得四次调用是作用在同一个对象上的呢? 尴尬 -  -</p><p>[<a href="http://stackoverflow.com/questions/43487625/what-happend-when-i-assign-an-iterator-to-a-variable]">http://stackoverflow.com/questions/43487625/what-happend-when-i-assign-an-iterator-to-a-variable]</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 迭代器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python迭代器(1)</title>
      <link href="/2017/04/18/python%E8%BF%AD%E4%BB%A3%E5%99%A8-1/"/>
      <url>/2017/04/18/python%E8%BF%AD%E4%BB%A3%E5%99%A8-1/</url>
      
        <content type="html"><![CDATA[<p>选用一个可迭代的列表对象实验:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>i=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> t <span class="keyword">in</span> i:</span><br><span class="line">  <span class="built_in">print</span> t</span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i.__iter__</span><br><span class="line">&lt;method-wrapper <span class="string">'__iter__'</span> of <span class="built_in">list</span> <span class="built_in">object</span> at <span class="number">0x04040378</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i.__iter__()</span><br><span class="line">&lt;listiterator <span class="built_in">object</span> at <span class="number">0x040561F0</span>&gt;</span><br></pre></td></tr></tbody></table></figure><p>从上面的代码可知:</p><p>​<strong>可迭代对象实现了__iter__方法</strong>或一个实现了__iter__方法的对象是可迭代的(iterable);</p><p>​<strong>可迭代对象调用__iter__方法会返回一个迭代器(iterator)</strong></p><p>接下来继续实验:</p><span id="more"></span><p>​书中说到,所谓的迭代器就是具有next()方法的对象,调用next()方法会返回该对象的下一个值,如果该方法被调用,但是迭代器没有值可以返回,就会引发一个StopIteration异常.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>i.__iter__().<span class="built_in">next</span>()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i.__iter__().<span class="built_in">next</span>()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i.__iter__().<span class="built_in">next</span>()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i.__iter__().<span class="built_in">next</span>()</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><p>并没有按照我的想法打印出1,2,3,4.</p><p>尝试下面的代码:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ite=i.__iter__()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ite</span><br><span class="line">&lt;listiterator <span class="built_in">object</span> at <span class="number">0x040564F0</span>&gt;</span><br><span class="line">&gt;&gt;&gt;ite.<span class="built_in">next</span>()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ite.<span class="built_in">next</span>()</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ite.<span class="built_in">next</span>()</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ite.<span class="built_in">next</span>()</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ite.<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#23&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    ite.<span class="built_in">next</span>()</span><br><span class="line">StopIteration</span><br></pre></td></tr></tbody></table></figure><p>原因还没想到啊…</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 迭代器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开篇</title>
      <link href="/2017/04/04/%E5%BC%80%E7%AF%87/"/>
      <url>/2017/04/04/%E5%BC%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>  昨天看了中学生的一篇作文，是给未来自己的一些话。虽然感觉她深受网络文学影响，但字里行间对未来的向往却叫我这个老年人百感交集了。<br>  来这里写点什么，可能吐个槽，可能耍个机灵，可能翻译个东西，也会把学习笔记整理上来。<br>  希望多年之后，还能看得懂自己。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
