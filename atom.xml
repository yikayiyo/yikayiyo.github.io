<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Misbehavior</title>
  
  
  <link href="https://yikayiyo.github.io/atom.xml" rel="self"/>
  
  <link href="https://yikayiyo.github.io/"/>
  <updated>2023-11-22T10:18:22.751Z</updated>
  <id>https://yikayiyo.github.io/</id>
  
  <author>
    <name>yikayiyo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一点思索</title>
    <link href="https://yikayiyo.github.io/2023/01/17/%E4%B8%80%E7%82%B9%E6%80%9D%E7%B4%A2/"/>
    <id>https://yikayiyo.github.io/2023/01/17/%E4%B8%80%E7%82%B9%E6%80%9D%E7%B4%A2/</id>
    <published>2023-01-17T13:22:33.000Z</published>
    <updated>2023-11-22T10:18:22.751Z</updated>
    
    <content type="html"><![CDATA[<p>前几天的一个晚上，心里突然感觉很不舒服，也不知道啥原因，就拉朋友视频了一小会儿。</p><p>半夜突然醒来，想起了原因。</p><p>原来是因为广州撞人的视频。</p><p>很难受。</p><p>本来在去购物路上的人，本来在去看望朋友路上的人，本来在去见恋人路上的人。本来就是如常过马路的人，人生就这样结束了，留给亲人朋友的痛苦却仍要持续很长时间。忍不住要问，为什么呢？生命可以再不公平些么？</p><p>没什么新闻报导，身边也没人提起。</p><p>今天以及今天之前，每天都能见到的这些人，可能从明天开始就再也见不到了。</p><p>在分开之前，我并没有珍惜我们相处的时间。</p><p>没有寒暄问候，没有认真注视，没有仔细聆听，没有分享心情，没有约过饭，没有一起逛街，没有吃遍小吃摊，没有紧紧地拥抱彼此。</p><p>为什么不主动地去聊聊天呢？为什么不好好看对方的脸呢？为什么不去制造羁绊呢？</p><p>难不成我是为了那一天不那么难受，故意和每一个人保持距离，既然那一天迟早都会到来。</p><p>如果我也是那天的路人之一呢？</p><p>我不希望难过的人可能难以接受事实，我希望为我伤心的人心里会有波澜吗？</p><p>我有这一丝的希望，竟然。</p><p>人死了或许会转生成一只狗，来到喜欢的人身边。不能说话，于是就使劲地往人身上扑，一边开心地摇着尾巴，一边忍不住地哼唧。用头顶你的手，意思是快来抚摸。你看它一眼，它就过来盯着你，好像要弥补前世没有看够的遗憾。你夸它一句，它就笑了，仿佛在告诉你，它听懂了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前几天的一个晚上，心里突然感觉很不舒服，也不知道啥原因，就拉朋友视频了一小会儿。&lt;/p&gt;
&lt;p&gt;半夜突然醒来，想起了原因。&lt;/p&gt;
&lt;p&gt;原来是因为广州撞人的视频。&lt;/p&gt;
&lt;p&gt;很难受。&lt;/p&gt;
&lt;p&gt;本来在去购物路上的人，本来在去看望朋友路上的人，本来在去见恋人路上的人</summary>
      
    
    
    
    
    <category term="杂" scheme="https://yikayiyo.github.io/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>重写duozhuavue书架</title>
    <link href="https://yikayiyo.github.io/2022/03/26/%E9%87%8D%E5%86%99duozhuavue%E4%B9%A6%E6%9E%B6/"/>
    <id>https://yikayiyo.github.io/2022/03/26/%E9%87%8D%E5%86%99duozhuavue%E4%B9%A6%E6%9E%B6/</id>
    <published>2022-03-26T01:16:11.000Z</published>
    <updated>2023-11-22T10:18:22.940Z</updated>
    
    <content type="html"><![CDATA[<a href="/2022/03/14/Apollo%20Client%20%E7%BC%93%E5%AD%98%E5%A4%84%E7%90%86%E5%B0%8F%E7%BB%93/" title="Apollo Client 缓存处理小结">Apollo Client 缓存处理小结</a> 中提到了书架功能存在的问题：<p>每一本书籍对应一个查询（即一个 HTTP 请求），当从未登录状态切换到登录状态时，主页所有已经加载的书籍都会发送请求，判断它是否在当前用户的书架上。</p><p>理想的实现中，在用户登录后，应该只发送一个请求，用于获取书单信息流。</p><h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><ol><li>将查询 <code>isBookInBookshelf</code> 移动到 <code>Book</code> 类型下</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bookType = <span class="string">`</span></span><br><span class="line"><span class="string">  type Book {</span></span><br><span class="line"><span class="string">    ...</span></span><br><span class="line"><span class="string">    isBookInBookshelf(userId: ID!): Boolean!</span></span><br><span class="line"><span class="string">  }</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>实现该字段的 <code>resolver</code> 函数</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bookResolver = {</span><br><span class="line">  ...</span><br><span class="line">  <span class="title class_">Book</span>: {</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">isBookInBookshelf</span>: <span class="title function_">async</span>({ id }, { userId } , { models }) =&gt; {</span><br><span class="line">      <span class="keyword">if</span>(userId === <span class="string">""</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">const</span> user = <span class="keyword">await</span> models.<span class="property">User</span>.<span class="title function_">findById</span>(userId);</span><br><span class="line">      <span class="keyword">return</span> user.<span class="property">bookShelf</span>.<span class="title function_">indexOf</span>(id) !== -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><ol start="3"><li>修改 <code>GET_CATEGORY_FEED schema</code>，接收 <code>userId</code> 参数，返回的书籍中包含 <code>isBookInBookshelf</code> 字段</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">GET_CATEGORY_FEED</span> = gql`<span class="language-graphql"></span></span><br><span class="line"><span class="language-graphql">  <span class="keyword">query</span> getCategoryFeed<span class="punctuation">(</span></span></span><br><span class="line"><span class="language-graphql">    <span class="punctuation">...</span></span></span><br><span class="line"><span class="language-graphql">    <span class="variable">$userId</span>: ID<span class="punctuation">!</span></span></span><br><span class="line"><span class="language-graphql">  <span class="punctuation">)</span> <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">    categoryFeed<span class="punctuation">(</span><span class="symbol">first</span><span class="punctuation">:</span> <span class="variable">$first</span>, <span class="symbol">after</span><span class="punctuation">:</span> <span class="variable">$after</span>) <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">      pageInfo <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">        hasNextPage</span></span><br><span class="line"><span class="language-graphql">        endCursor</span></span><br><span class="line"><span class="language-graphql">      <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">      edges <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">        node <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">          id</span></span><br><span class="line"><span class="language-graphql">          name</span></span><br><span class="line"><span class="language-graphql">          items<span class="punctuation">(</span><span class="symbol">first</span><span class="punctuation">:</span> <span class="variable">$itemsFirst</span>, <span class="symbol">after</span><span class="punctuation">:</span> <span class="variable">$itemsAfter</span>) <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">            pageInfo <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">              endCursor</span></span><br><span class="line"><span class="language-graphql">              hasNextPage</span></span><br><span class="line"><span class="language-graphql">            <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">            edges <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">              node <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">                id</span></span><br><span class="line"><span class="language-graphql">                <span class="punctuation">...</span></span></span><br><span class="line"><span class="language-graphql">                isBookInBookshelf<span class="punctuation">(</span><span class="symbol">userId</span><span class="punctuation">:</span> <span class="variable">$userId</span>)</span></span><br><span class="line"><span class="language-graphql">              <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">            <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">          <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">        <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">      <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">    <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">  <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">`</span>;</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>在组件中修改查询，传入参数 <code>userId</code></li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userId = <span class="title function_">useLoggedInUserId</span>();</span><br><span class="line"><span class="keyword">const</span> {</span><br><span class="line">  <span class="attr">result</span>: categoryFeedResult,</span><br><span class="line">  <span class="attr">loading</span>: categoryFeedLoading,</span><br><span class="line">  <span class="attr">error</span>: categoryFeedError,</span><br><span class="line">  fetchMore,</span><br><span class="line">  networkStatus,</span><br><span class="line">} = <span class="title function_">useQuery</span>(</span><br><span class="line">  <span class="variable constant_">GET_CATEGORY_FEED</span>,</span><br><span class="line">  <span class="function">() =&gt;</span> ({</span><br><span class="line">    <span class="attr">after</span>: after.<span class="property">value</span>,</span><br><span class="line">    <span class="attr">first</span>: first.<span class="property">value</span>,</span><br><span class="line">    <span class="attr">itemsAfter</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">itemsFirst</span>: <span class="number">3</span>,</span><br><span class="line">    userId</span><br><span class="line">  }),</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">notifyOnNetworkStatusChange</span>: <span class="literal">true</span>,</span><br><span class="line">  }</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><ol start="5"><li>修改缓存的处理方式</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cache = <span class="keyword">new</span> <span class="title class_">InMemoryCache</span>({</span><br><span class="line">  <span class="attr">typePolicies</span>: {</span><br><span class="line">    ...</span><br><span class="line">    <span class="title class_">Book</span>: {</span><br><span class="line">      <span class="attr">fields</span>: {</span><br><span class="line">        <span class="attr">isBookInBookshelf</span>: {</span><br><span class="line">          <span class="attr">keyArgs</span>: [<span class="string">"userId"</span>]</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><center style="display: flex; justify-content: space-between;"><div><img src="/2022/03/26/%E9%87%8D%E5%86%99duozhuavue%E4%B9%A6%E6%9E%B6/after.png" class="" width="300" title="修改后的请求数量"></div><div><img src="/2022/03/26/%E9%87%8D%E5%86%99duozhuavue%E4%B9%A6%E6%9E%B6/cache-after.png" class="" width="300" title="修改后的缓存"></div></center><ol start="6"><li>修改添加书籍或删除书籍时的逻辑<br> <strong>乐观更新</strong>：先修改客户端状态，再发送网络请求。如果请求失败，重置客户端状态。</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">addToBookShelf</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">  <span class="comment">// 乐观更新，先修改客户端状态</span></span><br><span class="line">  isInBookshelf.<span class="property">value</span> = !isInBookshelf.<span class="property">value</span>;</span><br><span class="line">  <span class="comment">// 再发送请求（send mutation</span></span><br><span class="line">  <span class="title function_">toggleBookshelf</span>();</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> { <span class="attr">mutate</span>: toggleBookshelf, <span class="attr">onDone</span>: onToggle } = <span class="title function_">useMutation</span>(</span><br><span class="line">  <span class="variable constant_">TOGGLE_BOOKSHELF_MUTATION</span>,</span><br><span class="line">  <span class="function">() =&gt;</span> ({</span><br><span class="line">    <span class="attr">variables</span>: {</span><br><span class="line">      <span class="attr">bookId</span>: bookId.<span class="property">value</span>,</span><br><span class="line">      userId,</span><br><span class="line">    },</span><br><span class="line">  })</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="title function_">onToggle</span>(<span class="function">(<span class="params">{ data: { toggleBookshelf } }</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">if</span> (toggleBookshelf.<span class="property">success</span> === <span class="literal">true</span>) {</span><br><span class="line">    toast.<span class="title function_">success</span>(toggleBookshelf.<span class="property">message</span>);</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="comment">// 请求失败，重置客户端状态</span></span><br><span class="line">    isInBookshelf.<span class="property">value</span> = !isInBookshelf.<span class="property">value</span>;</span><br><span class="line">    toast.<span class="title function_">info</span>(toggleBookshelf.<span class="property">message</span>);</span><br><span class="line">  }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;a href=&quot;/2022/03/14/Apollo%20Client%20%E7%BC%93%E5%AD%98%E5%A4%84%E7%90%86%E5%B0%8F%E7%BB%93/&quot; title=&quot;Apollo Client 缓存处理小结&quot;&gt;Apollo Client 缓存处理小结&lt;/a&gt; 中提到了书架功能存在的问题：

&lt;p&gt;每一本书籍对应一个查询（即一个 HTTP 请求），当从未登录状态切换到登录状态时，主页所有已经加载的书籍都会发送请求，判断它是否在当前用户的书架上。&lt;/p&gt;
&lt;p&gt;理想的实现中，在用户登录后，应该只发送一个请求，用于获取书单信息流。&lt;/p&gt;
&lt;h2 id=&quot;改进&quot;&gt;&lt;a href=&quot;#改进&quot; class=&quot;headerlink&quot; title=&quot;改进&quot;&gt;&lt;/a&gt;改进&lt;/h2&gt;&lt;h3 id=&quot;后端&quot;&gt;&lt;a href=&quot;#后端&quot; class=&quot;headerlink&quot; title=&quot;后端&quot;&gt;&lt;/a&gt;后端&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;将查询 &lt;code&gt;isBookInBookshelf&lt;/code&gt; 移动到 &lt;code&gt;Book&lt;/code&gt; 类型下&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; bookType = &lt;span class=&quot;string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  type Book {&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    isBookInBookshelf(userId: ID!): Boolean!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;`&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;实现该字段的 &lt;code&gt;resolver&lt;/code&gt; 函数&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; bookResolver = {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;title class_&quot;&gt;Book&lt;/span&gt;: {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;isBookInBookshelf&lt;/span&gt;: &lt;span class=&quot;title function_&quot;&gt;async&lt;/span&gt;({ id }, { userId } , { models }) =&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(userId === &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; user = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; models.&lt;span class=&quot;property&quot;&gt;User&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;findById&lt;/span&gt;(userId);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; user.&lt;span class=&quot;property&quot;&gt;bookShelf&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;indexOf&lt;/span&gt;(id) !== -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;};&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://yikayiyo.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="graphql" scheme="https://yikayiyo.github.io/tags/graphql/"/>
    
    <category term="duozhuavue" scheme="https://yikayiyo.github.io/tags/duozhuavue/"/>
    
  </entry>
  
  <entry>
    <title>Apollo Client 缓存处理小结</title>
    <link href="https://yikayiyo.github.io/2022/03/14/Apollo%20Client%20%E7%BC%93%E5%AD%98%E5%A4%84%E7%90%86%E5%B0%8F%E7%BB%93/"/>
    <id>https://yikayiyo.github.io/2022/03/14/Apollo%20Client%20%E7%BC%93%E5%AD%98%E5%A4%84%E7%90%86%E5%B0%8F%E7%BB%93/</id>
    <published>2022-03-14T14:01:27.000Z</published>
    <updated>2023-11-22T10:18:22.687Z</updated>
    
    <content type="html"><![CDATA[<p>记录开发 <a href="https://duozhuavue.vercel.app/book">duozhuavue💚</a> 时对 <a href="https://www.apollographql.com/docs/react/caching/overview/">Apollo Client</a> 缓存的处理方法。</p><h2 id="为什么要处理缓存？"><a href="#为什么要处理缓存？" class="headerlink" title="为什么要处理缓存？"></a>为什么要处理缓存？</h2><p>修改数据后，如果不对缓存中的数据进行修改，那么会造成服务器端和客户端的<strong>数据不一致</strong>，修改也不能在前端得到体现。</p><p>在 <a href="https://duozhuavue.vercel.app/book">duozhuavue💚</a> 中，需要处理缓存的地方有书籍评论，用户书架，主页信息流分页。</p><h2 id="缓存处理方法"><a href="#缓存处理方法" class="headerlink" title="缓存处理方法"></a>缓存处理方法</h2><p> <a href="https://www.apollographql.com/docs/react/caching/overview/">Apollo Client</a> 提供了几种方式与缓存数据交互</p><ul><li><a href="https://www.apollographql.com/docs/react/caching/cache-interaction#using-graphql-queries">使用 GraphQL queries</a></li><li><a href="https://www.apollographql.com/docs/react/caching/cache-interaction#using-graphql-fragments">使用 GraphQL fragments</a></li><li><a href="https://www.apollographql.com/docs/react/caching/cache-interaction#using-cachemodify">直接修改缓存对象的字段</a></li><li><a href="https://www.apollographql.com/docs/react/caching/cache-field-behavior">配置缓存字段策略</a></li></ul><p>结合开发过程中的具体情况，处理缓存数据时可以采取不同的方式。</p><h2 id="书籍评论"><a href="#书籍评论" class="headerlink" title="书籍评论"></a>书籍评论</h2><h3 id="后端定义"><a href="#后端定义" class="headerlink" title="后端定义"></a>后端定义</h3><p>后端代码中 <code>Book</code> 的 <code>schema</code> 定义如下：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">Book</span> {</span><br><span class="line">  <span class="attr">id</span>: <span class="variable constant_">ID</span>!</span><br><span class="line">  <span class="attr">title</span>: <span class="title class_">String</span>!</span><br><span class="line">    ...</span><br><span class="line">  <span class="attr">comments</span>: [<span class="title class_">Comment</span>!]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>有用的信息是，<code>Book</code> 的 <code>comments</code> 字段返回该书的评论列表。</p><span id="more"></span><p>和评论相关的几个 <code>mutation</code> 定义如下：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">Mutation</span>{</span><br><span class="line">    ...</span><br><span class="line">    <span class="title function_">addComment</span>(<span class="attr">bookId</span>: <span class="variable constant_">ID</span>!, <span class="attr">userId</span>: <span class="variable constant_">ID</span>!, <span class="attr">content</span>: <span class="title class_">String</span>!, <span class="attr">rating</span>: <span class="title class_">Int</span>, <span class="attr">created</span>: <span class="title class_">DateTime</span>!): addCommentResponse!</span><br><span class="line">    <span class="title function_">deleteComment</span>(<span class="attr">bookId</span>: <span class="variable constant_">ID</span>!, <span class="attr">commentId</span>: <span class="variable constant_">ID</span>!): deleteCommentResponse!</span><br><span class="line">    <span class="title function_">updateComment</span>(<span class="attr">commentId</span>: <span class="variable constant_">ID</span>!, <span class="attr">rating</span>: <span class="title class_">Int</span>!, <span class="attr">content</span>: <span class="title class_">String</span>, <span class="attr">updatedAt</span>: <span class="title class_">DateTime</span>!): updateCommentResponse!</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">type addCommentResponse implements <span class="title class_">MutationResponse</span> {</span><br><span class="line">    <span class="attr">code</span>: <span class="title class_">String</span>!</span><br><span class="line">    <span class="attr">success</span>: <span class="title class_">Boolean</span>!</span><br><span class="line">    <span class="attr">message</span>: <span class="title class_">String</span>!</span><br><span class="line">    <span class="attr">book</span>: <span class="title class_">Book</span></span><br><span class="line">    <span class="attr">comment</span>: <span class="title class_">Comment</span></span><br><span class="line">}</span><br><span class="line">type deleteCommentResponse implements <span class="title class_">MutationResponse</span> {</span><br><span class="line">    <span class="attr">code</span>: <span class="title class_">String</span>!</span><br><span class="line">    <span class="attr">success</span>: <span class="title class_">Boolean</span>!</span><br><span class="line">    <span class="attr">message</span>: <span class="title class_">String</span>!</span><br><span class="line">    <span class="attr">book</span>: <span class="title class_">Book</span></span><br><span class="line">}</span><br><span class="line">type updateCommentResponse implements <span class="title class_">MutationResponse</span> {</span><br><span class="line">    <span class="attr">code</span>: <span class="title class_">String</span>!</span><br><span class="line">    <span class="attr">success</span>: <span class="title class_">Boolean</span>!</span><br><span class="line">    <span class="attr">message</span>: <span class="title class_">String</span>!</span><br><span class="line">    <span class="attr">comment</span>: <span class="title class_">Comment</span></span><br><span class="line">}</span><br><span class="line"> </span><br></pre></td></tr></tbody></table></figure><p>从代码可以知道：</p><ul><li><code>addComment</code> 的返回值中包含新生成的 <code>Comment</code> 对象和更新后的 <code>Book</code> 对象</li><li><code>deleteComment</code> 的返回值中包含更新后的 <code>Book</code> 对象</li><li><code>updateComment</code> 的返回值中包含更新后的 <code>Comment</code> 对象</li></ul><h3 id="发送-Mutation"><a href="#发送-Mutation" class="headerlink" title="发送 Mutation"></a>发送 Mutation</h3><p>客户端利用 <code>vue-apollo</code> 发送 <code>Mutation</code> 请求。</p><p>对缓存的操作主要包括两个部分：</p><ul><li><code>Comment</code> 对象</li><li><code>Book</code> 对象的 <code>comments</code> 字段</li></ul><h4 id="添加评论"><a href="#添加评论" class="headerlink" title="添加评论"></a>添加评论</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">ADD_COMMENT_MUTATION</span> = gql`<span class="language-graphql"></span></span><br><span class="line"><span class="language-graphql">  <span class="keyword">mutation</span> addComment<span class="punctuation">(</span></span></span><br><span class="line"><span class="language-graphql">    <span class="variable">$bookId</span>: ID<span class="punctuation">!</span></span></span><br><span class="line"><span class="language-graphql">    <span class="variable">$userId</span>: ID<span class="punctuation">!</span></span></span><br><span class="line"><span class="language-graphql">    <span class="variable">$content</span>: String<span class="punctuation">!</span></span></span><br><span class="line"><span class="language-graphql">    <span class="variable">$created</span>: DateTime<span class="punctuation">!</span></span></span><br><span class="line"><span class="language-graphql">    <span class="variable">$rating</span>: Int</span></span><br><span class="line"><span class="language-graphql">  <span class="punctuation">)</span> <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">    addComment<span class="punctuation">(</span></span></span><br><span class="line"><span class="language-graphql">      <span class="symbol">bookId</span><span class="punctuation">:</span> <span class="variable">$bookId</span></span></span><br><span class="line"><span class="language-graphql">      <span class="symbol">userId</span><span class="punctuation">:</span> <span class="variable">$userId</span></span></span><br><span class="line"><span class="language-graphql">      <span class="symbol">content</span><span class="punctuation">:</span> <span class="variable">$content</span></span></span><br><span class="line"><span class="language-graphql">      <span class="symbol">created</span><span class="punctuation">:</span> <span class="variable">$created</span></span></span><br><span class="line"><span class="language-graphql">      <span class="symbol">rating</span><span class="punctuation">:</span> <span class="variable">$rating</span></span></span><br><span class="line"><span class="language-graphql">    <span class="punctuation">)</span> <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">      code</span></span><br><span class="line"><span class="language-graphql">      success</span></span><br><span class="line"><span class="language-graphql">      message</span></span><br><span class="line"><span class="language-graphql">      comment <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">        id</span></span><br><span class="line"><span class="language-graphql">        content</span></span><br><span class="line"><span class="language-graphql">        commenter <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">          name</span></span><br><span class="line"><span class="language-graphql">        <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">      <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">      book <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">        id</span></span><br><span class="line"><span class="language-graphql">        comments <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">          content</span></span><br><span class="line"><span class="language-graphql">          createdAt</span></span><br><span class="line"><span class="language-graphql">        <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">      <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">    <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">  <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> {</span><br><span class="line">    <span class="attr">mutate</span>: addComment,</span><br><span class="line">    <span class="attr">loading</span>: addCommentLoading,</span><br><span class="line">    onDone,</span><br><span class="line">} = <span class="title function_">useMutation</span>(<span class="variable constant_">ADD_COMMENT_MUTATION</span>, <span class="function">() =&gt;</span> ({</span><br><span class="line">    <span class="attr">variables</span>: {</span><br><span class="line">        bookId,</span><br><span class="line">        userId,</span><br><span class="line">        <span class="attr">content</span>: content.<span class="property">value</span>,</span><br><span class="line">        <span class="attr">created</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toISOString</span>(),</span><br><span class="line">        <span class="attr">rating</span>: rating.<span class="property">value</span>,</span><br><span class="line">    },</span><br><span class="line">}));</span><br><span class="line"><span class="title function_">onDone</span>(<span class="function">(<span class="params">{ data: { addComment } }</span>) =&gt;</span> {</span><br><span class="line">    router.<span class="title function_">replace</span>(<span class="string">"/books/"</span> + bookId + <span class="string">"?target=book-comment-wrapper"</span>);</span><br><span class="line">    rating.<span class="property">value</span> = <span class="number">0</span>;</span><br><span class="line">    content.<span class="property">value</span> = <span class="string">""</span>;</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>这里没有定义缓存处理方法。原因是：</p><ul><li>新生成的 <code>Comment</code> 对象，会自动保存在缓存中</li><li>对于 <code>Book</code> 来说，由于返回了一个相同 <code>id</code> 的 <code>Book</code> 数据，该数据会自动覆盖缓存中的旧数据（Book 中的各个字段都会被覆盖</li></ul><blockquote><p>默认情况下，在缓存中使用对象的类型名+”:”+<code>id</code> 唯一标识一个缓存对象</p></blockquote><img src="/2022/03/14/Apollo%20Client%20%E7%BC%93%E5%AD%98%E5%A4%84%E7%90%86%E5%B0%8F%E7%BB%93/%E7%BC%93%E5%AD%98%E6%A0%87%E8%AF%86%E7%AC%A6.png" class="" title="默认情况下，缓存标识符有类型名+`:`+`id`构成"><h4 id="删除评论"><a href="#删除评论" class="headerlink" title="删除评论"></a>删除评论</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">DELETE_COMMENT_MUTATION</span> = gql`<span class="language-graphql"></span></span><br><span class="line"><span class="language-graphql">  <span class="keyword">mutation</span> deleteComment<span class="punctuation">(</span><span class="variable">$bookId</span>: ID<span class="punctuation">!</span>, <span class="variable">$commentId</span>: ID<span class="punctuation">!</span><span class="punctuation">)</span> <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">    deleteComment<span class="punctuation">(</span><span class="symbol">bookId</span><span class="punctuation">:</span> <span class="variable">$bookId</span>, <span class="symbol">commentId</span><span class="punctuation">:</span> <span class="variable">$commentId</span>) <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">      code</span></span><br><span class="line"><span class="language-graphql">      success</span></span><br><span class="line"><span class="language-graphql">      message</span></span><br><span class="line"><span class="language-graphql">      book <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">        id</span></span><br><span class="line"><span class="language-graphql">        comments <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">          id</span></span><br><span class="line"><span class="language-graphql">          content</span></span><br><span class="line"><span class="language-graphql">          createdAt</span></span><br><span class="line"><span class="language-graphql">        <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">      <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">    <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">  <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> { <span class="attr">mutate</span>: deleteComment, <span class="attr">onDone</span>: onCommentDelete } = <span class="title function_">useMutation</span>(</span><br><span class="line">    <span class="variable constant_">DELETE_COMMENT_MUTATION</span>,</span><br><span class="line">    <span class="function">() =&gt;</span> ({</span><br><span class="line">        <span class="attr">variables</span>: {</span><br><span class="line">            bookId,</span><br><span class="line">            commentId,</span><br><span class="line">        },</span><br><span class="line">        <span class="attr">update</span>: <span class="function">(<span class="params">cache</span>) =&gt;</span> {</span><br><span class="line">            <span class="comment">// 删除cache中的该条comment</span></span><br><span class="line">            <span class="keyword">const</span> normalizedId = cache.<span class="title function_">identify</span>({</span><br><span class="line">                <span class="attr">id</span>: commentId,</span><br><span class="line">                <span class="attr">__typename</span>: <span class="string">"Comment"</span>,</span><br><span class="line">            });</span><br><span class="line">            cache.<span class="title function_">evict</span>({ <span class="attr">id</span>: normalizedId });</span><br><span class="line">            cache.<span class="title function_">gc</span>();</span><br><span class="line">        },</span><br><span class="line">    })</span><br><span class="line">);</span><br><span class="line"><span class="title function_">onCommentDelete</span>(<span class="function">(<span class="params">{ data: { deleteComment } }</span>) =&gt;</span> {</span><br><span class="line">    toast.<span class="title function_">success</span>(deleteComment.<span class="property">message</span>);</span><br><span class="line">    router.<span class="title function_">go</span>(-<span class="number">1</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>这里定义了缓存处理方法</p><ul><li>找到该 <code>comment</code> 在缓存中的对应数据，删除</li></ul><p>对于 <code>Book.comments</code> 缓存，返回的新数据会自动覆盖旧数据。</p><p><span class="emoji" alias="eye" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f441.png?v8">👁</span> 当你这样处理时，控制台会发出警告，提示</p><img src="/2022/03/14/Apollo%20Client%20%E7%BC%93%E5%AD%98%E5%A4%84%E7%90%86%E5%B0%8F%E7%BB%93/console-warning.png" class="" title="提示缓存数据可能丢失"><p><a href="https://community.apollographql.com/t/reasons-of-cache-data-may-be-lost-when-replacing-warning/1766">关于控制台警告</a>这里描述了类似的问题，因为默认行为符合需求，所以不需要额外的<a href="https://www.apollographql.com/docs/react/caching/cache-field-behavior/">字段策略</a>设置，可以忽略该警告。</p><h4 id="更新评论"><a href="#更新评论" class="headerlink" title="更新评论"></a>更新评论</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">UPDATE_COMMENT_MUTATION</span> = gql`<span class="language-graphql"></span></span><br><span class="line"><span class="language-graphql">  <span class="keyword">mutation</span> UpdateComment<span class="punctuation">(</span></span></span><br><span class="line"><span class="language-graphql">    <span class="variable">$commentId</span>: ID<span class="punctuation">!</span></span></span><br><span class="line"><span class="language-graphql">    <span class="variable">$rating</span>: Int<span class="punctuation">!</span></span></span><br><span class="line"><span class="language-graphql">    <span class="variable">$updatedAt</span>: DateTime<span class="punctuation">!</span></span></span><br><span class="line"><span class="language-graphql">    <span class="variable">$content</span>: String</span></span><br><span class="line"><span class="language-graphql">  <span class="punctuation">)</span> <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">    updateComment<span class="punctuation">(</span></span></span><br><span class="line"><span class="language-graphql">      <span class="symbol">commentId</span><span class="punctuation">:</span> <span class="variable">$commentId</span></span></span><br><span class="line"><span class="language-graphql">      <span class="symbol">rating</span><span class="punctuation">:</span> <span class="variable">$rating</span></span></span><br><span class="line"><span class="language-graphql">      <span class="symbol">updatedAt</span><span class="punctuation">:</span> <span class="variable">$updatedAt</span></span></span><br><span class="line"><span class="language-graphql">      <span class="symbol">content</span><span class="punctuation">:</span> <span class="variable">$content</span></span></span><br><span class="line"><span class="language-graphql">    <span class="punctuation">)</span> <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">      code</span></span><br><span class="line"><span class="language-graphql">      success</span></span><br><span class="line"><span class="language-graphql">      message</span></span><br><span class="line"><span class="language-graphql">      comment <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">        id</span></span><br><span class="line"><span class="language-graphql">        rating</span></span><br><span class="line"><span class="language-graphql">        content</span></span><br><span class="line"><span class="language-graphql">        createdAt</span></span><br><span class="line"><span class="language-graphql">        updatedAt</span></span><br><span class="line"><span class="language-graphql">      <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">    <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">  <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">`</span>;</span><br><span class="line"><span class="keyword">const</span> {</span><br><span class="line">    <span class="attr">mutate</span>: updateComment,</span><br><span class="line">    <span class="attr">loading</span>: isUpdating,</span><br><span class="line">    <span class="attr">onDone</span>: onCommentUpdate,</span><br><span class="line">} = <span class="title function_">useMutation</span>(<span class="variable constant_">UPDATE_COMMENT_MUTATION</span>, <span class="function">() =&gt;</span> ({</span><br><span class="line">    <span class="attr">variables</span>: {</span><br><span class="line">        commentId,</span><br><span class="line">        <span class="attr">rating</span>: rating.<span class="property">value</span>,</span><br><span class="line">        <span class="attr">content</span>: content.<span class="property">value</span>,</span><br><span class="line">        <span class="attr">updatedAt</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toISOString</span>(),</span><br><span class="line">    },</span><br><span class="line">}));</span><br><span class="line"><span class="title function_">onCommentUpdate</span>(<span class="function">(<span class="params">{ data: { updateComment } }</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">if</span> (updateComment.<span class="property">success</span>) {</span><br><span class="line">        content.<span class="property">value</span> = <span class="string">""</span>;</span><br><span class="line">        rating.<span class="property">value</span> = <span class="number">0</span>;</span><br><span class="line">        toast.<span class="title function_">success</span>(updateComment.<span class="property">message</span>);</span><br><span class="line">        router.<span class="title function_">go</span>(-<span class="number">1</span>);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        toast.<span class="title function_">warning</span>(updateComment.<span class="property">message</span>);</span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>这里也没有定义缓存处理方法，原因是：</p><ul><li>更新 <code>id</code> 为 <code>c1</code> 的评论成功后，会返回 <code>c1</code> 对应的新数据，该数据会自动覆盖旧数据</li><li>对于 <code>Book</code> 缓存来说，由于 <code>comments</code> 字段中保存的是都是数据引用，因此不需要额外的操作</li></ul><img src="/2022/03/14/Apollo%20Client%20%E7%BC%93%E5%AD%98%E5%A4%84%E7%90%86%E5%B0%8F%E7%BB%93/%E5%BC%95%E7%94%A8%E6%95%B0%E7%BB%84.png" class="" title="字段值为对象的保存的是对象引用"><h2 id="更新书架"><a href="#更新书架" class="headerlink" title="更新书架"></a>更新书架</h2><h3 id="后端定义-1"><a href="#后端定义-1" class="headerlink" title="后端定义"></a>后端定义</h3><p><code>User</code> 的 <code>schema</code> 定义如下</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">User</span> {</span><br><span class="line">    <span class="attr">id</span>: <span class="variable constant_">ID</span>!</span><br><span class="line">    <span class="attr">name</span>: <span class="title class_">String</span>!</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">bookShelf</span>: [<span class="title class_">Book</span>!]</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>Query</code> 中定义了一个查询，判断书籍是否在书架中：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">Query</span> {</span><br><span class="line">    ...</span><br><span class="line">    <span class="title function_">isBookInBookshelf</span>(<span class="attr">bookId</span>: <span class="variable constant_">ID</span>!, <span class="attr">userId</span>: <span class="variable constant_">ID</span>!): <span class="title class_">Boolean</span>!</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>书架 <code>Mutation</code> 定义如下</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">Mutation</span> {</span><br><span class="line">    ...</span><br><span class="line">    <span class="title function_">toggleBookshelf</span>(<span class="attr">userId</span>: <span class="variable constant_">ID</span>!, <span class="attr">bookId</span>: <span class="variable constant_">ID</span>!): toggleBookshelfResponse!</span><br><span class="line">}</span><br><span class="line">type toggleBookshelfResponse implements <span class="title class_">MutationResponse</span> {</span><br><span class="line">    <span class="attr">code</span>: <span class="title class_">String</span>!</span><br><span class="line">    <span class="attr">success</span>: <span class="title class_">Boolean</span>!</span><br><span class="line">    <span class="attr">message</span>: <span class="title class_">String</span>!</span><br><span class="line">    <span class="attr">user</span>: <span class="title class_">User</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>从定义可知：</p><ul><li>更新书架后，会返回一个新的 <code>user</code> 数据</li><li><code>user.bookShelf</code> 中保存用户书架列表</li></ul><h3 id="发送-Mutation-1"><a href="#发送-Mutation-1" class="headerlink" title="发送 Mutation"></a>发送 Mutation</h3><p>需要处理的缓存内容有：</p><ul><li><code>isBookInBookshelf</code> 查询的缓存结果</li><li><code>User</code> 的 <code>bookShelf</code> 字段</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">GET_IS_BOOK_IN_BOOKSHELF</span> = gql`<span class="language-graphql"></span></span><br><span class="line"><span class="language-graphql">  <span class="keyword">query</span> isBookInBookshelf<span class="punctuation">(</span><span class="variable">$bookId</span>: ID<span class="punctuation">!</span>, <span class="variable">$userId</span>: ID<span class="punctuation">!</span><span class="punctuation">)</span> <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">    isBookInBookshelf<span class="punctuation">(</span><span class="symbol">bookId</span><span class="punctuation">:</span> <span class="variable">$bookId</span>, <span class="symbol">userId</span><span class="punctuation">:</span> <span class="variable">$userId</span>)</span></span><br><span class="line"><span class="language-graphql">  <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">TOGGLE_BOOKSHELF_MUTATION</span> = gql`<span class="language-graphql"></span></span><br><span class="line"><span class="language-graphql">  <span class="keyword">mutation</span> toggleBookshelf<span class="punctuation">(</span><span class="variable">$bookId</span>: ID<span class="punctuation">!</span>, <span class="variable">$userId</span>: ID<span class="punctuation">!</span><span class="punctuation">)</span> <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">    toggleBookshelf<span class="punctuation">(</span><span class="symbol">bookId</span><span class="punctuation">:</span> <span class="variable">$bookId</span>, <span class="symbol">userId</span><span class="punctuation">:</span> <span class="variable">$userId</span>) <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">      message</span></span><br><span class="line"><span class="language-graphql">      success</span></span><br><span class="line"><span class="language-graphql">      user <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">          id</span></span><br><span class="line"><span class="language-graphql">        bookShelf <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">          title</span></span><br><span class="line"><span class="language-graphql">          id</span></span><br><span class="line"><span class="language-graphql">          rawAuthor</span></span><br><span class="line"><span class="language-graphql">          publisher</span></span><br><span class="line"><span class="language-graphql">          publishDate</span></span><br><span class="line"><span class="language-graphql">          doubanRating</span></span><br><span class="line"><span class="language-graphql">          summary</span></span><br><span class="line"><span class="language-graphql">          image</span></span><br><span class="line"><span class="language-graphql">          isbn13</span></span><br><span class="line"><span class="language-graphql">        <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">      <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">    <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">  <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> { <span class="attr">mutate</span>: toggleBookshelf, <span class="attr">onDone</span>: onToggle } = <span class="title function_">useMutation</span>(</span><br><span class="line">    <span class="variable constant_">TOGGLE_BOOKSHELF_MUTATION</span>,</span><br><span class="line">    <span class="function">() =&gt;</span> ({</span><br><span class="line">        <span class="attr">variables</span>: {</span><br><span class="line">            <span class="attr">bookId</span>: bookId.<span class="property">value</span>,</span><br><span class="line">            userId,</span><br><span class="line">        },</span><br><span class="line">        <span class="attr">update</span>: <span class="function">(<span class="params">cache, { data: { toggleBookshelf } }</span>) =&gt;</span> {</span><br><span class="line">            <span class="keyword">const</span> oldData = cache.<span class="title function_">readQuery</span>({</span><br><span class="line">                <span class="attr">query</span>: <span class="variable constant_">GET_IS_BOOK_IN_BOOKSHELF</span>,</span><br><span class="line">                <span class="attr">variables</span>: {</span><br><span class="line">                    <span class="attr">bookId</span>: bookId.<span class="property">value</span>,</span><br><span class="line">                    userId,</span><br><span class="line">                },</span><br><span class="line">            });</span><br><span class="line">            <span class="keyword">if</span> (toggleBookshelf.<span class="property">success</span> === <span class="literal">true</span>) {</span><br><span class="line">                cache.<span class="title function_">writeQuery</span>({</span><br><span class="line">                    <span class="attr">query</span>: <span class="variable constant_">GET_IS_BOOK_IN_BOOKSHELF</span>,</span><br><span class="line">                    <span class="attr">variables</span>: {</span><br><span class="line">                        <span class="attr">bookId</span>: bookId.<span class="property">value</span>,</span><br><span class="line">                        userId,</span><br><span class="line">                    },</span><br><span class="line">                    <span class="attr">data</span>: {</span><br><span class="line">                        <span class="attr">isBookInBookshelf</span>: !oldData.<span class="property">isBookInBookshelf</span>,</span><br><span class="line">                    },</span><br><span class="line">                });</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">    })</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><p>更新发生后做了两件事：</p><ul><li>利用 <code>cache.writeQuery</code> 更新 <code>isBookInBookshelf</code> 查询的缓存结果</li><li>对于 <code>User.bookShelf</code> 字段，由于新的 <code>user</code> 数据会覆盖缓存中的旧数据，因此可以不做处理</li></ul><h3 id="x1f4a5-当前实现的问题"><a href="#x1f4a5-当前实现的问题" class="headerlink" title="💥当前实现的问题"></a><span class="emoji" alias="boom" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a5.png?v8">💥</span>当前实现的问题</h3><ul><li>每一本书都需要发送一个额外的查询，判断其是否已经在书架中</li><li>从未登录状态切换到登录状态时，所有已经加载的书籍都会发送 <code>isBookInBookshelf</code> 查询，这意味着用户登录伴随着 N 个额外请求（不可接受！</li></ul><img src="/2022/03/14/Apollo%20Client%20%E7%BC%93%E5%AD%98%E5%A4%84%E7%90%86%E5%B0%8F%E7%BB%93/checkBook.png" class="" title="一本书一个请求"><a href="/2022/03/26/%E9%87%8D%E5%86%99duozhuavue%E4%B9%A6%E6%9E%B6/" title="重写duozhuavue书架">重写duozhuavue书架</a><h2 id="主页信息流分页"><a href="#主页信息流分页" class="headerlink" title="主页信息流分页"></a>主页信息流分页</h2><p>开发<a href="/2021/12/09/%E5%88%86%E9%A1%B5/" title="分页">分页</a>功能时，也进行了一些缓存合并。策略定义如下：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Query</span>: {</span><br><span class="line">    <span class="attr">fields</span>: {</span><br><span class="line">        <span class="attr">categoryFeed</span>: <span class="title function_">relayStylePagination</span>()</span><br><span class="line">    }</span><br><span class="line">},</span><br><span class="line"><span class="title class_">Category</span>: {</span><br><span class="line">    <span class="attr">fields</span>: {</span><br><span class="line">        <span class="attr">items</span>: <span class="title function_">relayStylePagination</span>()</span><br><span class="line">    }</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p>这里利用了 <code>Apollo Client</code> 提供的 <code>relayStylePagination()</code> 工具函数，它已经实现了缓存合并策略。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>对于缓存中的查询，可以利用 <code>cache.readQuery</code> 和 <code>cache.writeQuery</code> 进行更新</li><li>对于缓存中的对象，一般情况下返回的新数据会自动覆盖旧数据，也可以利用 <code>cache.modify</code> 修改</li><li>为了让返回的新对象自动替代缓存中的对象，必须在客户端的 <code>schema</code> 定义中返回 <code>id</code> 字段</li><li>对于分页信息的缓存，尽可能在设置字段策略时使用 <code>Apollo Client</code> 提供的工具函数，如 <code>offsetLimitPagination()</code>, <code>relayStylePagination()</code></li><li>删除缓存中的对象时，先利用 <code>cache.identify</code> 确定缓存对应的标识符，然后使用 <code>cache.evict</code> 和 <code>cache.gc</code></li><li><code>useMutation</code> 处理缓存的逻辑写在 <code>update</code> 函数中</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录开发 &lt;a href=&quot;https://duozhuavue.vercel.app/book&quot;&gt;duozhuavue💚&lt;/a&gt; 时对 &lt;a href=&quot;https://www.apollographql.com/docs/react/caching/overview/&quot;&gt;Apollo Client&lt;/a&gt; 缓存的处理方法。&lt;/p&gt;
&lt;h2 id=&quot;为什么要处理缓存？&quot;&gt;&lt;a href=&quot;#为什么要处理缓存？&quot; class=&quot;headerlink&quot; title=&quot;为什么要处理缓存？&quot;&gt;&lt;/a&gt;为什么要处理缓存？&lt;/h2&gt;&lt;p&gt;修改数据后，如果不对缓存中的数据进行修改，那么会造成服务器端和客户端的&lt;strong&gt;数据不一致&lt;/strong&gt;，修改也不能在前端得到体现。&lt;/p&gt;
&lt;p&gt;在 &lt;a href=&quot;https://duozhuavue.vercel.app/book&quot;&gt;duozhuavue💚&lt;/a&gt; 中，需要处理缓存的地方有书籍评论，用户书架，主页信息流分页。&lt;/p&gt;
&lt;h2 id=&quot;缓存处理方法&quot;&gt;&lt;a href=&quot;#缓存处理方法&quot; class=&quot;headerlink&quot; title=&quot;缓存处理方法&quot;&gt;&lt;/a&gt;缓存处理方法&lt;/h2&gt;&lt;p&gt; &lt;a href=&quot;https://www.apollographql.com/docs/react/caching/overview/&quot;&gt;Apollo Client&lt;/a&gt; 提供了几种方式与缓存数据交互&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.apollographql.com/docs/react/caching/cache-interaction#using-graphql-queries&quot;&gt;使用 GraphQL queries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.apollographql.com/docs/react/caching/cache-interaction#using-graphql-fragments&quot;&gt;使用 GraphQL fragments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.apollographql.com/docs/react/caching/cache-interaction#using-cachemodify&quot;&gt;直接修改缓存对象的字段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.apollographql.com/docs/react/caching/cache-field-behavior&quot;&gt;配置缓存字段策略&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结合开发过程中的具体情况，处理缓存数据时可以采取不同的方式。&lt;/p&gt;
&lt;h2 id=&quot;书籍评论&quot;&gt;&lt;a href=&quot;#书籍评论&quot; class=&quot;headerlink&quot; title=&quot;书籍评论&quot;&gt;&lt;/a&gt;书籍评论&lt;/h2&gt;&lt;h3 id=&quot;后端定义&quot;&gt;&lt;a href=&quot;#后端定义&quot; class=&quot;headerlink&quot; title=&quot;后端定义&quot;&gt;&lt;/a&gt;后端定义&lt;/h3&gt;&lt;p&gt;后端代码中 &lt;code&gt;Book&lt;/code&gt; 的 &lt;code&gt;schema&lt;/code&gt; 定义如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;type &lt;span class=&quot;title class_&quot;&gt;Book&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;variable constant_&quot;&gt;ID&lt;/span&gt;!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;title class_&quot;&gt;String&lt;/span&gt;!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;comments&lt;/span&gt;: [&lt;span class=&quot;title class_&quot;&gt;Comment&lt;/span&gt;!]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;有用的信息是，&lt;code&gt;Book&lt;/code&gt; 的 &lt;code&gt;comments&lt;/code&gt; 字段返回该书的评论列表。&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://yikayiyo.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="graphql" scheme="https://yikayiyo.github.io/tags/graphql/"/>
    
    <category term="apollo client" scheme="https://yikayiyo.github.io/tags/apollo-client/"/>
    
    <category term="vue-apollo" scheme="https://yikayiyo.github.io/tags/vue-apollo/"/>
    
    <category term="duozhuavue" scheme="https://yikayiyo.github.io/tags/duozhuavue/"/>
    
  </entry>
  
  <entry>
    <title>文本溢出攻击</title>
    <link href="https://yikayiyo.github.io/2022/01/09/%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E6%94%BB%E5%87%BB/"/>
    <id>https://yikayiyo.github.io/2022/01/09/%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E6%94%BB%E5%87%BB/</id>
    <published>2022-01-09T15:44:23.000Z</published>
    <updated>2023-11-22T10:18:22.820Z</updated>
    
    <content type="html"><![CDATA[<p>主要记录开发<a href="https://duozhuavue.vercel.app/book">duozhuavue<span class="emoji" alias="green_heart" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f49a.png?v8">💚</span></a>时对一些文本过长情况的处理方法。</p><h3 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h3><ul><li>后台服务器对数据的文本长度没有限制、处理</li><li>在前端页面利用 CSS 处理文本溢出</li></ul><h3 id="多抓鱼"><a href="#多抓鱼" class="headerlink" title="多抓鱼"></a>多抓鱼</h3><p>以下是<a href="www.duozhuayu.com">多抓鱼</a>部分页面遇到过长用户名时的情况。<br>测试文本：“这是一个非常长的ID用来测试布局溢出，正常情况最后会出现三个点，而且不会把其它内容推出屏幕”。</p><center style="display: flex; justify-content: space-between; flex-wrap: wrap;">  <div><img src="/2022/01/09/%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E6%94%BB%E5%87%BB/duozhuayu-oc-page-header.png" class="" width="300" title="书单页顶部"></div>  <div><img src="/2022/01/09/%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E6%94%BB%E5%87%BB/duozhuayu-book-page-comment.png" class="" width="300" title="书籍页评论区"></div>  <div><img src="/2022/01/09/%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E6%94%BB%E5%87%BB/duozhuayu-user-page-header.png" class="" width="300" title="用户页顶部"></div>  <div><img src="/2022/01/09/%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E6%94%BB%E5%87%BB/duozhuayu-user-page-activity.png" class="" width="300" title="用户页活动区"></div></center><span id="more"></span><h3 id="duozhuavue"><a href="#duozhuavue" class="headerlink" title="duozhuavue"></a>duozhuavue</h3><p>以下是<a href="https://duozhuavue.vercel.app/book">duozhuavue<span class="emoji" alias="green_heart" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f49a.png?v8">💚</span></a>处理后的样子</p><center style="display: flex; justify-content: space-between; flex-wrap: wrap;">  <div><img src="/2022/01/09/%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E6%94%BB%E5%87%BB/oc-page-header.png" class="" width="300" title="书单页顶部"></div>  <div><img src="/2022/01/09/%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E6%94%BB%E5%87%BB/book-page-comment.png" class="" width="300" title="书籍页评论区"></div>  <div><img src="/2022/01/09/%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E6%94%BB%E5%87%BB/user-page-header.png" class="" width="300" title="用户页顶部"></div>  <div><img src="/2022/01/09/%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E6%94%BB%E5%87%BB/user-page-douban-like.png" class="" width="300" title="用户页书架区（自定义）"></div></center><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><iframe src="https://codesandbox.io/embed/chu-li-wen-ben-yi-chu-94p4fk?fontsize=14&amp;theme=dark" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" title="处理文本溢出" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>对于块元素内的单行文本，注意文本所在容器的宽度</li><li>对于弹性盒子内的文本，必须先确定盒子的宽度，在此基础上才能处理溢出情况</li><li>对于多行文本，可以参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/-webkit-line-clamp">MDN</a> 的说明和样例</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;主要记录开发&lt;a href=&quot;https://duozhuavue.vercel.app/book&quot;&gt;duozhuavue&lt;span class=&quot;emoji&quot; alias=&quot;green_heart&quot; style=&quot;&quot; fallback-src=&quot;https://github.githubassets.com/images/icons/emoji/unicode/1f49a.png?v8&quot;&gt;💚&lt;/span&gt;&lt;/a&gt;时对一些文本过长情况的处理方法。&lt;/p&gt;
&lt;h3 id=&quot;假设&quot;&gt;&lt;a href=&quot;#假设&quot; class=&quot;headerlink&quot; title=&quot;假设&quot;&gt;&lt;/a&gt;假设&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;后台服务器对数据的文本长度没有限制、处理&lt;/li&gt;
&lt;li&gt;在前端页面利用 CSS 处理文本溢出&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;多抓鱼&quot;&gt;&lt;a href=&quot;#多抓鱼&quot; class=&quot;headerlink&quot; title=&quot;多抓鱼&quot;&gt;&lt;/a&gt;多抓鱼&lt;/h3&gt;&lt;p&gt;以下是&lt;a href=&quot;www.duozhuayu.com&quot;&gt;多抓鱼&lt;/a&gt;部分页面遇到过长用户名时的情况。&lt;br&gt;测试文本：“这是一个非常长的ID用来测试布局溢出，正常情况最后会出现三个点，而且不会把其它内容推出屏幕”。&lt;/p&gt;
&lt;center style=&quot;display: flex; justify-content: space-between; flex-wrap: wrap;&quot;&gt;
  &lt;div&gt;&lt;img src=&quot;/2022/01/09/%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E6%94%BB%E5%87%BB/duozhuayu-oc-page-header.png&quot; class=&quot;&quot; width=&quot;300&quot; title=&quot;书单页顶部&quot;&gt;&lt;/div&gt;
  &lt;div&gt;&lt;img src=&quot;/2022/01/09/%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E6%94%BB%E5%87%BB/duozhuayu-book-page-comment.png&quot; class=&quot;&quot; width=&quot;300&quot; title=&quot;书籍页评论区&quot;&gt;&lt;/div&gt;
  &lt;div&gt;&lt;img src=&quot;/2022/01/09/%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E6%94%BB%E5%87%BB/duozhuayu-user-page-header.png&quot; class=&quot;&quot; width=&quot;300&quot; title=&quot;用户页顶部&quot;&gt;&lt;/div&gt;
  &lt;div&gt;&lt;img src=&quot;/2022/01/09/%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E6%94%BB%E5%87%BB/duozhuayu-user-page-activity.png&quot; class=&quot;&quot; width=&quot;300&quot; title=&quot;用户页活动区&quot;&gt;&lt;/div&gt;
&lt;/center&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://yikayiyo.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="duozhuavue" scheme="https://yikayiyo.github.io/tags/duozhuavue/"/>
    
    <category term="CSS" scheme="https://yikayiyo.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>分页</title>
    <link href="https://yikayiyo.github.io/2021/12/09/%E5%88%86%E9%A1%B5/"/>
    <id>https://yikayiyo.github.io/2021/12/09/%E5%88%86%E9%A1%B5/</id>
    <published>2021-12-09T05:53:39.000Z</published>
    <updated>2023-11-22T12:10:54.368Z</updated>
    
    <content type="html"><![CDATA[<p>记录开发<a href="https://duozhuavue.vercel.app/book">duozhuavue<span class="emoji" alias="green_heart" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f49a.png?v8">💚</span></a>主页的分页功能时的实践。</p><h1 id="关于分页"><a href="#关于分页" class="headerlink" title="关于分页"></a>关于分页</h1><h2 id="分页的样子"><a href="#分页的样子" class="headerlink" title="分页的样子"></a>分页的样子</h2><ol><li><p>有编号的分页</p><img src="/2021/12/09/%E5%88%86%E9%A1%B5/page1.png" class="" width="500" title="有编号的分页"></li><li><p>无编号，点击加载</p><img src="/2021/12/09/%E5%88%86%E9%A1%B5/page2.png" class="" width="500" title="点击获取下一页数据"></li><li><p>无编号，滚动加载</p><img src="/2021/12/09/%E5%88%86%E9%A1%B5/page3.png" class="" width="500" title="滚动到特定位置获取下一页数据"></li></ol><span id="more"></span><h2 id="跳转到下一页时要做什么"><a href="#跳转到下一页时要做什么" class="headerlink" title="跳转到下一页时要做什么"></a>跳转到下一页时要做什么</h2><ol><li><p>获取数据</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据传入的参数获取新数据</span></span><br><span class="line"><span class="keyword">const</span> incoming = <span class="title function_">getNextPage</span>(...);</span><br></pre></td></tr></tbody></table></figure></li><li><p>更新缓存</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每个字段都可以有自己的 merge() 函数用于配置缓存合并策略</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">existing, incoming</span>) {</span><br><span class="line">    ...</span><br><span class="line">    existing = [...existing, ...incoming];</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> existing;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="想要的功能"><a href="#想要的功能" class="headerlink" title="想要的功能"></a>想要的功能</h2><p>在已经<strong>有缓存</strong>的情况下，<strong>分页读取、显示</strong>（paginated read）缓存数据。</p><h1 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h1><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><h3 id="graphql-查询设置"><a href="#graphql-查询设置" class="headerlink" title="graphql 查询设置"></a><code>graphql</code> 查询设置</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// first: 获取几个分类</span></span><br><span class="line"><span class="comment">// after: 从哪个分类开始获取分类</span></span><br><span class="line"><span class="comment">// itemsFirst: 每个分类下获取几本图书</span></span><br><span class="line"><span class="comment">// itemsAfter: 从哪个地方开始获取图书</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">GET_CATEGORY_FEED</span> = gql`<span class="language-graphql"></span></span><br><span class="line"><span class="language-graphql">  <span class="keyword">query</span> getCategoryFeed<span class="punctuation">(</span></span></span><br><span class="line"><span class="language-graphql">    <span class="variable">$first</span>: Int</span></span><br><span class="line"><span class="language-graphql">    <span class="variable">$after</span>: String</span></span><br><span class="line"><span class="language-graphql">    <span class="variable">$itemsFirst</span>: Int</span></span><br><span class="line"><span class="language-graphql">    <span class="variable">$itemsAfter</span>: String</span></span><br><span class="line"><span class="language-graphql">  <span class="punctuation">)</span> <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">    categoryFeed<span class="punctuation">(</span><span class="symbol">first</span><span class="punctuation">:</span> <span class="variable">$first</span>, <span class="symbol">after</span><span class="punctuation">:</span> <span class="variable">$after</span>) <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">      pageInfo <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">        hasNextPage</span></span><br><span class="line"><span class="language-graphql">        endCursor</span></span><br><span class="line"><span class="language-graphql">      <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">      edges <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">        node <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">          id</span></span><br><span class="line"><span class="language-graphql">          name</span></span><br><span class="line"><span class="language-graphql">          items<span class="punctuation">(</span><span class="symbol">first</span><span class="punctuation">:</span> <span class="variable">$itemsFirst</span>, <span class="symbol">after</span><span class="punctuation">:</span> <span class="variable">$itemsAfter</span>) <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">            pageInfo <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">              endCursor</span></span><br><span class="line"><span class="language-graphql">              hasNextPage</span></span><br><span class="line"><span class="language-graphql">            <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">            edges <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">              node <span class="punctuation">{</span></span></span><br><span class="line"><span class="language-graphql">                id</span></span><br><span class="line"><span class="language-graphql">                title</span></span><br><span class="line"><span class="language-graphql">                rawAuthor</span></span><br><span class="line"><span class="language-graphql">                doubanRating</span></span><br><span class="line"><span class="language-graphql">                originalPrice</span></span><br><span class="line"><span class="language-graphql">                image</span></span><br><span class="line"><span class="language-graphql">              <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">            <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">          <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">        <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">      <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">    <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">  <span class="punctuation">}</span></span></span><br><span class="line"><span class="language-graphql">`</span></span><br></pre></td></tr></tbody></table></figure><p>关于 <code>categoryFeed</code> 中的 <code>pageInfo</code> 和 <code>edges</code>，可以参考 <a href="https://relay.dev/graphql/connections.htm#">GraphQL Cursor Connections Specification</a></p><h3 id="设置缓存合并策略"><a href="#设置缓存合并策略" class="headerlink" title="设置缓存合并策略"></a>设置缓存合并策略</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Query</span>: {</span><br><span class="line">    <span class="attr">fields</span>: {</span><br><span class="line">        <span class="attr">categoryFeed</span>: {</span><br><span class="line">            ...<span class="title function_">relayStylePagination</span>(),</span><br><span class="line">            <span class="attr">keyArgs</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="comment">// 自定义read函数，实现分页读取缓存</span></span><br><span class="line">            <span class="title function_">read</span>(<span class="params">existing, {args: {first, after}}</span>) {</span><br><span class="line">                <span class="keyword">const</span> res = {};</span><br><span class="line">                <span class="comment">// 根据 after 参数选择缓存中的数据返回</span></span><br><span class="line">                res = {...}</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">    },</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p>缓存的合并策略，可以参考 <a href="https://www.apollographql.com/docs/react/caching/cache-field-behavior/">Customizing the behavior of cached fields</a></p><p><code>relayStylePagination</code> 可以参考 <a href="https://www.apollographql.com/docs/react/pagination/cursor-based/#relay-style-cursor-pagination">Relay-style cursor pagination</a></p><h2 id="使用-fetchMore"><a href="#使用-fetchMore" class="headerlink" title="使用 fetchMore()"></a>使用 fetchMore()</h2><h3 id="查询设置"><a href="#查询设置" class="headerlink" title="查询设置"></a>查询设置</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> after = <span class="title function_">ref</span>(<span class="string">''</span>) <span class="comment">// 从哪里开始获取数据</span></span><br><span class="line"><span class="keyword">const</span> first = <span class="title function_">ref</span>(<span class="number">1</span>) <span class="comment">// 获取几条数据</span></span><br><span class="line"><span class="keyword">const</span> {</span><br><span class="line">  <span class="attr">result</span>: categoryFeedResult,</span><br><span class="line">  <span class="attr">loading</span>: categoryFeedLoading,</span><br><span class="line">  <span class="attr">error</span>: categoryFeedError,</span><br><span class="line">  fetchMore</span><br><span class="line">} = <span class="title function_">useQuery</span>(<span class="variable constant_">GET_CATEGORY_FEED</span>, <span class="function">() =&gt;</span> ({</span><br><span class="line">  <span class="attr">after</span>: after.<span class="property">value</span>,</span><br><span class="line">  <span class="attr">first</span>: first.<span class="property">value</span>,</span><br><span class="line">  <span class="attr">itemsAfter</span>: <span class="string">''</span>,</span><br><span class="line">  <span class="attr">itemsFirst</span>: <span class="number">3</span></span><br><span class="line">}))</span><br></pre></td></tr></tbody></table></figure><h3 id="首次使用"><a href="#首次使用" class="headerlink" title="首次使用"></a>首次使用</h3><ol><li><p>页面加载</p><p>请求第一条数据，缓存为空，于是请求服务器，获得第一条数据，写入缓存，返回给页面</p></li><li><p>点击<u>加载更多分类</u></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> loadMoreCategories = <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">  <span class="title function_">fetchMore</span>({</span><br><span class="line">    <span class="attr">variables</span>: {</span><br><span class="line">      <span class="attr">after</span>: cursor.<span class="property">value</span> <span class="comment">// 这里的cursor是第一页数据的 pageInfo 中的信息</span></span><br><span class="line">    }</span><br><span class="line">  }).<span class="title function_">then</span>(<span class="function">(<span class="params">{ data: { categoryFeed } }</span>) =&gt;</span> {</span><br><span class="line">    after.<span class="property">value</span> = categoryFeed.<span class="property">pageInfo</span>.<span class="property">endCursor</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">      <span class="string">'$after is updated, there will be a new categoryFeed query...'</span></span><br><span class="line">    )</span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>调用 <code>loadMoreCategories()</code> ，执行带有新参数的 <code>fetchMore()</code></p><p>新数据会依照合并策略写入缓存</p><p><span class="emoji" alias="eyes" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f440.png?v8">👀</span> 为了读取更新后的缓存，需要在 <code>then()</code> 中更新 <code>after</code> 的值（更新会触发查询执行，该 <code>after</code> 参数可以用于请求缓存中特定部分的数据</p></li><li><p>再次点击<u>加载更多分类</u></p></li></ol><h3 id="刷新页面后"><a href="#刷新页面后" class="headerlink" title="刷新页面后"></a>刷新页面后</h3><ol><li>页面加载</li><li>点击<u>加载更多分类</u></li><li>再次点击<u>加载更多分类</u></li></ol><h3 id="效果及问题"><a href="#效果及问题" class="headerlink" title="效果及问题"></a>效果及问题</h3><center style="display: flex; justify-content: space-between;">  <div><img src="/2021/12/09/%E5%88%86%E9%A1%B5/fetchMore-no-cache.gif" class="" width="375" title="没有缓存的情况下请求"></div>  <div style="margin-left: 10px;"><img src="/2021/12/09/%E5%88%86%E9%A1%B5/fetchMore-with-cache.gif" class="" width="375" title="有缓存的情况下请求"></div></center><p>看起来没什么问题！但是问题发生在<u>有缓存时的第一次点击</u>之后</p><p>缓存中的分类如今有三条数据</p><p>刷新页面，页面加载，ok！</p><img src="/2021/12/09/%E5%88%86%E9%A1%B5/cache-ok.png" class="" width="500" title="ok！缓存不受影响！"><p>点击<u>加载更多分类</u>，ops！缓存中的分类变成两条了！！</p><img src="/2021/12/09/%E5%88%86%E9%A1%B5/cache-ops.png" class="" width="500" title="ops！cache被修改了！"><h4 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h4><p>在有缓存的情况下，我的期望是<strong>从缓存读取数据</strong>。但是实际情况是，每次调用 <code>fetchMore()</code> 都会请求服务器数据。</p><p>看了一下 <code>fetchMore()</code> 的<a href="https://github.com/apollographql/apollo-client/blob/main/src/core/ObservableQuery.ts">源码</a>，它是这么定义的</p><img src="/2021/12/09/%E5%88%86%E9%A1%B5/fetchMore.png" class="" width="600" title="fetchMore() 必然请求服务器"><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ul><li><input checked="" disabled="" type="checkbox"> 不用<code>fetchMore()</code></li><li><input disabled="" type="checkbox"> 重新定义缓存合并策略，如果新结果已经被缓存，就不执行<code>merge()</code>函数（<code>...relayStylePagination()</code>中有默认的 <code>merge()</code>函数</li></ul><h2 id="使用-useQuery"><a href="#使用-useQuery" class="headerlink" title="使用 useQuery"></a>使用 useQuery</h2><p>为了不使用 <code>fetchMore()</code> ，刚开始我使用了 <code>useLazyQuery()</code>, 它会返回一个需要主动调用获取数据的 <code>load()</code> 函数。我在页面挂载后，调用 <code>load()</code> 获取第一页数据，在点击发生时再次调用 <code>load()</code> 并传入相应的参数，获取新数据。这种实现满足了一些需求，但是也有它的问题。于是我又去考虑别的策略，很快就意识到，相同的逻辑其实利用 <code>useQuery()</code> 也可以实现，尽管它们存在相同的问题。</p><p>给查询传入响应式变量，想要获取下一页数据时，只需要<strong>更改变量的值</strong>（查询会自动更新</p><h3 id="查询设置-1"><a href="#查询设置-1" class="headerlink" title="查询设置"></a>查询设置</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> after = <span class="title function_">ref</span>(<span class="string">''</span>) <span class="comment">// 从哪里开始获取数据</span></span><br><span class="line"><span class="keyword">const</span> first = <span class="title function_">ref</span>(<span class="number">1</span>) <span class="comment">// 获取几条数据</span></span><br><span class="line"><span class="keyword">const</span> {</span><br><span class="line">  <span class="attr">result</span>: categoryFeedResult,</span><br><span class="line">  <span class="attr">loading</span>: categoryFeedLoading,</span><br><span class="line">  <span class="attr">error</span>: categoryFeedError</span><br><span class="line">} = <span class="title function_">useQuery</span>(<span class="variable constant_">GET_CATEGORY_FEED</span>, <span class="function">() =&gt;</span> ({</span><br><span class="line">  <span class="attr">after</span>: after.<span class="property">value</span>,</span><br><span class="line">  <span class="attr">first</span>: first.<span class="property">value</span>,</span><br><span class="line">  <span class="attr">itemsAfter</span>: <span class="string">''</span>,</span><br><span class="line">  <span class="attr">itemsFirst</span>: <span class="number">3</span></span><br><span class="line">}))</span><br></pre></td></tr></tbody></table></figure><h3 id="首次使用-1"><a href="#首次使用-1" class="headerlink" title="首次使用"></a>首次使用</h3><ol><li><p>页面加载</p><p>请求第一条数据，缓存为空，于是请求服务器，获取第一条数据，写入缓存，返回到页面</p></li><li><p>点击加载更多分类</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> loadMoreCategories = <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">  after.<span class="property">value</span> = cursor.<span class="property">value</span> <span class="comment">// 只需要更新 after 的值</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>调用 <code>loadMoreCategories()</code></p><p>查询再次执行，缓存未命中，请求服务器，得到第二条数据，写入缓存，返回到页面</p></li></ol><h3 id="刷新页面"><a href="#刷新页面" class="headerlink" title="刷新页面"></a>刷新页面</h3><ol><li><p>页面加载</p><p><code>after</code> 参数为 <code>""</code></p><p>请求第一条数据，缓存命中，返回到页面</p></li><li><p>点击加载更多分类</p><p>调用 <code>loadMoreCategories()</code></p><p>查询再次执行，命中缓存，得到两条数据，返回到页面</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义缓存的 read() 函数</span></span><br><span class="line">res.<span class="property">edges</span> = [</span><br><span class="line">  ...existing.<span class="property">edges</span>.<span class="title function_">slice</span>(<span class="number">0</span>, startIndex + first); <span class="comment">// 总是从头开始读取数据</span></span><br><span class="line">];</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p><span class="emoji" alias="raised_eyebrow" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f928.png?v8">🤨</span> 在没有缓存的情况下，请求新数据时，该组件会整体<strong>刷新</strong></p><center style="display: flex; justify-content: space-evenly;">  <div><img src="/2021/12/09/%E5%88%86%E9%A1%B5/without-cache.gif" class="" width="375" title="没有缓存的情况下请求下一条数据"></div>  <div style="margin-left: 10px;"><img src="/2021/12/09/%E5%88%86%E9%A1%B5/with-cache.gif" class="" width="375" title="有缓存的情况下请求下一条数据"></div></center><p>因为 <code>categoryFeed</code> 查询确实是重新执行了一次，所以整体刷新是正常现象。这种正常现象不是我要的效果。</p><h2 id="重新定义缓存合并策略"><a href="#重新定义缓存合并策略" class="headerlink" title="重新定义缓存合并策略"></a>重新定义缓存合并策略</h2><ul><li><input disabled="" type="checkbox"> TODO</li></ul><h2 id="trade-off"><a href="#trade-off" class="headerlink" title="trade-off"></a>trade-off</h2><p><code>relayStylePagination()</code> 的默认设置中，对缓存的读取是全部读取。也就是说，当你从别的页面回到主页，你可以看到之前得到的所有数据，并没有分页地读取缓存数据。</p><p>我也在想，在主页这样滚动浏览的情境下，<strong>分页读取</strong>到底有没有必要，想了半天，好像是没必要啊！</p><h2 id="回到最初的起点"><a href="#回到最初的起点" class="headerlink" title="回到最初的起点"></a>回到最初的起点</h2><p>最终我还是决定采用使用 <code>fetchMore()</code> 的方法。虽然绕了一圈，但是这段时间为了解决分页问题不停探索，还是学到了很多东西。</p><p><span class="emoji" alias="flags" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f38f.png?v8">🎏</span> 写完<a href="https://duozhuavue.vercel.app/book">duozhuavue</a>就去面<a href="https://www.duozhuayu.com/">duozhuayu</a>！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.apollographql.com/docs/react/pagination/overview/">Doc - apollo 分页</a></p><p><a href="https://www.apollographql.com/docs/react/caching/advanced-topics/#incremental-loading-fetchmore">Doc - apollo 使用 <code>fetchMore</code> 增量加载</a></p><p><a href="https://v4.apollo.vuejs.org/zh-cn/guide-composable/pagination.html#%E4%BD%BF%E7%94%A8-fetchmore">Doc - Vue Apollo 分页</a></p><p><a href="https://www.apollographql.com/blog/graphql/pagination/understanding-pagination-rest-graphql-and-relay/">Blog - Understanding pagination</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录开发&lt;a href=&quot;https://duozhuavue.vercel.app/book&quot;&gt;duozhuavue&lt;span class=&quot;emoji&quot; alias=&quot;green_heart&quot; style=&quot;&quot; fallback-src=&quot;https://github.githubassets.com/images/icons/emoji/unicode/1f49a.png?v8&quot;&gt;💚&lt;/span&gt;&lt;/a&gt;主页的分页功能时的实践。&lt;/p&gt;
&lt;h1 id=&quot;关于分页&quot;&gt;&lt;a href=&quot;#关于分页&quot; class=&quot;headerlink&quot; title=&quot;关于分页&quot;&gt;&lt;/a&gt;关于分页&lt;/h1&gt;&lt;h2 id=&quot;分页的样子&quot;&gt;&lt;a href=&quot;#分页的样子&quot; class=&quot;headerlink&quot; title=&quot;分页的样子&quot;&gt;&lt;/a&gt;分页的样子&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;有编号的分页&lt;/p&gt;
&lt;img src=&quot;/2021/12/09/%E5%88%86%E9%A1%B5/page1.png&quot; class=&quot;&quot; width=&quot;500&quot; title=&quot;有编号的分页&quot;&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;无编号，点击加载&lt;/p&gt;
&lt;img src=&quot;/2021/12/09/%E5%88%86%E9%A1%B5/page2.png&quot; class=&quot;&quot; width=&quot;500&quot; title=&quot;点击获取下一页数据&quot;&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;无编号，滚动加载&lt;/p&gt;
&lt;img src=&quot;/2021/12/09/%E5%88%86%E9%A1%B5/page3.png&quot; class=&quot;&quot; width=&quot;500&quot; title=&quot;滚动到特定位置获取下一页数据&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
    <category term="graphql" scheme="https://yikayiyo.github.io/tags/graphql/"/>
    
    <category term="apollo client" scheme="https://yikayiyo.github.io/tags/apollo-client/"/>
    
    <category term="vue-apollo" scheme="https://yikayiyo.github.io/tags/vue-apollo/"/>
    
    <category term="duozhuavue" scheme="https://yikayiyo.github.io/tags/duozhuavue/"/>
    
    <category term="pagination" scheme="https://yikayiyo.github.io/tags/pagination/"/>
    
  </entry>
  
  <entry>
    <title>粘性定位生效时添加样式</title>
    <link href="https://yikayiyo.github.io/2021/11/28/%E7%B2%98%E6%80%A7%E5%AE%9A%E4%BD%8D%E7%94%9F%E6%95%88%E6%97%B6%E6%B7%BB%E5%8A%A0%E6%A0%B7%E5%BC%8F/"/>
    <id>https://yikayiyo.github.io/2021/11/28/%E7%B2%98%E6%80%A7%E5%AE%9A%E4%BD%8D%E7%94%9F%E6%95%88%E6%97%B6%E6%B7%BB%E5%8A%A0%E6%A0%B7%E5%BC%8F/</id>
    <published>2021-11-28T03:56:07.000Z</published>
    <updated>2023-11-22T11:44:52.022Z</updated>
    
    <content type="html"><![CDATA[<p>写 <a href="https://duozhuavue.vercel.app/book">duozhuavue<span class="emoji" alias="green_heart" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f49a.png?v8">💚</span></a> 主页面时，希望书籍类别的 <code>Title</code> 在 <code>sticky</code> 生效时，添加一个<u>下边界</u>。</p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><img src="/2021/11/28/%E7%B2%98%E6%80%A7%E5%AE%9A%E4%BD%8D%E7%94%9F%E6%95%88%E6%97%B6%E6%B7%BB%E5%8A%A0%E6%A0%B7%E5%BC%8F/duozhuavue.gif" class="" width="500" title="粘性定位生效时添加下边界"><!--  more  --><h3 id="样例预览"><a href="#样例预览" class="headerlink" title="样例预览"></a><a href="https://0uhwu.csb.app/">样例预览</a></h3><iframe src="https://codesandbox.io/embed/add-style-when-sticky-is-active-0uhwu?fontsize=14&amp;hidenavigation=1&amp;module=%2Fmain.js&amp;theme=dark&amp;view=editor" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" title="add style when sticky is active" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe><blockquote><p>Intersection Observer API 提供了一种异步检测目标元素与祖先元素或 viewport 相交情况变化的方法。</p></blockquote><h3 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h3><ol><li>确定目标元素、根元素</li><li>设置监听回调（利用相交的<u><strong>比例</strong></u>或者<u><strong>变化</strong></u>）</li><li>监听</li></ol><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>设置根元素时使用了固定大小的像素，意味着只有在<strong>全屏</strong>下样式才会生效</li><li>第二个粘性元素生效时，第一个粘性元素的样式并没有移除，样例中它藏在了 <code>.dogs</code> 元素的下面，不会影响观感。</li></ul><p>参考</p><ul><li><a href="https://css-tricks.com/how-to-detect-when-a-sticky-element-gets-pinned/">css tricks</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API">Intersection Observer API</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/isIntersecting">IntersectionObserverEntry.isIntersecting</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;写 &lt;a href=&quot;https://duozhuavue.vercel.app/book&quot;&gt;duozhuavue&lt;span class=&quot;emoji&quot; alias=&quot;green_heart&quot; style=&quot;&quot; fallback-src=&quot;https://github.gi</summary>
      
    
    
    
    
    <category term="前端" scheme="https://yikayiyo.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="duozhuavue" scheme="https://yikayiyo.github.io/tags/duozhuavue/"/>
    
    <category term="CSS" scheme="https://yikayiyo.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>解决粘性定位的一些问题</title>
    <link href="https://yikayiyo.github.io/2021/11/27/%E8%A7%A3%E5%86%B3%E7%B2%98%E6%80%A7%E5%AE%9A%E4%BD%8D%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <id>https://yikayiyo.github.io/2021/11/27/%E8%A7%A3%E5%86%B3%E7%B2%98%E6%80%A7%E5%AE%9A%E4%BD%8D%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</id>
    <published>2021-11-27T14:39:43.000Z</published>
    <updated>2023-11-22T10:18:22.938Z</updated>
    
    <content type="html"><![CDATA[<p>下面是一个正常工作的粘性定位的例子，当你滚动页面，<code>sticky part1</code> 和 <code>sticky part2</code> 会固定在<u>页面顶部</u>。</p><span id="more"></span><iframe src="https://codesandbox.io/embed/dang-position-sticky-bu-sheng-xiao-k6yl8?fontsize=14&amp;hidenavigation=1&amp;theme=dark&amp;view=preview" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" title="当 position: sticky; 不生效" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe><p>但是带有背景的边框告诉我们，这东西溢出了。尝试隐藏这些溢出，去下个页面看看效果。</p><p>粘性定位失效了！相关元素并没有固定在<strong>页面顶部</strong>。</p><p>当然，如果处理溢出时，<code>overflow</code> 属性的值设置为 <code>scroll</code> 或者 <code>auto</code>，你再去滚动内部元素时会发现：相关元素粘在了它们的祖先元素 <code>&lt;div class="container overflow"&gt;</code> 上。</p><p>对此现象，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/position">MDN</a> 这么解释：</p><blockquote><p>a sticky element “sticks” to its nearest ancestor that has a “scrolling mechanism” (created when <code>overflow</code> is <code>hidden</code>, <code>scroll</code>, <code>auto</code>, or <code>overlay</code>), even if that ancestor isn’t the nearest actually scrolling ancestor.</p></blockquote><p>总之：<br><span class="emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> 使用 <code>sticky</code> 定位属性时，小心 <code>overflow</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;下面是一个正常工作的粘性定位的例子，当你滚动页面，&lt;code&gt;sticky part1&lt;/code&gt; 和 &lt;code&gt;sticky part2&lt;/code&gt; 会固定在&lt;u&gt;页面顶部&lt;/u&gt;。&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://yikayiyo.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="duozhuavue" scheme="https://yikayiyo.github.io/tags/duozhuavue/"/>
    
    <category term="CSS" scheme="https://yikayiyo.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>当flex-1没有按预期工作</title>
    <link href="https://yikayiyo.github.io/2021/09/29/%E5%BD%93flex-1%E6%B2%A1%E6%9C%89%E6%8C%89%E9%A2%84%E6%9C%9F%E5%B7%A5%E4%BD%9C/"/>
    <id>https://yikayiyo.github.io/2021/09/29/%E5%BD%93flex-1%E6%B2%A1%E6%9C%89%E6%8C%89%E9%A2%84%E6%9C%9F%E5%B7%A5%E4%BD%9C/</id>
    <published>2021-09-29T03:37:54.000Z</published>
    <updated>2023-11-22T10:18:22.819Z</updated>
    
    <content type="html"><![CDATA[<p>写<a href="https://duozhuavue.vercel.app/search/clothing">duozhuavue<span class="emoji" alias="green_heart" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f49a.png?v8">💚</span></a>服装搜索页面时遇到了一个问题：<code>flex</code> 容器内，两个设置了 <code>flex：1</code> 的项目，最后宽度竟然不是相等的。</p><img src="/2021/09/29/%E5%BD%93flex-1%E6%B2%A1%E6%9C%89%E6%8C%89%E9%A2%84%E6%9C%9F%E5%B7%A5%E4%BD%9C/flex-problem.png" class="" width="375" height="667" title="问题大概长这样"><span id="more"></span><h3 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h3><iframe src="https://codesandbox.io/embed/du-shi-flex-1zen-me-kuan-du-bu-yi-yang-j3olm?fontsize=14&amp;hidenavigation=1&amp;theme=dark&amp;view=preview" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" title="都是flex-1怎么宽度不一样" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe><h3 id="样例代码"><a href="#样例代码" class="headerlink" title="样例代码"></a>样例代码</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>One<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span></span><br><span class="line">    Two has more content xxxxxxxxxxxxxxxxxxxxxxxxxx ssssss</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> {</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 等价于 flex: 1 1 0; */</span></span><br><span class="line"><span class="comment">/* 元素宽度由内容宽度决定，不一定等宽 */</span></span><br><span class="line"><span class="selector-class">.inner</span> {</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 元素宽度显式设置为0，覆盖了flex-basis: 0; ，flex-grow起作用，各个列等宽，内容可能溢出 */</span></span><br><span class="line"><span class="selector-class">.inner</span> {</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/* min-width: 0;*/</span></span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.inner</span> {</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="comment">/* flex-grow起作用，各个列等宽 */</span></span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="comment">/* 下面的代码说明，创建BFC后，内容宽度不影响容器宽度，容器宽度为0 */</span></span><br><span class="line">  <span class="comment">/* flex: 0 1 0; */</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>水平方向的 <code>flex</code> 盒子，可以用来创建<strong>等高列</strong>，各个列的宽度（尺寸）不一定相等；</li><li>各个列的最终宽度由<code>列的初始尺寸</code>和<code>容器的剩余可用空间</code>共同决定；</li><li><strong>初始尺寸</strong>由显式设置的宽度决定。如果没有显式设置宽度，则由它们的内容宽度决定。如果没有内容，则宽度为 0；</li><li><code>flex</code> <strong>容器的剩余可用空间</strong>（可正可负），根据各个列的 <code>flex-grow</code> 和 <code>flex-shrink</code> 属性分配给各个列；</li><li><code>overflow: hidden;</code> 创建 <code>BFC</code> 容器后，<code>BFC</code> 容器内部内容的宽度不会影响容器宽度；</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;写&lt;a href=&quot;https://duozhuavue.vercel.app/search/clothing&quot;&gt;duozhuavue&lt;span class=&quot;emoji&quot; alias=&quot;green_heart&quot; style=&quot;&quot; fallback-src=&quot;https://github.githubassets.com/images/icons/emoji/unicode/1f49a.png?v8&quot;&gt;💚&lt;/span&gt;&lt;/a&gt;服装搜索页面时遇到了一个问题：&lt;code&gt;flex&lt;/code&gt; 容器内，两个设置了 &lt;code&gt;flex：1&lt;/code&gt; 的项目，最后宽度竟然不是相等的。&lt;/p&gt;
&lt;img src=&quot;/2021/09/29/%E5%BD%93flex-1%E6%B2%A1%E6%9C%89%E6%8C%89%E9%A2%84%E6%9C%9F%E5%B7%A5%E4%BD%9C/flex-problem.png&quot; class=&quot;&quot; width=&quot;375&quot; height=&quot;667&quot; title=&quot;问题大概长这样&quot;&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://yikayiyo.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="duozhuavue" scheme="https://yikayiyo.github.io/tags/duozhuavue/"/>
    
    <category term="BFC" scheme="https://yikayiyo.github.io/tags/BFC/"/>
    
    <category term="flexbox" scheme="https://yikayiyo.github.io/tags/flexbox/"/>
    
    <category term="CSS" scheme="https://yikayiyo.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>消失的XXX</title>
    <link href="https://yikayiyo.github.io/2020/12/30/%E6%B6%88%E5%A4%B1%E7%9A%84XXX/"/>
    <id>https://yikayiyo.github.io/2020/12/30/%E6%B6%88%E5%A4%B1%E7%9A%84XXX/</id>
    <published>2020-12-30T10:17:57.000Z</published>
    <updated>2023-11-22T10:18:22.826Z</updated>
    
    <content type="html"><![CDATA[<h1 id="消失的播客"><a href="#消失的播客" class="headerlink" title="消失的播客"></a>消失的播客</h1><hr><img src="/2020/12/30/%E6%B6%88%E5%A4%B1%E7%9A%84XXX/boke.png" class="" title="剩余价值"><center>2020年听到一半被下架的播客。</center><ul><li><a href="https://www.youtube.com/watch?v=ghx4l0Cp9o0">【051】瘟疫、语言和具体的人：与历史学家罗新的聊天</a></li><li><a href="https://www.youtube.com/watch?v=mdTxI-H59K0">【剩余榨值 023】在巨大的 shock 后，我们所思考的、所做的一切都将与此有关</a></li></ul><span id="more"></span><h1 id="消失的人"><a href="#消失的人" class="headerlink" title="消失的人"></a>消失的人</h1><hr><img src="/2020/12/30/%E6%B6%88%E5%A4%B1%E7%9A%84XXX/haohd.png" class="" title="(1)"><img src="/2020/12/30/%E6%B6%88%E5%A4%B1%E7%9A%84XXX/yzy.png" class="" title="(2)"><center>2020年6月4号之后，中国没有了郝叶夫妇。</center><h1 id="消失的示威"><a href="#消失的示威" class="headerlink" title="消失的示威"></a>消失的示威</h1><hr><img src="/2020/12/30/%E6%B6%88%E5%A4%B1%E7%9A%84XXX/hk.png" class="" title="2019年香港街头示威游行"><center>后来病毒来了。</center><h1 id="消失的房源"><a href="#消失的房源" class="headerlink" title="消失的房源"></a>消失的房源</h1><hr><img src="/2020/12/30/%E6%B6%88%E5%A4%B1%E7%9A%84XXX/dk.png" class="" title="在蛋壳App搜索房源得到的结果"><center>租客、房东都是受害者。</center><h1 id="消失的爱"><a href="#消失的爱" class="headerlink" title="消失的爱"></a>消失的爱</h1><hr><img src="/2020/12/30/%E6%B6%88%E5%A4%B1%E7%9A%84XXX/lwl.png" class="" title="李文亮医生最后一条微博"><center>他爱身边的人，不止小家，包括大家。</center><h1 id="消失的友谊"><a href="#消失的友谊" class="headerlink" title="消失的友谊"></a>消失的友谊</h1><hr><img src="/2020/12/30/%E6%B6%88%E5%A4%B1%E7%9A%84XXX/TAX.png" class="" title="(1)"><img src="/2020/12/30/%E6%B6%88%E5%A4%B1%E7%9A%84XXX/TAX2.png" class="" title="(2)"><center>注定要发生吗？</center><h1 id="消失的崇拜"><a href="#消失的崇拜" class="headerlink" title="消失的崇拜"></a>消失的崇拜</h1><hr><img src="/2020/12/30/%E6%B6%88%E5%A4%B1%E7%9A%84XXX/my1.png" class="" title="年初"><img src="/2020/12/30/%E6%B6%88%E5%A4%B1%E7%9A%84XXX/my2.png" class="" title="年末"><center>马云：变了的不是我</center><h1 id="消失的红队"><a href="#消失的红队" class="headerlink" title="消失的红队"></a>消失的红队</h1><hr><img src="/2020/12/30/%E6%B6%88%E5%A4%B1%E7%9A%84XXX/rck09.png" class="" title="9月份"><img src="/2020/12/30/%E6%B6%88%E5%A4%B1%E7%9A%84XXX/rck12.png" class="" title="12月份"><center>火箭、红队、火箭……，希望不是循环</center><h1 id="消失的音乐-人"><a href="#消失的音乐-人" class="headerlink" title="消失的音乐(人)"></a>消失的音乐(人)</h1><hr><img src="/2020/12/30/%E6%B6%88%E5%A4%B1%E7%9A%84XXX/lz.png" class="" title="qq音乐很抱歉"><img src="/2020/12/30/%E6%B6%88%E5%A4%B1%E7%9A%84XXX/lz2.png" class="" title="网易云很抱歉"><center>大家都很抱歉，我也知道不怪你们</center><h1 id="消失的自信"><a href="#消失的自信" class="headerlink" title="消失的自信"></a>消失的自信</h1><hr><img src="/2020/12/30/%E6%B6%88%E5%A4%B1%E7%9A%84XXX/bzx.png" class="" title="抵制圣诞节">]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;消失的播客&quot;&gt;&lt;a href=&quot;#消失的播客&quot; class=&quot;headerlink&quot; title=&quot;消失的播客&quot;&gt;&lt;/a&gt;消失的播客&lt;/h1&gt;&lt;hr&gt;
&lt;img src=&quot;/2020/12/30/%E6%B6%88%E5%A4%B1%E7%9A%84XXX/boke.png&quot; class=&quot;&quot; title=&quot;剩余价值&quot;&gt;

&lt;center&gt;2020年听到一半被下架的播客。&lt;/center&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ghx4l0Cp9o0&quot;&gt;【051】瘟疫、语言和具体的人：与历史学家罗新的聊天&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=mdTxI-H59K0&quot;&gt;【剩余榨值 023】在巨大的 shock 后，我们所思考的、所做的一切都将与此有关&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="杂" scheme="https://yikayiyo.github.io/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>styled-components + form小问题</title>
    <link href="https://yikayiyo.github.io/2020/09/01/styled-components%20+%20form%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <id>https://yikayiyo.github.io/2020/09/01/styled-components%20+%20form%E5%B0%8F%E9%97%AE%E9%A2%98/</id>
    <published>2020-09-01T08:02:15.000Z</published>
    <updated>2023-11-22T10:18:22.747Z</updated>
    
    <content type="html"><![CDATA[<p>异常代码：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表单不能输入值</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">SignUp</span> = props =&gt; {</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">Wrapper</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">    border: 1px solid #f5f4f0;</span></span><br><span class="line"><span class="string">    max-width: 500px;</span></span><br><span class="line"><span class="string">    padding: 1em;</span></span><br><span class="line"><span class="string">    margin: 0 auto;</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">Form</span> = styled.<span class="property">form</span><span class="string">`</span></span><br><span class="line"><span class="string">    label,</span></span><br><span class="line"><span class="string">    input {</span></span><br><span class="line"><span class="string">      display: block;</span></span><br><span class="line"><span class="string">      line-height: 2em;</span></span><br><span class="line"><span class="string">    }</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    input {</span></span><br><span class="line"><span class="string">      width: 100%;</span></span><br><span class="line"><span class="string">      margin-bottom: 1em;</span></span><br><span class="line"><span class="string">    }</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Wrapper</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Sign Up<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Form</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onSubmit</span>=<span class="string">{...}</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">"username"</span>&gt;</span>Username:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">"email"</span>&gt;</span>Email:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">"password"</span>&gt;</span>Password:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Wrapper</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>将 <code>styled-components</code> 部分的代码放在组件的<strong>外部</strong>，代码就正常了…</p><p><a href="https://styled-components.com/docs/basics#define-styled-components-outside-of-the-render-method">官方说明</a></p><blockquote><p>It is important to define your styled components outside of the render method, otherwise it will be recreated on every single render pass. Defining a styled component within the render method will thwart caching and drastically slow down rendering speed, and should be avoided.</p></blockquote><p>尤其在处理表单时，如果每输入一个字符就<code>re-render</code>组件，的确会很奇怪。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;异常代码：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line</summary>
      
    
    
    
    
    <category term="前端" scheme="https://yikayiyo.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React" scheme="https://yikayiyo.github.io/tags/React/"/>
    
    <category term="styled-components" scheme="https://yikayiyo.github.io/tags/styled-components/"/>
    
    <category term="表单" scheme="https://yikayiyo.github.io/tags/%E8%A1%A8%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>网站性能提升最佳实践四</title>
    <link href="https://yikayiyo.github.io/2020/06/30/%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E5%9B%9B/"/>
    <id>https://yikayiyo.github.io/2020/06/30/%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E5%9B%9B/</id>
    <published>2020-06-30T03:08:45.000Z</published>
    <updated>2023-11-22T10:18:22.938Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developer.yahoo.com/performance/rules.html?guccounter=1#csslink">https://developer.yahoo.com/performance/rules.html?guccounter=1#csslink</a></p><ul><li>Content</li><li>Server</li><li>Cookie</li><li>CSS</li><li>JavaScript</li><li>Images</li><li>Mobile</li></ul><p>原文从七个方面总结网站性能提升。</p><p>本篇总结Javascript、Images方面。</p><h2 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h2><h3 id="Put-Scripts-at-Bottom-脚本放在底部"><a href="#Put-Scripts-at-Bottom-脚本放在底部" class="headerlink" title="Put Scripts at Bottom 脚本放在底部"></a><a href="https://developer.yahoo.com/performance/rules.html#js_bottom">Put Scripts at Bottom</a> 脚本放在底部</h3><p>脚本会阻塞并行下载</p><p><a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec8.html#sec8.1.4">HTTP / 1.1规范</a>建议浏览器每个主机名并行下载最多两个组件</p><p>如果有多个主机名提供<strong>图像</strong>，则可以并行进行两个以上的下载，但是在下载<strong>脚本</strong>时，即使使用不同的主机名，浏览器也不会启动任何其他下载</p><p>defer脚本表示脚本不包含document.write，浏览器可以继续渲染</p><p>通常一个脚本如果可以defered，那它也可以移动到页面底部</p><h3 id="Make-JavaScript-and-CSS-External-从外部引用js脚本和css文件"><a href="#Make-JavaScript-and-CSS-External-从外部引用js脚本和css文件" class="headerlink" title="Make JavaScript and CSS External 从外部引用js脚本和css文件"></a><a href="https://developer.yahoo.com/performance/rules.html#external">Make JavaScript and CSS External</a> 从外部引用js脚本和css文件</h3><p>在HTML文档中内嵌的JavaScript和CSS会在每次请求HTML文档时被下载</p><p>使用外部文件通常会产生更快的页面，因为JavaScript和CSS文件被浏览器缓存</p><p>如果JavaScript和CSS在外部文件中，并且被浏览器缓存，则在不增加HTTP请求次数的情况下减小了HTML文档的大小</p><p>如果用户每次会话都有多个页面浏览，并且许多页面重复使用相同的脚本和样式表，那么缓存外部文件的潜在好处就更大</p><p>对于主页，这种每次会话只访问一次的页面，将js和css内联可能更好</p><p>一个样例：</p><p>对于许多浏览页面的第一个页面，内联js和css（减少请求次数，该页面<strong>加载完后动态下载</strong>外部文件，随后访问的页面会使用这些<strong>缓存</strong></p><h3 id="Minify-JavaScript-and-CSS-压缩JavaScript和CSS"><a href="#Minify-JavaScript-and-CSS-压缩JavaScript和CSS" class="headerlink" title="Minify JavaScript and CSS 压缩JavaScript和CSS"></a><a href="https://developer.yahoo.com/performance/rules.html#minify">Minify JavaScript and CSS</a> 压缩JavaScript和CSS</h3><p>压缩代码指的是删除不必要的代码，减小代码体积（因此可以提升响应性能</p><p>混淆代码也是减小代码体积的方法，但是is more risky</p><p>除了压缩外部脚本和样式之外，可以并且也应该压缩内联的<code>&lt;script&gt;</code>和<code>&lt;style&gt;</code>块。</p><p>即使脚本和css文件已经被gzip了，压缩还能让它们的体积减少5%以上</p><p><a href="https://tool.oschina.net/jscompress">在线压缩工具</a></p><span id="more"></span><h3 id="Remove-Duplicate-Scripts-删除重复脚本"><a href="#Remove-Duplicate-Scripts-删除重复脚本" class="headerlink" title="Remove Duplicate Scripts 删除重复脚本"></a><a href="https://developer.yahoo.com/performance/rules.html#js_dupes">Remove Duplicate Scripts</a> 删除重复脚本</h3><p>重复脚本出现的两个关键因素：</p><ul><li>脚本数量太多</li><li>团队人数太多</li></ul><p>重复脚本因为浪费HTTP请求和Js执行而损害性能</p><p>避免方法：</p><ul><li><p>使用script标签引入js脚本（不都是这么做的吗？</p></li><li><p>php代码</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">insertScript</span>(<span class="string">"menu.js"</span>) <span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="Minimize-DOM-Access-最小化DOM访问"><a href="#Minimize-DOM-Access-最小化DOM访问" class="headerlink" title="Minimize DOM Access 最小化DOM访问"></a><a href="https://developer.yahoo.com/performance/rules.html#dom_access">Minimize DOM Access</a> 最小化DOM访问</h3><p>使用JavaScript访问DOM元素的速度很慢，因此，为了使页面更具响应性，应该：</p><ul><li><p>缓存对已访问元素的引用</p></li><li><p>“离线”更新节点，然后将其添加到树中</p></li><li><p>避免使用JavaScript修复布局</p></li></ul><h3 id="Develop-Smart-Event-Handlers-开发聪明的事件处理程序"><a href="#Develop-Smart-Event-Handlers-开发聪明的事件处理程序" class="headerlink" title="Develop Smart Event Handlers 开发聪明的事件处理程序"></a><a href="https://developer.yahoo.com/performance/rules.html#events">Develop Smart Event Handlers</a> 开发聪明的事件处理程序</h3><p>如果div中有10个按钮，则仅将一个事件处理程序附加到div包装器上，而不是为每个按钮附加一个处理程序</p><p>无需等待onload事件即可开始对DOM树进行操作</p><p>DOMContentLoaded可能更适合使用</p><h2 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h2><h3 id="Optimize-Images-优化图片"><a href="#Optimize-Images-优化图片" class="headerlink" title="Optimize Images 优化图片"></a><a href="https://developer.yahoo.com/performance/rules.html#opt_images">Optimize Images</a> 优化图片</h3><p>检查GIF，看看它们是否使用了与图像中颜色数量相对应的调色板大小</p><p>尝试将GIFs转换为PNGs</p><p>使用<a href="https://pmt.sourceforge.io/pngcrush/">pngcrush</a>压缩PNG</p><p>使用<a href="https://jpegclub.org/">jpegtran</a>处理JPEG</p><h3 id="Optimize-CSS-Sprites-优化CSS-Sprites"><a href="#Optimize-CSS-Sprites-优化CSS-Sprites" class="headerlink" title="Optimize CSS Sprites 优化CSS Sprites"></a><a href="https://developer.yahoo.com/performance/rules.html#opt_sprites">Optimize CSS Sprites</a> 优化CSS Sprites</h3><p>将sprite中的图像水平排列，而不是垂直排列，通常会生成较小的文件</p><p>将sprite中相近的颜色组合，有助于保持较低的颜色数量</p><p>“要mobile-friendly”，不要在sprite中的图像之间留下大的空隙</p><h3 id="Do-Not-Scale-Images-in-HTML-不在HTML中缩放图片"><a href="#Do-Not-Scale-Images-in-HTML-不在HTML中缩放图片" class="headerlink" title="Do Not Scale Images in HTML 不在HTML中缩放图片"></a><a href="https://developer.yahoo.com/performance/rules.html#no_scale">Do Not Scale Images in HTML</a> 不在HTML中缩放图片</h3><p>需要多大的图片就使用多大的图片</p><p>例子：</p><p>需要一个100x100的图片，不要来个500x500的图片然后去压缩它</p><h3 id="Make-favicon-ico-Small-and-Cacheable-图标要小、可缓存"><a href="#Make-favicon-ico-Small-and-Cacheable-图标要小、可缓存" class="headerlink" title="Make favicon.ico Small and Cacheable 图标要小、可缓存"></a><a href="https://developer.yahoo.com/performance/rules.html#favicon">Make favicon.ico Small and Cacheable</a> 图标要小、可缓存</h3><p>favicon.ico 即使你不关心它，浏览器也会请求它，最好不要使用404响应它</p><p>由于它在同一台服务器上，因此每次请求时都会发送cookie</p><p>它还会干扰下载顺序</p><p>为了克服弊端：</p><ul><li>保证它尽可能小，最好小于1K</li><li>根据需要设置Expires过期头（图标的名字不能改</li></ul><p><a href="http://www.imagemagick.org/">Imagemagick</a> 可以帮助你创建小图标</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://developer.yahoo.com/performance/rules.html?guccounter=1#csslink&quot;&gt;https://developer.yahoo.com/performance/rules.html?guccounter=1#csslink&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Content&lt;/li&gt;
&lt;li&gt;Server&lt;/li&gt;
&lt;li&gt;Cookie&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;Images&lt;/li&gt;
&lt;li&gt;Mobile&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原文从七个方面总结网站性能提升。&lt;/p&gt;
&lt;p&gt;本篇总结Javascript、Images方面。&lt;/p&gt;
&lt;h2 id=&quot;Javascript&quot;&gt;&lt;a href=&quot;#Javascript&quot; class=&quot;headerlink&quot; title=&quot;Javascript&quot;&gt;&lt;/a&gt;Javascript&lt;/h2&gt;&lt;h3 id=&quot;Put-Scripts-at-Bottom-脚本放在底部&quot;&gt;&lt;a href=&quot;#Put-Scripts-at-Bottom-脚本放在底部&quot; class=&quot;headerlink&quot; title=&quot;Put Scripts at Bottom 脚本放在底部&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.yahoo.com/performance/rules.html#js_bottom&quot;&gt;Put Scripts at Bottom&lt;/a&gt; 脚本放在底部&lt;/h3&gt;&lt;p&gt;脚本会阻塞并行下载&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec8.html#sec8.1.4&quot;&gt;HTTP / 1.1规范&lt;/a&gt;建议浏览器每个主机名并行下载最多两个组件&lt;/p&gt;
&lt;p&gt;如果有多个主机名提供&lt;strong&gt;图像&lt;/strong&gt;，则可以并行进行两个以上的下载，但是在下载&lt;strong&gt;脚本&lt;/strong&gt;时，即使使用不同的主机名，浏览器也不会启动任何其他下载&lt;/p&gt;
&lt;p&gt;defer脚本表示脚本不包含document.write，浏览器可以继续渲染&lt;/p&gt;
&lt;p&gt;通常一个脚本如果可以defered，那它也可以移动到页面底部&lt;/p&gt;
&lt;h3 id=&quot;Make-JavaScript-and-CSS-External-从外部引用js脚本和css文件&quot;&gt;&lt;a href=&quot;#Make-JavaScript-and-CSS-External-从外部引用js脚本和css文件&quot; class=&quot;headerlink&quot; title=&quot;Make JavaScript and CSS External 从外部引用js脚本和css文件&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.yahoo.com/performance/rules.html#external&quot;&gt;Make JavaScript and CSS External&lt;/a&gt; 从外部引用js脚本和css文件&lt;/h3&gt;&lt;p&gt;在HTML文档中内嵌的JavaScript和CSS会在每次请求HTML文档时被下载&lt;/p&gt;
&lt;p&gt;使用外部文件通常会产生更快的页面，因为JavaScript和CSS文件被浏览器缓存&lt;/p&gt;
&lt;p&gt;如果JavaScript和CSS在外部文件中，并且被浏览器缓存，则在不增加HTTP请求次数的情况下减小了HTML文档的大小&lt;/p&gt;
&lt;p&gt;如果用户每次会话都有多个页面浏览，并且许多页面重复使用相同的脚本和样式表，那么缓存外部文件的潜在好处就更大&lt;/p&gt;
&lt;p&gt;对于主页，这种每次会话只访问一次的页面，将js和css内联可能更好&lt;/p&gt;
&lt;p&gt;一个样例：&lt;/p&gt;
&lt;p&gt;对于许多浏览页面的第一个页面，内联js和css（减少请求次数，该页面&lt;strong&gt;加载完后动态下载&lt;/strong&gt;外部文件，随后访问的页面会使用这些&lt;strong&gt;缓存&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;Minify-JavaScript-and-CSS-压缩JavaScript和CSS&quot;&gt;&lt;a href=&quot;#Minify-JavaScript-and-CSS-压缩JavaScript和CSS&quot; class=&quot;headerlink&quot; title=&quot;Minify JavaScript and CSS 压缩JavaScript和CSS&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.yahoo.com/performance/rules.html#minify&quot;&gt;Minify JavaScript and CSS&lt;/a&gt; 压缩JavaScript和CSS&lt;/h3&gt;&lt;p&gt;压缩代码指的是删除不必要的代码，减小代码体积（因此可以提升响应性能&lt;/p&gt;
&lt;p&gt;混淆代码也是减小代码体积的方法，但是is more risky&lt;/p&gt;
&lt;p&gt;除了压缩外部脚本和样式之外，可以并且也应该压缩内联的&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;块。&lt;/p&gt;
&lt;p&gt;即使脚本和css文件已经被gzip了，压缩还能让它们的体积减少5%以上&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tool.oschina.net/jscompress&quot;&gt;在线压缩工具&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="学习笔记" scheme="https://yikayiyo.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="前端" scheme="https://yikayiyo.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="翻译" scheme="https://yikayiyo.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>网站性能提升最佳实践三</title>
    <link href="https://yikayiyo.github.io/2020/06/30/%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E4%B8%89/"/>
    <id>https://yikayiyo.github.io/2020/06/30/%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E4%B8%89/</id>
    <published>2020-06-30T02:08:46.000Z</published>
    <updated>2023-11-22T10:18:22.938Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developer.yahoo.com/performance/rules.html?guccounter=1#csslink">https://developer.yahoo.com/performance/rules.html?guccounter=1#csslink</a></p><ul><li>Content</li><li>Server</li><li>Cookie</li><li>CSS</li><li>JavaScript</li><li>Images</li><li>Mobile</li></ul><p>原文从七个方面总结网站性能提升。</p><p>本篇总结Cookie、CSS、Mobile方面。</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="Reduce-Cookie-Size-减小cookie大小"><a href="#Reduce-Cookie-Size-减小cookie大小" class="headerlink" title="Reduce Cookie Size 减小cookie大小"></a><a href="https://developer.yahoo.com/performance/rules.html#cookie_size">Reduce Cookie Size</a> 减小cookie大小</h3><p>使用HTTP cookie的原因有多种，例如身份验证和个性化</p><p>服务器和浏览器通过HTTP headers交换有关cookie的信息</p><p>尽可能减小cookie的大小，有助于减少对用户响应时间的影响</p><h3 id="Use-Cookie-Free-Domains-for-Components-尽可能不使用cookie"><a href="#Use-Cookie-Free-Domains-for-Components-尽可能不使用cookie" class="headerlink" title="Use Cookie-Free Domains for Components 尽可能不使用cookie"></a><a href="https://developer.yahoo.com/performance/rules.html#cookie_free">Use Cookie-Free Domains for Components</a> 尽可能不使用cookie</h3><p>确保使用无Cookie的请求来请求静态组件</p><p>创建一个子域并在其中托管所有静态组件</p><p>一些代理可能拒绝缓存带cookie的请求得到的组件</p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="Put-Stylesheets-at-Top-样式文件放到顶部"><a href="#Put-Stylesheets-at-Top-样式文件放到顶部" class="headerlink" title="Put Stylesheets at Top 样式文件放到顶部"></a><a href="https://developer.yahoo.com/performance/rules.html#css_top">Put Stylesheets at Top</a> 样式文件放到顶部</h3><p>将样式表放到HEAD可以让页面逐步呈现</p><h3 id="Avoid-CSS-Expressions-避免使用CSS表达式"><a href="#Avoid-CSS-Expressions-避免使用CSS表达式" class="headerlink" title="Avoid CSS Expressions 避免使用CSS表达式"></a><a href="https://developer.yahoo.com/performance/rules.html#css_expressions">Avoid CSS Expressions</a> 避免使用CSS表达式</h3><p>css表达式可以动态的设置css属性</p><span id="more"></span><p>但是其调用次数过多，例如鼠标在页面上移动、放大缩小了窗口、页面滚动等</p><p>可以使用event handlers作为替代</p><h3 id="Choose-Over-import-使用link而不是-import"><a href="#Choose-Over-import-使用link而不是-import" class="headerlink" title="Choose <link> Over @import 使用link而不是@import"></a><a href="https://developer.yahoo.com/performance/rules.html#csslink">Choose <code>&lt;link&gt;</code> Over @import</a> 使用link而不是@import</h3><p>In IE <code>@import</code> behaves the same as using <code>&lt;link&gt;</code> at the bottom of the page, so it’s best not to use it.</p><h3 id="Avoid-Filters-避免使用Filters"><a href="#Avoid-Filters-避免使用Filters" class="headerlink" title="Avoid Filters 避免使用Filters"></a><a href="https://developer.yahoo.com/performance/rules.html#no_filters">Avoid Filters</a> 避免使用Filters</h3><p>IE专有的AlphaImageLoader过滤器旨在解决IE版本&lt;7的半透明真彩色PNG的问题。该过滤器的问题是，当图像被下载时，它会阻止渲染并冻结浏览器。它还会增加内存消耗，而且是按每个元素应用，而不是按每张图片应用，所以问题会成倍增加。</p><p>最好的办法是完全避免使用AlphaImageLoader，而使用优雅降级的PNG8代替，这些在IE中都是可以的。如果你实在需要AlphaImageLoader，请使用<code>_filter</code>，以免影响IE7以上用户。</p><h2 id="Mobile"><a href="#Mobile" class="headerlink" title="Mobile"></a>Mobile</h2><h3 id="Keep-Components-Under-25-KB-组件不超过25KB"><a href="#Keep-Components-Under-25-KB-组件不超过25KB" class="headerlink" title="Keep Components Under 25 KB 组件不超过25KB"></a><a href="https://developer.yahoo.com/performance/rules.html#under25">Keep Components Under 25 KB</a> 组件不超过25KB</h3><p>此限制与以下事实有关：iPhone不会缓存大于25K的组件。</p><p>请注意，这是<strong>未压缩的大小</strong>。</p><p>缩小在这里非常重要，因为仅使用gzip可能还不够。</p><h3 id="Pack-Components-Into-a-Multipart-Document-打包组件"><a href="#Pack-Components-Into-a-Multipart-Document-打包组件" class="headerlink" title="Pack Components Into a Multipart Document 打包组件"></a><a href="https://developer.yahoo.com/performance/rules.html#multipart">Pack Components Into a Multipart Document</a> 打包组件</h3><p>将组件打包到一个多部分的文档中，就像一封带有附件的电子邮件，它可以帮助你<strong>用一个HTTP请求获取多个组件</strong></p><p>HTTP requests are expensive！</p><p>使用这项技术时，首先检查用户代理是否支持（iphone就不支持</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://developer.yahoo.com/performance/rules.html?guccounter=1#csslink&quot;&gt;https://developer.yahoo.com/performance/rules.html?guccounter=1#csslink&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Content&lt;/li&gt;
&lt;li&gt;Server&lt;/li&gt;
&lt;li&gt;Cookie&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;Images&lt;/li&gt;
&lt;li&gt;Mobile&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原文从七个方面总结网站性能提升。&lt;/p&gt;
&lt;p&gt;本篇总结Cookie、CSS、Mobile方面。&lt;/p&gt;
&lt;h2 id=&quot;Cookie&quot;&gt;&lt;a href=&quot;#Cookie&quot; class=&quot;headerlink&quot; title=&quot;Cookie&quot;&gt;&lt;/a&gt;Cookie&lt;/h2&gt;&lt;h3 id=&quot;Reduce-Cookie-Size-减小cookie大小&quot;&gt;&lt;a href=&quot;#Reduce-Cookie-Size-减小cookie大小&quot; class=&quot;headerlink&quot; title=&quot;Reduce Cookie Size 减小cookie大小&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.yahoo.com/performance/rules.html#cookie_size&quot;&gt;Reduce Cookie Size&lt;/a&gt; 减小cookie大小&lt;/h3&gt;&lt;p&gt;使用HTTP cookie的原因有多种，例如身份验证和个性化&lt;/p&gt;
&lt;p&gt;服务器和浏览器通过HTTP headers交换有关cookie的信息&lt;/p&gt;
&lt;p&gt;尽可能减小cookie的大小，有助于减少对用户响应时间的影响&lt;/p&gt;
&lt;h3 id=&quot;Use-Cookie-Free-Domains-for-Components-尽可能不使用cookie&quot;&gt;&lt;a href=&quot;#Use-Cookie-Free-Domains-for-Components-尽可能不使用cookie&quot; class=&quot;headerlink&quot; title=&quot;Use Cookie-Free Domains for Components 尽可能不使用cookie&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.yahoo.com/performance/rules.html#cookie_free&quot;&gt;Use Cookie-Free Domains for Components&lt;/a&gt; 尽可能不使用cookie&lt;/h3&gt;&lt;p&gt;确保使用无Cookie的请求来请求静态组件&lt;/p&gt;
&lt;p&gt;创建一个子域并在其中托管所有静态组件&lt;/p&gt;
&lt;p&gt;一些代理可能拒绝缓存带cookie的请求得到的组件&lt;/p&gt;
&lt;h2 id=&quot;CSS&quot;&gt;&lt;a href=&quot;#CSS&quot; class=&quot;headerlink&quot; title=&quot;CSS&quot;&gt;&lt;/a&gt;CSS&lt;/h2&gt;&lt;h3 id=&quot;Put-Stylesheets-at-Top-样式文件放到顶部&quot;&gt;&lt;a href=&quot;#Put-Stylesheets-at-Top-样式文件放到顶部&quot; class=&quot;headerlink&quot; title=&quot;Put Stylesheets at Top 样式文件放到顶部&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.yahoo.com/performance/rules.html#css_top&quot;&gt;Put Stylesheets at Top&lt;/a&gt; 样式文件放到顶部&lt;/h3&gt;&lt;p&gt;将样式表放到HEAD可以让页面逐步呈现&lt;/p&gt;
&lt;h3 id=&quot;Avoid-CSS-Expressions-避免使用CSS表达式&quot;&gt;&lt;a href=&quot;#Avoid-CSS-Expressions-避免使用CSS表达式&quot; class=&quot;headerlink&quot; title=&quot;Avoid CSS Expressions 避免使用CSS表达式&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.yahoo.com/performance/rules.html#css_expressions&quot;&gt;Avoid CSS Expressions&lt;/a&gt; 避免使用CSS表达式&lt;/h3&gt;&lt;p&gt;css表达式可以动态的设置css属性&lt;/p&gt;</summary>
    
    
    
    
    <category term="学习笔记" scheme="https://yikayiyo.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="前端" scheme="https://yikayiyo.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="翻译" scheme="https://yikayiyo.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>网站性能提升最佳实践二</title>
    <link href="https://yikayiyo.github.io/2020/06/29/%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E4%BA%8C/"/>
    <id>https://yikayiyo.github.io/2020/06/29/%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E4%BA%8C/</id>
    <published>2020-06-29T07:33:05.000Z</published>
    <updated>2023-11-22T10:18:22.938Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developer.yahoo.com/performance/rules.html?guccounter=1#csslink">https://developer.yahoo.com/performance/rules.html?guccounter=1#csslink</a></p><ul><li>Content</li><li>Server</li><li>Cookie</li><li>CSS</li><li>JavaScript</li><li>Images</li><li>Mobile</li></ul><p>原文从七个方面总结网站性能提升。</p><p>本篇总结Server方面。</p><h3 id="Use-a-Content-Delivery-Network-CDN-使用内容分发网络"><a href="#Use-a-Content-Delivery-Network-CDN-使用内容分发网络" class="headerlink" title="Use a Content Delivery Network (CDN)使用内容分发网络"></a><a href="https://developer.yahoo.com/performance/rules.html#cdn">Use a Content Delivery Network (CDN)</a>使用内容分发网络</h3><p>用户到服务器的距离会影响响应时间，比如当我们访问美国的服务器和中国的服务器<br>用户80%-90%的<strong>响应时间</strong>用来下载页面上的内容<br>为了加速这个：</p><ul><li><p>不要轻易尝试将web应用改为分布式架构</p></li><li><p>可以尝试使用CDN，将静态内容分散（切换到CDN是个相对简单的代码变化，将极大地提高网站速度</p></li></ul><p>一个内容分发网络是<strong>分布在多地的服务器集合</strong>，可以更有效地向用户提供内容</p><h3 id="Add-Expires-or-Cache-Control-Header添加Expires或Cache-Control头"><a href="#Add-Expires-or-Cache-Control-Header添加Expires或Cache-Control头" class="headerlink" title="Add Expires or Cache-Control Header添加Expires或Cache-Control头"></a><a href="https://developer.yahoo.com/performance/rules.html#expires">Add Expires or Cache-Control Header</a>添加Expires或Cache-Control头</h3><ol><li>对于静态组件，设置一个长期的Expires头，表示该请求“永不过期”</li><li>对于动态组件，使用适当的Cache-Control头，来帮助浏览器有条件的进行请求</li></ol><p>网页被首次访问时需要大量的HTTP请求，通过使用Expires头，可以使请求过的组件<u>可缓存</u>，避免后续访问时的重复请求。也就是说，这个操作是对后续的请求有影响</p><p>对于性能的提升，取决你对这个网站的访问频率</p><p>Web服务器在<strong>HTTP响应</strong>中添加的Expires头告诉客户端可以将组件缓存多长时间</p><p>如果使用了长期的Expires头，当组件发生改变时，组件名应该改变（构建阶段处理：将组件版本号加到组件名中</p><h3 id="Gzip-Components压缩组件"><a href="#Gzip-Components压缩组件" class="headerlink" title="Gzip Components压缩组件"></a><a href="https://developer.yahoo.com/performance/rules.html#gzip">Gzip Components</a>压缩组件</h3><p>通过<strong>压缩HTTP响应</strong>来减少响应时间</p><span id="more"></span><p>HTTP请求头中要添加</p><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br></pre></td></tr></tbody></table></figure><p>服务器根据上面列出的方法之一压缩响应，并在响应头中添加下面的字段提醒客户端</p><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Encoding</span><span class="punctuation">: </span>gzip</span><br></pre></td></tr></tbody></table></figure><p>服务器根据文件类型选择要压缩的内容，但通常非常有限</p><p>任何文本类型的响应都值得压缩</p><p>图片和PDF不应该压缩（因为已经压缩过了</p><p>压缩尽可能多的文件类型是减少页面重量page weight，加速用户体验的简单方法</p><h3 id="Configure-ETags配置实体标签"><a href="#Configure-ETags配置实体标签" class="headerlink" title="Configure ETags配置实体标签"></a><a href="https://developer.yahoo.com/performance/rules.html#etags">Configure ETags</a>配置实体标签</h3><p>当要确定缓存的内容和服务器中的内容是否一致时，实体标签是比最后修改时间（last-modified date）更完备的机制</p><p>实体标签是唯一标识特定版本组件的字符串，唯一格式限制是要使用引号引起来</p><p>一个例子：</p><p>服务器发回响应如下</p><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Last-Modified</span><span class="punctuation">: </span>Tue, 12 Dec 2006 03:03:59 GMT</span><br><span class="line"><span class="attribute">ETag</span><span class="punctuation">: </span>"10c24bc-4ab-457e1c1f"</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>12195</span><br></pre></td></tr></tbody></table></figure><p>过一会客户端要验证内容，就发送下面的请求，其中If-None-Match中就是要验证的实体标签</p><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/i/yahoo.gif</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>us.yimg.com</span><br><span class="line"><span class="attribute">If-Modified-Since</span><span class="punctuation">: </span>Tue, 12 Dec 2006 03:03:59 GMT</span><br><span class="line"><span class="attribute">If-None-Match</span><span class="punctuation">: </span>"10c24bc-4ab-457e1c1f"</span><br></pre></td></tr></tbody></table></figure><p>如果标签得到匹配，服务器会返回一个304响应，表示Not Modified</p><p>网站服务器是集群的情况，这项技术不推荐使用，因为：</p><blockquote><p>The problem with ETags is that they typically are constructed using attributes that make them unique to a specific server hosting a site. ETags won’t match when a browser gets the original component from one server and later tries to validate that component on a different server, a situation that is all too common on Web sites that use a cluster of servers to handle requests. By default, both Apache and IIS embed data in the ETag that dramatically reduces the odds of the validity test succeeding on web sites with multiple servers.</p></blockquote><p>Apache服务器删除ETag的方法：</p><ul><li><p>在配置文件添加一行 </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileETag none</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="Flush-Buffer-Early尽早刷新输出缓存"><a href="#Flush-Buffer-Early尽早刷新输出缓存" class="headerlink" title="Flush Buffer Early尽早刷新输出缓存"></a><a href="https://developer.yahoo.com/performance/rules.html#flush">Flush Buffer Early</a>尽早刷新输出缓存</h3><p><a href="https://www.php.net/flush">flush()</a> 函数允许将部分就绪的HTML响应发送回浏览器，以便浏览器可以在服务器忙于处理其它HTML时就开始获取组件</p><p>flushing的最佳位置是head标签之后，如下</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  ... &lt;!-- css, js --&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;?php flush(); ?&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  ... &lt;!-- content --&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="Use-GET-for-Ajax-Requests-使用GET处理Ajax请求"><a href="#Use-GET-for-Ajax-Requests-使用GET处理Ajax请求" class="headerlink" title="Use GET for Ajax Requests 使用GET处理Ajax请求"></a><a href="https://developer.yahoo.com/performance/rules.html#ajax_get">Use GET for Ajax Requests</a> 使用GET处理Ajax请求</h3><p>在使用XMLHttpRequest时，POST在浏览器中的实现分为两步：先发送头文件，再发送数据。</p><p>因此最好使用GET请求，它只使用一个TCP包就可以发送（除非有很多cookie</p><p>POST without posting any data behaves like GET.</p><h3 id="Avoid-Empty-Image-src-避免空src属性"><a href="#Avoid-Empty-Image-src-避免空src属性" class="headerlink" title="Avoid Empty Image src 避免空src属性"></a><a href="https://developer.yahoo.com/performance/rules.html#emptysrc">Avoid Empty Image src</a> 避免空src属性</h3><p>两种形式的空src属性</p><ol><li><p>html</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>js</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">img.<span class="property">src</span> = <span class="string">""</span>;</span><br></pre></td></tr></tbody></table></figure></li></ol><p>都会导致：浏览器再次向服务器发送一次请求</p><p>造成这个行为的根本原因是：在浏览器中执行URI解析的方式，浏览器会将空字符串视为一条相对URI，然后进行解析</p><p>HTML5增加了约束，src属性必须非空</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://developer.yahoo.com/performance/rules.html?guccounter=1#csslink&quot;&gt;https://developer.yahoo.com/performance/rules.html?guccounter=1#csslink&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Content&lt;/li&gt;
&lt;li&gt;Server&lt;/li&gt;
&lt;li&gt;Cookie&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;Images&lt;/li&gt;
&lt;li&gt;Mobile&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原文从七个方面总结网站性能提升。&lt;/p&gt;
&lt;p&gt;本篇总结Server方面。&lt;/p&gt;
&lt;h3 id=&quot;Use-a-Content-Delivery-Network-CDN-使用内容分发网络&quot;&gt;&lt;a href=&quot;#Use-a-Content-Delivery-Network-CDN-使用内容分发网络&quot; class=&quot;headerlink&quot; title=&quot;Use a Content Delivery Network (CDN)使用内容分发网络&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.yahoo.com/performance/rules.html#cdn&quot;&gt;Use a Content Delivery Network (CDN)&lt;/a&gt;使用内容分发网络&lt;/h3&gt;&lt;p&gt;用户到服务器的距离会影响响应时间，比如当我们访问美国的服务器和中国的服务器&lt;br&gt;用户80%-90%的&lt;strong&gt;响应时间&lt;/strong&gt;用来下载页面上的内容&lt;br&gt;为了加速这个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;不要轻易尝试将web应用改为分布式架构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可以尝试使用CDN，将静态内容分散（切换到CDN是个相对简单的代码变化，将极大地提高网站速度&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个内容分发网络是&lt;strong&gt;分布在多地的服务器集合&lt;/strong&gt;，可以更有效地向用户提供内容&lt;/p&gt;
&lt;h3 id=&quot;Add-Expires-or-Cache-Control-Header添加Expires或Cache-Control头&quot;&gt;&lt;a href=&quot;#Add-Expires-or-Cache-Control-Header添加Expires或Cache-Control头&quot; class=&quot;headerlink&quot; title=&quot;Add Expires or Cache-Control Header添加Expires或Cache-Control头&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.yahoo.com/performance/rules.html#expires&quot;&gt;Add Expires or Cache-Control Header&lt;/a&gt;添加Expires或Cache-Control头&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;对于静态组件，设置一个长期的Expires头，表示该请求“永不过期”&lt;/li&gt;
&lt;li&gt;对于动态组件，使用适当的Cache-Control头，来帮助浏览器有条件的进行请求&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;网页被首次访问时需要大量的HTTP请求，通过使用Expires头，可以使请求过的组件&lt;u&gt;可缓存&lt;/u&gt;，避免后续访问时的重复请求。也就是说，这个操作是对后续的请求有影响&lt;/p&gt;
&lt;p&gt;对于性能的提升，取决你对这个网站的访问频率&lt;/p&gt;
&lt;p&gt;Web服务器在&lt;strong&gt;HTTP响应&lt;/strong&gt;中添加的Expires头告诉客户端可以将组件缓存多长时间&lt;/p&gt;
&lt;p&gt;如果使用了长期的Expires头，当组件发生改变时，组件名应该改变（构建阶段处理：将组件版本号加到组件名中&lt;/p&gt;
&lt;h3 id=&quot;Gzip-Components压缩组件&quot;&gt;&lt;a href=&quot;#Gzip-Components压缩组件&quot; class=&quot;headerlink&quot; title=&quot;Gzip Components压缩组件&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.yahoo.com/performance/rules.html#gzip&quot;&gt;Gzip Components&lt;/a&gt;压缩组件&lt;/h3&gt;&lt;p&gt;通过&lt;strong&gt;压缩HTTP响应&lt;/strong&gt;来减少响应时间&lt;/p&gt;</summary>
    
    
    
    
    <category term="学习笔记" scheme="https://yikayiyo.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="前端" scheme="https://yikayiyo.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="翻译" scheme="https://yikayiyo.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>网站性能提升最佳实践一</title>
    <link href="https://yikayiyo.github.io/2020/06/22/%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E4%B8%80/"/>
    <id>https://yikayiyo.github.io/2020/06/22/%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E4%B8%80/</id>
    <published>2020-06-22T14:51:53.000Z</published>
    <updated>2023-11-22T10:18:22.937Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developer.yahoo.com/performance/rules.html?guccounter=1#csslink">https://developer.yahoo.com/performance/rules.html?guccounter=1#csslink</a></p><ul><li>Content</li><li>Server</li><li>Cookie</li><li>CSS</li><li>JavaScript</li><li>Images</li><li>Mobile</li></ul><p>原文从七个方面总结网站性能提升。</p><p>本篇总结Content方面。</p><h3 id="Make-Fewer-HTTP-Requests-减少HTTP请求"><a href="#Make-Fewer-HTTP-Requests-减少HTTP请求" class="headerlink" title="Make Fewer HTTP Requests 减少HTTP请求"></a><a href="https://developer.yahoo.com/performance/rules.html#num_http">Make Fewer HTTP Requests</a> 减少HTTP请求</h3><p>减少页面的组件数量，可以减少HTTP请求数量。</p><p>减少页面组件的方法：</p><ul><li><p>精简页面设计</p></li><li><p>不简化设计的情况下：</p><ul><li>文件组合（js文件放到一个里面，css文件放到一个里面）</li></ul></li><li><p><a href="https://css-tricks.com/css-sprites/">CSS Sprites</a>：背景图片合并成一张，利用css属性设置各个部分到相对应的页面</p><ul><li><a href="https://css-tricks.com/examples/CSSClip/">CSS Sprites with Inline Images</a> 也可以用来处理图片</li></ul></li><li><p>将内联图片放到css文件中（ Combining inline images into your cached stylesheets is a way to reduce HTTP requests and avoid increasing the size of your pages ？How ? ( Todo: find demo</p></li></ul><h3 id="Reduce-DNS-Lookups-减少DNS查询"><a href="#Reduce-DNS-Lookups-减少DNS查询" class="headerlink" title="Reduce DNS Lookups 减少DNS查询"></a><a href="https://developer.yahoo.com/performance/rules.html#dns_lookups">Reduce DNS Lookups</a> 减少DNS查询</h3><p>减少网站的主机名（hostnames），可以减少DNS查询次数</p><p>但是减少网站主机名会减少页面的并发下载量</p><blockquote><p>Trade-off：Avoiding DNS lookups cuts response times, but reducing parallel downloads may increase response times. </p></blockquote><p> Guide：Split components across <strong>at least two but no more than four</strong> hostnames.</p><h3 id="Avoid-Redirects-避免网站重定向"><a href="#Avoid-Redirects-避免网站重定向" class="headerlink" title="Avoid Redirects 避免网站重定向"></a><a href="https://developer.yahoo.com/performance/rules.html#redirects">Avoid Redirects</a> 避免网站重定向</h3><p>最经常发生的重定向：应该加/的地方没有加/</p><p>重定向可以用来从旧网站跳转到新网站</p><p>重定向也可以用来连接网站的不同部分、根据特定情况让用户跳转</p><p>解决办法：</p><ul><li><p>如果两个网站在同一个服务器，使用 <code>Alias and mod_rewrite</code></p></li><li><p>如果是网站换了个新域名，创建一个CNAME (a DNS record that creates an alias pointing from one domain name to another)，结合<code>Alias or mod_rewrite</code></p></li></ul><h3 id="Make-Ajax-Cacheable-缓存Ajax请求"><a href="#Make-Ajax-Cacheable-缓存Ajax请求" class="headerlink" title="Make Ajax Cacheable 缓存Ajax请求"></a><a href="https://developer.yahoo.com/performance/rules.html#cacheajax">Make Ajax Cacheable</a> 缓存Ajax请求</h3><p><strong>异步不等于即时</strong></p><p>优化异步请求：</p><ul><li>缓存Ajax请求</li></ul><span id="more"></span><h4 id="何时使用旧的响应，何时发送新的请求？"><a href="#何时使用旧的响应，何时发送新的请求？" class="headerlink" title="何时使用旧的响应，何时发送新的请求？"></a>何时使用旧的响应，何时发送新的请求？</h4><blockquote><p>This could be done by adding a timestamp to the address book Ajax URL indicating the last time the user modified her address book, for example, &amp;t=1190241612. If the address book hasn’t been modified since the last download, the timestamp will be the same and the address book will be read from the browser’s cache eliminating an extra HTTP roundtrip. If the user has modified her address book, the timestamp ensures the new URL doesn’t match the cached response, and the browser will request the updated address book entries.</p></blockquote><h3 id="Postload-Components"><a href="#Postload-Components" class="headerlink" title="Postload Components"></a><a href="https://developer.yahoo.com/performance/rules.html#postload">Postload Components</a></h3><p>非必须的组件延迟加载，比如一些js代码、用户点击后才显示的内容、文件夹里面的图片</p><p>确保页面正常工作，然后通过一些延迟加载的脚本增强页面上的体验，比如动画、拖放</p><h3 id="Preload-Components"><a href="#Preload-Components" class="headerlink" title="Preload Components"></a><a href="https://developer.yahoo.com/performance/rules.html#preload">Preload Components</a></h3><p>利用计算机的闲置时间，预加载将来需要的内容</p><ol><li><p>无条件的</p><p>只要打开某网站就加载一些额外的组件。</p><p>打开google.com，总会预加载之后搜索界面的图片</p></li><li><p>有条件的</p><p>搜索框输入内容就会预加载内容</p></li><li><p>预期中的</p><p>上线网站新设计时预加载可以不影响用户体验</p></li></ol><h3 id="Reduce-the-Number-of-DOM-Elements"><a href="#Reduce-the-Number-of-DOM-Elements" class="headerlink" title="Reduce the Number of DOM Elements"></a><a href="https://developer.yahoo.com/performance/rules.html#min_dom">Reduce the Number of DOM Elements</a></h3><p>页面tag数量</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">'*'</span>).<span class="property">length</span></span><br></pre></td></tr></tbody></table></figure><p>只有在语义上有意义时，才使用<code>&lt;div&gt;</code>（ 因为它总会添加一行</p><h4 id="有多少个DOM元素才算多呢？"><a href="#有多少个DOM元素才算多呢？" class="headerlink" title="有多少个DOM元素才算多呢？"></a>有多少个DOM元素才算多呢？</h4><p>检查其他类似的页面，然后比较。</p><h3 id="Split-Components-Across-Domains"><a href="#Split-Components-Across-Domains" class="headerlink" title="Split Components Across Domains"></a><a href="https://developer.yahoo.com/performance/rules.html#split">Split Components Across Domains</a></h3><p>拆分组件可以最大限度地实现并行下载</p><p>确保使用的域名数量不超过2-4个，因为DNS查询惩罚</p><p>例子：</p><p>将HTML文件和动态内容托管在<a href="http://www.example.org,并在static1.example.org和static2.example.org上拆分部署静态组件/">www.example.org，并在static1.example.org和static2.example.org上拆分部署静态组件</a></p><h3 id="Minimize-Number-of-iframes"><a href="#Minimize-Number-of-iframes" class="headerlink" title="Minimize Number of iframes"></a><a href="https://developer.yahoo.com/performance/rules.html#iframes">Minimize Number of iframes</a></h3><p><code>&lt;iframe&gt;</code> 优点：</p><ul><li>Helps with slow third-party content like badges and ads</li><li>Security sandbox</li><li>Download scripts in parallel</li></ul><p><code>&lt;iframe&gt;</code> 缺点：</p><ul><li>Costly even if blank</li><li>Blocks page onload</li><li>Non-semantic</li></ul><h3 id="Avoid-404s"><a href="#Avoid-404s" class="headerlink" title="Avoid 404s"></a><a href="https://developer.yahoo.com/performance/rules.html#no404">Avoid 404s</a></h3><p>HTTP请求是很昂贵的，提出HTTP请求，得到一个无用的响应（即404 Not Found）是完全没有必要的，而且会拖慢用户体验，没有任何好处。</p><p><strong>Particularly bad</strong> is when the link to an external JavaScript is wrong and the result is a 404. First, this download will block parallel downloads. Next the browser may try to parse the 404 response body as if it were JavaScript code, trying to find something usable in it.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://developer.yahoo.com/performance/rules.html?guccounter=1#csslink&quot;&gt;https://developer.yahoo.com/performance/rules.html?guccounter=1#csslink&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Content&lt;/li&gt;
&lt;li&gt;Server&lt;/li&gt;
&lt;li&gt;Cookie&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;Images&lt;/li&gt;
&lt;li&gt;Mobile&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原文从七个方面总结网站性能提升。&lt;/p&gt;
&lt;p&gt;本篇总结Content方面。&lt;/p&gt;
&lt;h3 id=&quot;Make-Fewer-HTTP-Requests-减少HTTP请求&quot;&gt;&lt;a href=&quot;#Make-Fewer-HTTP-Requests-减少HTTP请求&quot; class=&quot;headerlink&quot; title=&quot;Make Fewer HTTP Requests 减少HTTP请求&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.yahoo.com/performance/rules.html#num_http&quot;&gt;Make Fewer HTTP Requests&lt;/a&gt; 减少HTTP请求&lt;/h3&gt;&lt;p&gt;减少页面的组件数量，可以减少HTTP请求数量。&lt;/p&gt;
&lt;p&gt;减少页面组件的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;精简页面设计&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不简化设计的情况下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件组合（js文件放到一个里面，css文件放到一个里面）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://css-tricks.com/css-sprites/&quot;&gt;CSS Sprites&lt;/a&gt;：背景图片合并成一张，利用css属性设置各个部分到相对应的页面&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://css-tricks.com/examples/CSSClip/&quot;&gt;CSS Sprites with Inline Images&lt;/a&gt; 也可以用来处理图片&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将内联图片放到css文件中（ Combining inline images into your cached stylesheets is a way to reduce HTTP requests and avoid increasing the size of your pages ？How ? ( Todo: find demo&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Reduce-DNS-Lookups-减少DNS查询&quot;&gt;&lt;a href=&quot;#Reduce-DNS-Lookups-减少DNS查询&quot; class=&quot;headerlink&quot; title=&quot;Reduce DNS Lookups 减少DNS查询&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.yahoo.com/performance/rules.html#dns_lookups&quot;&gt;Reduce DNS Lookups&lt;/a&gt; 减少DNS查询&lt;/h3&gt;&lt;p&gt;减少网站的主机名（hostnames），可以减少DNS查询次数&lt;/p&gt;
&lt;p&gt;但是减少网站主机名会减少页面的并发下载量&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Trade-off：Avoiding DNS lookups cuts response times, but reducing parallel downloads may increase response times. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; Guide：Split components across &lt;strong&gt;at least two but no more than four&lt;/strong&gt; hostnames.&lt;/p&gt;
&lt;h3 id=&quot;Avoid-Redirects-避免网站重定向&quot;&gt;&lt;a href=&quot;#Avoid-Redirects-避免网站重定向&quot; class=&quot;headerlink&quot; title=&quot;Avoid Redirects 避免网站重定向&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.yahoo.com/performance/rules.html#redirects&quot;&gt;Avoid Redirects&lt;/a&gt; 避免网站重定向&lt;/h3&gt;&lt;p&gt;最经常发生的重定向：应该加/的地方没有加/&lt;/p&gt;
&lt;p&gt;重定向可以用来从旧网站跳转到新网站&lt;/p&gt;
&lt;p&gt;重定向也可以用来连接网站的不同部分、根据特定情况让用户跳转&lt;/p&gt;
&lt;p&gt;解决办法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果两个网站在同一个服务器，使用 &lt;code&gt;Alias and mod_rewrite&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果是网站换了个新域名，创建一个CNAME (a DNS record that creates an alias pointing from one domain name to another)，结合&lt;code&gt;Alias or mod_rewrite&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Make-Ajax-Cacheable-缓存Ajax请求&quot;&gt;&lt;a href=&quot;#Make-Ajax-Cacheable-缓存Ajax请求&quot; class=&quot;headerlink&quot; title=&quot;Make Ajax Cacheable 缓存Ajax请求&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.yahoo.com/performance/rules.html#cacheajax&quot;&gt;Make Ajax Cacheable&lt;/a&gt; 缓存Ajax请求&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;异步不等于即时&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;优化异步请求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缓存Ajax请求&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="学习笔记" scheme="https://yikayiyo.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="前端" scheme="https://yikayiyo.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="翻译" scheme="https://yikayiyo.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>surface测试</title>
    <link href="https://yikayiyo.github.io/2020/06/18/surface%E6%B5%8B%E8%AF%95/"/>
    <id>https://yikayiyo.github.io/2020/06/18/surface%E6%B5%8B%E8%AF%95/</id>
    <published>2020-06-18T09:21:24.000Z</published>
    <updated>2023-11-22T10:18:22.747Z</updated>
    
    <content type="html"><![CDATA[<p>surface上写博客，完事之后各端同步测试。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;surface上写博客，完事之后各端同步测试。&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="杂" scheme="https://yikayiyo.github.io/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>git修改最近一次commit的信息</title>
    <link href="https://yikayiyo.github.io/2020/06/18/git%E4%BF%AE%E6%94%B9%E6%9C%80%E8%BF%91%E4%B8%80%E6%AC%A1commit%E7%9A%84%E4%BF%A1%E6%81%AF/"/>
    <id>https://yikayiyo.github.io/2020/06/18/git%E4%BF%AE%E6%94%B9%E6%9C%80%E8%BF%91%E4%B8%80%E6%AC%A1commit%E7%9A%84%E4%BF%A1%E6%81%AF/</id>
    <published>2020-06-18T05:29:00.000Z</published>
    <updated>2023-11-22T10:18:22.737Z</updated>
    
    <content type="html"><![CDATA[<p>最近一次提交的信息不太对，已经push到远端。</p><img src="/2020/06/18/git%E4%BF%AE%E6%94%B9%E6%9C%80%E8%BF%91%E4%B8%80%E6%AC%A1commit%E7%9A%84%E4%BF%A1%E6%81%AF/xiugaiqian.png" class="" title="修改前"><p>修改步骤：</p><ol><li><p>输入命令，会进入编辑器</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></tbody></table></figure></li><li><p>修改commit信息，退出编辑器</p></li><li><p>强制推送</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f</span><br></pre></td></tr></tbody></table></figure></li></ol><p>修改后：</p><img src="/2020/06/18/git%E4%BF%AE%E6%94%B9%E6%9C%80%E8%BF%91%E4%B8%80%E6%AC%A1commit%E7%9A%84%E4%BF%A1%E6%81%AF/xiugaihou.png" class="" title="修改后"><p>注意到：<strong>commit号改变了</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近一次提交的信息不太对，已经push到远端。&lt;/p&gt;
&lt;img src=&quot;/2020/06/18/git%E4%BF%AE%E6%94%B9%E6%9C%80%E8%BF%91%E4%B8%80%E6%AC%A1commit%E7%9A%84%E4%BF%A1%E6%81</summary>
      
    
    
    
    
    <category term="学习笔记" scheme="https://yikayiyo.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="git" scheme="https://yikayiyo.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>几则笑话</title>
    <link href="https://yikayiyo.github.io/2020/02/22/%E5%87%A0%E5%88%99%E7%AC%91%E8%AF%9D/"/>
    <id>https://yikayiyo.github.io/2020/02/22/%E5%87%A0%E5%88%99%E7%AC%91%E8%AF%9D/</id>
    <published>2020-02-22T12:41:23.000Z</published>
    <updated>2023-11-22T10:18:22.757Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/02/22/%E5%87%A0%E5%88%99%E7%AC%91%E8%AF%9D/0222fig1.png" class="" title="weibo"><img src="/2020/02/22/%E5%87%A0%E5%88%99%E7%AC%91%E8%AF%9D/0222fig2.png" class="" title="weiboJinggao"><p>看到这则信息，下面有人举了几个前苏联的笑话，感觉很有意思，于是就去找了几个，笑得肚子疼。</p><blockquote><p>有个人在红场散发传单，被克格勃逮住了。那人辩解，我发的都是白纸。克格勃冷笑道，你以为我不知道你什么意思？</p></blockquote><blockquote><p>在苏共二十三次代表大会上，勃列日涅夫作报告，他问：“我们这里有没有敌人？”一个人回答：“有一个，他坐在第四排第十八号位子上。”勃问：“为什么他是敌人？”回答：“列宁说过敌人是不会打瞌睡的，我发现全场只有他一个人没有打瞌睡！”</p></blockquote><blockquote><p>“在苏联是否可以存在两党制？”“不，不可能，因为我们养不起。”</p></blockquote><blockquote><p>苏联特工对美国特工夸口道：“我们知道你们国家所有核导弹发射井的位置。”美国特工说：“那又有什么，我们知道你们未来20年全体政治局委员名单。”</p></blockquote><blockquote><p>一天戈尔巴乔夫到一个农场视察，看到有几头猪，就到猪旁边拍了一张照片。随行人员在照片上写上：戈尔巴乔夫和猪在一起，但又感到不妥。于是改成：猪和戈尔巴乔夫在一起，可还是感觉不对。最后把照片上的字改成：左起第三位是戈尔巴乔夫。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/2020/02/22/%E5%87%A0%E5%88%99%E7%AC%91%E8%AF%9D/0222fig1.png&quot; class=&quot;&quot; title=&quot;weibo&quot;&gt;

&lt;img src=&quot;/2020/02/22/%E5%87%A0%E5%88%99%E</summary>
      
    
    
    
    
    <category term="杂" scheme="https://yikayiyo.github.io/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>健康的武汉</title>
    <link href="https://yikayiyo.github.io/2020/02/11/%E5%81%A5%E5%BA%B7%E7%9A%84%E6%AD%A6%E6%B1%89/"/>
    <id>https://yikayiyo.github.io/2020/02/11/%E5%81%A5%E5%BA%B7%E7%9A%84%E6%AD%A6%E6%B1%89/</id>
    <published>2020-02-11T12:35:30.000Z</published>
    <updated>2023-11-22T10:18:22.757Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一个健康的社会不该只有一种声音。</p></blockquote><p>哪里也去不了，就不停地刷屏。</p><p>医护人员在医院休息室嚎啕大哭，火化工人在殡仪馆唱歌给自己打气，主妇在阳台上绝望地哭喊救命，电话里快要崩溃的发自党性的咆哮…</p><p>房间的门被焊被锁被堵，外出的车队在高速上排成长龙，为了活命想偷渡到隔壁省却发现河对岸一排一排的人在围追堵截…</p><p>和新闻里的完全不一样。</p><p>我听到了两种声音。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;一个健康的社会不该只有一种声音。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;哪里也去不了，就不停地刷屏。&lt;/p&gt;
&lt;p&gt;医护人员在医院休息室嚎啕大哭，火化工人在殡仪馆唱歌给自己打气，主妇在阳台上绝望地哭喊救命，电话里快要崩溃的发自党性的咆哮…&lt;/p</summary>
      
    
    
    
    
    <category term="杂" scheme="https://yikayiyo.github.io/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>Data flow Synchronization and Pipelining</title>
    <link href="https://yikayiyo.github.io/2020/01/16/Pipelining/"/>
    <id>https://yikayiyo.github.io/2020/01/16/Pipelining/</id>
    <published>2020-01-16T04:02:58.000Z</published>
    <updated>2023-11-22T10:18:22.726Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.coursera.org/learn/parallel-programming-in-java/">https://www.coursera.org/learn/parallel-programming-in-java/</a></p><h3 id="Split-phase-Barriers-with-Java-Phasers"><a href="#Split-phase-Barriers-with-Java-Phasers" class="headerlink" title="Split-phase Barriers with Java Phasers"></a>Split-phase Barriers with Java Phasers</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.coursera.org/learn/parallel-programming-in-java/&quot;&gt;https://www.coursera.org/learn/parallel-programming-in-java/&lt;/a&gt;&lt;/</summary>
      
    
    
    
    
    <category term="java" scheme="https://yikayiyo.github.io/tags/java/"/>
    
    <category term="并行编程" scheme="https://yikayiyo.github.io/tags/%E5%B9%B6%E8%A1%8C%E7%BC%96%E7%A8%8B/"/>
    
    <category term="学习" scheme="https://yikayiyo.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Loop Parallelism</title>
    <link href="https://yikayiyo.github.io/2020/01/13/Loop%20Parallelism/"/>
    <id>https://yikayiyo.github.io/2020/01/13/Loop%20Parallelism/</id>
    <published>2020-01-13T05:49:17.000Z</published>
    <updated>2023-11-22T10:18:22.726Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Parallel-Loops"><a href="#Parallel-Loops" class="headerlink" title="Parallel Loops"></a>Parallel Loops</h3><p>未知循环次数，利用了指针的for循环<br>每一个迭代当作一个子任务，<code>finish</code>约束整个循环</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">finish {</span><br><span class="line">    <span class="keyword">for</span> (p = head; p != <span class="literal">null</span> ; p = p.next) </span><br><span class="line">        async <span class="title function_">compute</span><span class="params">(p)</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>已知循环次数n，可以利用<code>forall</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vector addition</span></span><br><span class="line">forall (i : [<span class="number">0</span>:n-<span class="number">1</span>]) </span><br><span class="line">    a[i] = b[i] + c[i]</span><br></pre></td></tr></tbody></table></figure><p>利用 Java streams，上述功能有更加简洁的表达方式</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">a = IntStream.rangeClosed(<span class="number">0</span>, N-<span class="number">1</span>).parallel().toArray(i -&gt; b[i] + c[i]);</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h3 id="Parallel-Matrix-Multiplication"><a href="#Parallel-Matrix-Multiplication" class="headerlink" title="Parallel Matrix Multiplication"></a>Parallel Matrix Multiplication</h3><p>假设两个<code>n*n</code>的矩阵相乘，有</p><p>$$<br>c[i][j] = \sum_{k=0}^{n-1} a[i][k] * b[k][j]<br>$$<br>伪代码表示为</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i : [<span class="number">0</span>:n-<span class="number">1</span>]) {</span><br><span class="line">  <span class="keyword">for</span>(j : [<span class="number">0</span>:n-<span class="number">1</span>]) { c[i][j] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(k : [<span class="number">0</span>:n-<span class="number">1</span>]) {</span><br><span class="line">      c[i][j] = c[i][j] + a[i][k]*b[k][j]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>要替换成并行计算，可以简单地将外两层的for循环改成<code>forall</code></p><p>for-k 必须是线性的，因为这里有写数据（data race</p><h3 id="Barriers-in-Parallel-Loops"><a href="#Barriers-in-Parallel-Loops" class="headerlink" title="Barriers in Parallel Loops"></a>Barriers in Parallel Loops</h3><p>下面有一个简单的并行任务</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">forall (i : [<span class="number">0</span>:n-<span class="number">1</span>]) {</span><br><span class="line">    myId = lookup(i); <span class="comment">// convert int to a string </span></span><br><span class="line">    print HELLO, myId;</span><br><span class="line">    print BYE, myId;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在不同的执行下会有不同顺序的结果（相同myId对应的HELLO一定在BYE之前</p><p>barriers可以将一个parallel loop分为不同的阶段</p><p>在两个print之间插入一个barrier，可以保证所有的HELLO出现在BYE之前</p><p>两种写法：</p><ul><li><p>在一个<code>forall</code>循环中插入barriers分为不同的阶段 (两个对应的print共享myId</p></li><li><p>为每个阶段写自己的<code>forall</code>循环 (借助 intermediate data structure  to communicate the myId values from one <em>forall</em> to another <em>forall</em></p></li></ul><h3 id="Parallel-One-Dimensional-Iterative-Averaging"><a href="#Parallel-One-Dimensional-Iterative-Averaging" class="headerlink" title="Parallel One-Dimensional Iterative Averaging"></a>Parallel One-Dimensional Iterative Averaging</h3><p>Solve the recurrence<br>$$<br>X_i=\frac{X_{i-1}+X_{i+1}}2<br>$$</p><p>with boundary conditions<br>$$<br>X_0=0\ and\ X_n=1<br>$$</p><p><a href="https://en.wikipedia.org/wiki/Jacobi_method">Jacobi method</a>利用两个数组oldX[] and newX[]迭代求解该问题，并行伪代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (iter: [<span class="number">0</span>:nsteps-<span class="number">1</span>]) {</span><br><span class="line">  forall (i: [<span class="number">1</span>:n-<span class="number">1</span>]) {</span><br><span class="line">    newX[i] = (oldX[i-<span class="number">1</span>] + oldX[i+<span class="number">1</span>]) / <span class="number">2</span>;</span><br><span class="line">  }</span><br><span class="line">  swap pointers newX and oldX;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上述方法创建了 <em>nsteps</em> <em>×</em> (<em>n</em> <em>−</em> 1) 个任务</p><p><strong>使用Barriers可以减少需要创建的任务个数</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">forall ( i: [<span class="number">1</span>:n-<span class="number">1</span>]) {</span><br><span class="line">  <span class="keyword">for</span> (iter: [<span class="number">0</span>:nsteps-<span class="number">1</span>]) {</span><br><span class="line">    newX[i] = (oldX[i-<span class="number">1</span>] + oldX[i+<span class="number">1</span>]) / <span class="number">2</span>;</span><br><span class="line">    NEXT; <span class="comment">// Barrier</span></span><br><span class="line">    swap pointers newX and oldX;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上述方法只需要创建 <em>(n-1)</em> 个任务</p><p>This is a significant improvement since creating tasks is usually more expensive than performing barrier operations.</p><h3 id="Iteration-Grouping-Chunking-in-Parallel-Loops"><a href="#Iteration-Grouping-Chunking-in-Parallel-Loops" class="headerlink" title="Iteration Grouping/Chunking in Parallel Loops"></a>Iteration Grouping/Chunking in Parallel Loops</h3><p>对于向量相加问题</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">forall (i : [<span class="number">0</span>:n-<span class="number">1</span>]) a[i] = b[i] + c[i]</span><br></pre></td></tr></tbody></table></figure><p>上述方法创建了n个任务，当n很大时overheads也会很大</p><p>解决方法</p><p><strong>分组</strong>（<em>loop</em> <em>chunking</em> or <em>iteration grouping</em></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">forall (g:[<span class="number">0</span>:ng-<span class="number">1</span>])</span><br><span class="line">  <span class="keyword">for</span> (i : mygroup(g, ng, [<span class="number">0</span>:n-<span class="number">1</span>])) a[i] = b[i] + c[i]</span><br></pre></td></tr></tbody></table></figure><p>上述方法将任务个数从 <strong>n</strong> 降到了 <strong>ng</strong>（分组个数</p><p>分组方法有两种：</p><ul><li>block<ul><li>将连续的迭代分为一组</li></ul></li><li>cyclic<ul><li>将同余类迭代（ iterations in the same congruence class，分为一组</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Parallel-Loops&quot;&gt;&lt;a href=&quot;#Parallel-Loops&quot; class=&quot;headerlink&quot; title=&quot;Parallel Loops&quot;&gt;&lt;/a&gt;Parallel Loops&lt;/h3&gt;&lt;p&gt;未知循环次数，利用了指针的for循环&lt;br&gt;每一个迭代当作一个子任务，&lt;code&gt;finish&lt;/code&gt;约束整个循环&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;finish {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (p = head; p != &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; ; p = p.next) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        async &lt;span class=&quot;title function_&quot;&gt;compute&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(p)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;已知循环次数n，可以利用&lt;code&gt;forall&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// vector addition&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;forall (i : [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:n-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a[i] = b[i] + c[i]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;利用 Java streams，上述功能有更加简洁的表达方式&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a = IntStream.rangeClosed(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, N-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;).parallel().toArray(i -&amp;gt; b[i] + c[i]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="学习笔记" scheme="https://yikayiyo.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="java" scheme="https://yikayiyo.github.io/tags/java/"/>
    
    <category term="并行编程" scheme="https://yikayiyo.github.io/tags/%E5%B9%B6%E8%A1%8C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
